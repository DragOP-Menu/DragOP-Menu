var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var LinearLayout = android.widget.LinearLayout;
var GUI;
var dialog;
var DragOP = {
	mods: new Array()
};
var lc = {
	en_US: 1,
	de_DE: 2
};
var l = new Array();
l.push(new Array()); //Codes
l.push(new Array()); //English
l.push(new Array()); //German
//Multi Language Support

var Utils = {
	online: false,
	modsCount: 0,
	Entity: {
		bowAimAt: function (ent) {
			var velocity = 1;
			var posX = Entity.getX(ent) - Player.getX();
			var posY = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) - Player.getY() : Entity.getY(ent) + 1 - Player.getY();
			var posZ = Entity.getZ(ent) - Player.getZ();
			var yaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
			var y2 = Math.sqrt(posX * posX + posZ * posZ);
			var g = 0.006;
			var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
			var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
			setRot(Player.getEntity(), yaw, pitch);
		},
		getNearestEntity(max, useServerFunc) {
			var mobs = Entity.getAll();
			var players = Server.getAllPlayers();
			var small = max;
			var ent = null;
			for (var i = 0; i < mobs.length; i++) {
				var x = Entity.getX(mobs[i]) - getPlayerX();
				var y = Entity.getY(mobs[i]) - getPlayerY();
				var z = Entity.getZ(mobs[i]) - getPlayerZ();
				var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				if (dist < small && dist > 0 && Entity.getEntityTypeId(mobs[i]) <= 63 && Entity.getHealth(mobs[i]) >= 1) {
					small = dist;
					ent = mobs[i];
				}
			}
			for (var i = 0; i < players.length; i++) {
				var x = Entity.getX(players[i]) - getPlayerX();
				var y = Entity.getY(players[i]) - getPlayerY();
				var z = Entity.getZ(players[i]) - getPlayerZ();
				var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {
					small = dist;
					ent = players[i];
				}
			}
		}
	}
};

DragOP.addCode = function (code) {
	l[0].push(code);
}
DragOP.setLString = function (code, lang, value) {
		var done = false;
		l[0].forEach(function (entry, index, array) {
			if (entry.toLowerCase() == code.toLowerCase()) {
				l[lang][index] = value;
				done = true;
			}
		});
		if (done) return;
		//l[0].push(code+"".toLowerCase());
		//DragOP.setLString(code, lang, value);
	}
	//DragOP.addCode(code);
DragOP.addCode("hacks.gamemode");
DragOP.addCode("gm.survival");
DragOP.addCode("gm.creative");
//DragOP.setLString(code, lc.en_US, value);
DragOP.setLString("hacks.gamemode", lc.en_US, "Gamemode");
DragOP.setLString("gm.survival", lc.en_US, "Survival");
DragOP.setLString("gm.creative", lc.en_US, "Creative");
//German
DragOP.setLString("hacks.gamemode", lc.de_DE, "Spielmodus");
DragOP.setLString("gm.survival", lc.de_DE, "Ãœberleben");
DragOP.setLString("gm.creative", lc.de_DE, "Kreativ");

DragOP.getL = function () {
	//Todo
	return l[1];
}

DragOP.getLString = function (code) {
	var str = code;
	l[0].forEach(function (entry, index, array) {

		if (entry.toLowerCase()
			.indexOf(code.toLowerCase()) > -1) {
			try {
				str = DragOP.getL()[index];
			} catch (e) {
				try {
					str = l[1][index];
				} catch (e) {
					DragOP.ctoast(e);
				}


			}
		}
	});
	return str;
}

DragOP.ctoast = function (text, showPrefix) {
	try {
		var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				var thetoast = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), text, android.widget.Toast.LENGTH_LONG);
				var layout = new android.widget.LinearLayout(ctx);
				var msg = new android.widget.TextView(ctx);
				if (showPrefix || showPrefix == null) text = "DragOP: " + text;
				msg.setText(text);
				msg.setGravity(android.view.Gravity.CENTER);
				msg.setTextSize(20);
				msg.setPadding(10, 10, 10, 10);
				msg.setTextColor(android.graphics.Color.WHITE);
				layout.addView(msg);
				//layout.setBackground(new android.graphics.drawable.BitmapDrawable(bg));
				thetoast.setView(layout);
				thetoast.show();
			}
		}));
	} catch (e) {
		print(e);
	}
}
DragOP.loadModsAnim = function (progress) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler()
				.postDelayed(new java.lang.Runnable({
					run: function () {
						ModPE.langEdit("menu.copyright", "DragOP: " + progress + " Mods loaded");
						if (progress < Utils.modsCount) DragOP.loadModsAnim(progress + 1);
					}
				}), 50);
		}
	}));
}
DragOP.getStyledBackground = function () {
	var bg = android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(2);
	bg.setColor(android.graphics.Color.argb(210, 0, 128, 0));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(210, 139, 0, 0));
	return bg;
}

DragOP.showModDialog = function (text, desc, type) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function () {
			try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				var modTitle = new android.widget.TextView(ctx);
				modTitle.setText(text);
				modTitle.setTextSize(20);
				var modTypeText = new android.widget.TextView(ctx);
				if (type == null) type = "Mod";
				modTypeText.setText("Type: " + type + "\n");
				var modDescTitle = new android.widget.TextView(ctx);
				modDescTitle.setText("Description:");
				var modDescText = new android.widget.TextView(ctx);
				if (desc == null) desc = "Not specified";
				modDescText.setText(desc + ".\n");
				var closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				var dialogLayout = new LinearLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				dialogLayout.setGravity(android.view.Gravity.CENTER);
				dialogLayout.setOrientation(LinearLayout.VERTICAL);
				dialogLayout.addView(modTitle);
				dialogLayout.addView(modTypeText);
				dialogLayout.addView(modDescTitle);
				dialogLayout.addView(modDescText);
				dialogLayout.addView(closeButton);
				dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle(text);
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function () {
						showMenu();
					}
				});
				dialog.show();
				var window = dialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function (view) {
						dialog.dismiss();
					}
				});
			} catch (e) {
				DragOP.ctoast("Error: " + e);
			}
		}
	});
}

DragOP.registerModule = function (mod) {
	for (var i = 0; i < 40; i++) {
		DragOP.mods.push(mod);
		Utils.modsCount += 1;
	}
}
var gmhack = {
	name: "Gamemode",
	isStateMode: function () {
		return false;
	},
	extra: Level.getGameMode(),
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		if (this.extra == 1) this.extra = 0;
		else this.extra = 1;
		Level.setGameMode(this.extra);
	},
	onRefresh: function (btn) {
		btn.setText(DragOP.getLString("hacks.gamemode") + ": " + (this.extra == 0 ? DragOP.getLString("gm.survival") : DragOP.getLString("gm.creative")));
	}
};
DragOP.registerModule(gmhack);

//Menu open Button
var menuBtn;
var moving = false;
var dx = 0;
var dy = 0;
var mPosX = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 16 * 5;
//Main Menu
var mwidth = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 100 * 70;
var menu;
var styledBtn = function () {
	var defaultBtn = new android.widget.Button(ctx);
	defaultBtn.setBackgroundDrawable(DragOP.getStyledBackground());

	return defaultBtn;
}

var modBtn = function (mod) {
	var btn = styledBtn();
	btn.setTransformationMethod(null);
	btn.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			mod.onClick(btn);
			mod.onRefresh(btn);
		}
	}));

	var btn1 = styledBtn();
	btn1.setTransformationMethod(null);
	btn1.setText("ðŸ”»");
	btn1.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			DragOP.showModDialog(mod.name);
			menu.dismiss();

			//Show a screen or a dialog with the mod's info and settings
		}
	}));

	var modButtonLayout = new LinearLayout(ctx);
	modButtonLayout.setOrientation(LinearLayout.HORIZONTAL);

	var modButtonLayoutLeft = new LinearLayout(ctx);
	modButtonLayoutLeft.setOrientation(1);
	modButtonLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutLeft);

	var modButtonLayoutRight = new LinearLayout(ctx);
	modButtonLayoutRight.setOrientation(1);
	modButtonLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2 - mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutRight);

	modButtonLayoutLeft.addView(btn);
	modButtonLayoutRight.addView(btn1);

	mod.onRefresh(btn);
	//btn.setLayoutParams(new android.widget.TableLayout.LayoutParams(mwidth/2, android.widget.TableLayout.LayoutParams.WRAP_CONTENT, 1));
	return modButtonLayout;
};

function dip2px(dips) {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	return Math.ceil(dips * ctx.getResources()
		.getDisplayMetrics()
		.density);
}
DragOP.generateMenu = function (keyword) {
	var lay = new android.widget.TableLayout(ctx);
	var currow;
	DragOP.mods.forEach(function (entry, index, array) {
		if((entry.name.toString().toLowerCase().indexOf(keyword.toString().toLowerCase()))>-1 || (keyword == null || keyword == "" || keyword == undefined)){
		if (index % 2 == 1) {
			currow.addView(new modBtn(DragOP.mods[index]));
			lay.addView(currow);
			currow = null;

		} else {
			currow = new android.widget.TableRow(ctx);
			currow.addView(new modBtn(DragOP.mods[index]));

		}}else{
			clientMessage(keyword.toString().toLowerCase()+" Â§l:Â§r "+entry.name.toLowerCase());
		}
	});
	if (currow != null) lay.addView(currow);
	var sc = new android.widget.ScrollView(ctx);
	sc.addView(lay);
	return sc;
}

function showMenu() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {

				var sbar = new android.widget.LinearLayout(ctx);

				var bg = android.graphics.drawable.GradientDrawable();
				bg.setColor(android.graphics.Color.argb(100, 255, 255, 255));
				bg.setStroke(dip2px(2), android.graphics.Color.BLACK);
				bg.setCornerRadius(1);

				sbar.setBackgroundDrawable(bg);
				var search = new android.widget.EditText(ctx);
				search.setBackgroundColor(android.graphics.Color.TRANSPARENT);
				search.setHint("Search a mod");
				search.setGravity(android.view.Gravity.CENTER);
				search.addTextChangedListener(new android.text.TextWatcher(){
					afterTextChanged:function(text){
						updateMenu(text, toplayout);
					}
				});
				sbar.addView(search, new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
				sbar.setId(39472);
				var mlist = new android.widget.LinearLayout(ctx);
				//mlist.setGravity(android.view.Gravity.TOP);
				mlist.setId(20372);
				mlist.addView(DragOP.generateMenu(search.getText()+""));
				var lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				//lparam.addRule(android.widget.RelativeLayout.BELOW, toplayout.getChildAt(0).getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				//lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				var toplayout = new android.widget.RelativeLayout(ctx);
				toplayout.addView(sbar, lparam);
				lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				lparam.addRule(android.widget.RelativeLayout.BELOW, toplayout.getChildAt(0)
					.getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				//lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				mlist.setLayoutParams(lparam);
				toplayout.addView(mlist);
				//toplayout.setBackground(null);
				toplayout.setGravity(android.view.Gravity.CENTER);
				toplayout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						menu.dismiss();
						showMenuBtn();
					}
				}));
				menu = new android.widget.PopupWindow(toplayout, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, true);
				//menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				//menu.setSoftInputMode(android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
				menu.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.CENTER, 0, 0 /*ctx.getWindowManager().getDefaultDisplay().getHeight()*/ );
				//search.requestFocus();
				//lol
			} catch (e) {
				DragOP.ctoast(e);
			}
		}
	}));
}
function updateMenu(keyword, toplayout){
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				var newList = DragOP.generateMenu(keyword);
	            var mlist = toplayout.getChildAt(1);
	var lparam = mlist.getLayoutParams();
	while(mlist.getChildCount() > 0)mlist.removeView(mlist.getChildAt(0));
	mlist.addView(newList);
	menu.update();
			}catch(e){
				DragOP.ctoast(e);
			}
		}
	}));
}
function showMenuBtn() {
	
	menuBtn = new android.widget.Button(ctx);
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				if (GUI != null && GUI.isShowing()) GUI.dismiss();
				/*if(ghost) {
					menuBtn.setText('');
					menuBtn.setBackgroundColor(android.graphics.Color.parseColor("#01ffff00"));
				} else {
					menuBtn.setText('D');
					menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));
				}
				*/
				menuBtn.setText('D');
				//menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));

				menuBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						//mainMenu();
						//windowMenu();
						/*exit();*/
						showMenu();
						GUI.dismiss();
						GUI = null;
					}
				}));
				menuBtn.setOnTouchListener(new android.view.View.OnTouchListener() {
					onTouch: function (view, motionEvent) {
						try {
							if (!moving) return false;
							switch (motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx = mPosX - motionEvent.getRawX();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX = (motionEvent.getRawX() + dx);
								GUI.update(mPosX, 0, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving = false;
								break;
							}
						} catch (e) {
							DragOP.ctoast("Error: " + e);
						}

						return true;
					}
				});
				menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener() {
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						/*gad();
						configd1();
						advsetd();*/
						moving = true;
						return true;
					}
				});
				menuBtn.getBackground()
					.setAlpha(200);

				GUI = new android.widget.PopupWindow(menuBtn, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				GUI.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 5, 0);
			} catch (err) {
				DragOP.ctoast(err);
			}
		}
	}));
}
showMenuBtn();

function rptask() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler()
				.postDelayed(new java.lang.Runnable({
					run: function () {
						nx = getPlayerX();
						ny = getPlayerY();
						nz = getPlayerZ();
						if ((GUI == null || !GUI.isShowing()) && (menu == null || !menu.isShowing()) && (dialog == null || !dialog.isShowing())) {
							net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;
							net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);
							showMenuBtn();
						}
						//did you know thats its eval(java.lang.String) and not eval(null)?
						rptask();
					}
				}), 15);
		}
	}))
}

rptask();
DragOP.loadModsAnim(0);

DragOP.commandManager = function(cmd) {
	var commandSplit = cmd.split(" ");
	switch(commandSplit[0]) {
		case "help":
			clientMessage("[DragOP] Help command is coming soon!");
			break;
		case "t":
			if(cmd.substring(2, cmd.length) != null && cmd.substring(2, cmd.length) != undefined) {
				DragOP.mods.forEach(function (entry, index, array) {
					if(entry.toLowerCase() == cmd.substring(2, cmd.length).toLowerCase() && DragOP.mods[index].isStateMode()) {
						DragOP.mods[index].onClick(null);
						DragOP.ctoast("Sucessfully toggled module " + entry.toLowerCase());
						return;
					}
				});
				DragOP.ctoast("Module " + cmd.substring(2, cmd.length) + " can't be found/toggled!");
			} else {
				DragOP.ctoast("Syntax error!");
			}
			break;
	}
}

function chatHook(text) {
	if(text.charAt(0) == ".") {
		preventDefault();
		com.mojang.minecraftpe.MainActivity.currentMainActivity.get().nativeSetTextboxText("");
		com.mojang.minecraftpe.MainActivity.currentMainActivity.get().updateTextboxText("");
		DragOP.commandManager(text.substring(1, text.length));
	}
}
