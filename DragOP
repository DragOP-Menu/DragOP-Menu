
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var LinearLayout = android.widget.LinearLayout;
var GUI;
var dialog;
var searchQ = ""; //Current search query
var tick1 = 0;
var search;

var DragOP = {
	mods: new Array()
};
var lc = {
	en_US: 1,
	de_DE: 2
};
var ModuleType = {
	mod: 1,
	special: 2,
	command: 3,
	cmd: 3,
	toName: function (type) {
		switch (type) {
		case ModuleType.mod:
			return DragOP.getLString("moduletype.mod");
			break;
		case ModuleType.special:
			return DragOP.getLString("moduletype.special");
			break;
		case ModuleType.command:
			return DragOP.getLString("moduletype.command");
			break;
		default:
			return "unknown";
		}
	}
};
var l = new Array();
l.push(new Array()); //Codes
l.push(new Array()); //English
l.push(new Array()); //German
//Multi Language Support
var BypassMode = {
	DEFAULT: 0,
	LBSG: 1
};
var SpeedMode = {
	DEFAULT: 0,
	BHOP: 1,
	LONGJUMP: 2
};
var Utils = {
	bypassMode: BypassMode.DEFAULT,
	speedMode: SpeedMode.DEFAULT,
	online: false,
	modsCount: 0,
	currentSearchCount: 0,
	font: android.os.Build.VERSION.SDK_INT>=17?android.graphics.Typeface.create("sans-serif-light", android.graphics.Typeface.NORMAL):android.graphics.Typeface.DEFAULT,
	ModSettings: {
		getSlider: function(){
			return new android.widget.SeekBar(ctx);
		}
	},
	Block: {
		isLiquid: function(id){
			if(id >= 8 && id<= 11)return true;
			return false;
		}
	},
	Player: {
		onGround: function () {
			var y = getPlayerY();
			while (y > 1) y -= 1;
			
			if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 &&!Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ())) ) return true;
			return false;
		},
		isCollidedHorizontally: function(){
			var x = getPlayerX();
			var z = getPlayerZ();
			var blockX = Math.round(x-0.5);
			var blockZ = Math.round(z-0.5);
			while(x < 1)x += 1;
			while(z < 1)z += 1;
			while(x > 1)x -= 1;
			while(z > 1)z -= 1;
			
			if(Math.round(x * 100) == 31)x-=0.01;
			if(Math.round(z * 100) == 31)z-=0.01;
			if(Math.round(x * 100) == 69)x+=0.01;
			if(Math.round(z * 100) == 69)z+=0.01;
			if(Math.round(x * 100) == 30)blockX--;
			if(Math.round(z * 100) == 30)blockZ--;
			if(Math.round(x * 100) == 70)blockX++;
			if(Math.round(z * 100) == 70)blockZ++;
			//clientMessage(blockX+";"+blockZ);
			if(getTile(blockX, getPlayerY(), blockZ) == 0 && getTile(blockX, getPlayerY()-1, blockZ)==0)return false;
			
			if(Block.getDestroyTime(getTile(blockX, getPlayerY()-1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, getPlayerY(), blockZ)) <= 0.1)return false;
			
			if(Math.round(x * 100) == 30 || Math.round(x * 100) == 70)return true;
			if(Math.round(z * 100) == 30 || Math.round(z * 100) == 70)return true;
			return false;
		}
	},
	Vel: {
		lastX: 0,
		lastY: 0,
		lastZ: 0,
		calculateSpeed: function () {
			return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
		}
	},
	Pos: {
		lastX: 0,
		lastY: 0,
		lastZ: 0
	},
	Entity: {
		targettedMobs: [true, true],/*first mobs second players*/
		allEntitys: new Array(),
		crosshairAimAt: function (ent, pos) {
			if (ent != null) {
				var x = Entity.getX(ent) - getPlayerX();
				var y = Entity.getY(ent) - getPlayerY();
				var z = Entity.getZ(ent) - getPlayerZ();
				if (pos != null && pos instanceof Array) {

					x = Entity.getX(ent) - pos[0];
					y = Entity.getY(ent) - pos[1];
					z = Entity.getZ(ent) - pos[2];
				}
				if (Entity.getEntityTypeId(ent) != 63)
					y += 0.5;
				var a = 0.5 + Entity.getX(ent);
				var b = Entity.getY(ent);
				var c = 0.5 + Entity.getZ(ent);
				var len = Math.sqrt(x * x + y * y + z * z);
				var y = y / len;
				var pitch = Math.asin(y);
				pitch = pitch * 180.0 / Math.PI;
				pitch = -pitch;
				var yaw =  -Math.atan2(a - (Player.getX() + 0.5), c - (Player.getZ() + 0.5)) * (180 / Math.PI);
				if (pitch < 89 && pitch > -89) {
					Entity.setRot(Player.getEntity(),yaw, pitch);
				}
			}
		},
		bowAimAt: function (ent) {
			var velocity = 1;
			var posX = Entity.getX(ent) - Player.getX();
			var posY = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) - Player.getY() : Entity.getY(ent) + 1 - Player.getY();
			var posZ = Entity.getZ(ent) - Player.getZ();
			var yaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
			var y2 = Math.sqrt(posX * posX + posZ * posZ);
			var g = 0.006;
			var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
			var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
			if (pitch < 89 && pitch > -89) {
				setRot(Player.getEntity(), yaw, pitch);
			}
			
		},
		getNearestEntity(maxrange) {
			var mobs = Utils.Entity.allEntitys;
			
			var players = Server.getAllPlayers();
			var small = maxrange;
			var ent = null;
			/*if(mobs.length > 500)clientMessage("lag found: "+mobs.length);*/
			for (var i = 0; i < mobs.length; i++) {
				var x = Entity.getX(mobs[i]) - getPlayerX();
				var y = Entity.getY(mobs[i]) - getPlayerY();
				var z = Entity.getZ(mobs[i]) - getPlayerZ();
				
				var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				var allowed = false;
				if(Utils.Entity.targettedMobs[1] == true && Entity.getEntityTypeId(mobs[i]) == 63)allowed = true;
				if(Utils.Entity.targettedMobs[0] == true && Entity.getEntityTypeId(mobs[i]) < 63)allowed = true;
				
				if (dist < small && dist > 0 && allowed == true&& Entity.getHealth(mobs[i]) > 0) {
					small = dist;
					ent = mobs[i];
				}else if(dist < small && dist > 0){
					//clientMessage(Entity.getEntityTypeId(mobs[i]));
				}
			}
			for (var i = 0; i < players.length; i++) {
				var x = Entity.getX(players[i]) - getPlayerX();
				var y = Entity.getY(players[i]) - getPlayerY();
				var z = Entity.getZ(players[i]) - getPlayerZ();
				var allowed = false;
				if(Utils.Entity.targettedMobs[1] == true && Entity.getEntityTypeId(players[i]) == 63)allowed = true;
				if(Utils.Entity.targettedMobs[0] == true && Entity.getEntityTypeId(players[i]) < 63)allowed = true;
				var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				if (dist < small && dist > 0 && allowed && Entity.getHealth(players[i]) >= 1) {
					small = dist;
					ent = players[i];
				}
			}
			
			return ent;
		}
	}
};

DragOP.addCode = function (code) {
	l[0].push(code);
}
DragOP.setLString = function (code, lang, value) {
		var done = false;
		l[0].forEach(function (entry, index, array) {
			if (entry.toLowerCase() == code.toLowerCase()) {
				l[lang][index] = value;
				done = true;
			}
		});
		if (done) return;
		//l[0].push(code+"".toLowerCase());
		//DragOP.setLString(code, lang, value);
	}
	//DragOP.addCode(code);
DragOP.addCode("special.panic");
DragOP.addCode("special.target");
DragOP.addCode("special.bypass");
DragOP.addCode("hacks.gamemode");
DragOP.addCode("hacks.speed");
DragOP.addCode("hacks.aimaura");
DragOP.addCode("hacks.jumpspeed");
DragOP.addCode("hacks.autojump");
DragOP.addCode("hacks.tpaura");
DragOP.addCode("hacks.bowaimbot");
DragOP.addCode("hacks.clicktp");
DragOP.addCode("hacks.longjump");
DragOP.addCode("hacks.flight");
DragOP.addCode("hacks.step");
DragOP.addCode("hacks.jesus");
DragOP.addCode("hacks.nodownglide");
DragOP.addCode("hacks.glide");
DragOP.addCode("gm.survival");
DragOP.addCode("gm.creative");
DragOP.addCode("moduletype.mod");
DragOP.addCode("moduletype.special");
DragOP.addCode("moduletype.command");
DragOP.addCode("moddialog.description");
DragOP.addCode("moddialog.type");
DragOP.addCode("state.on");
DragOP.addCode("state.off");

//DragOP.setLString(code, lc.en_US, value);
DragOP.setLString("special.bypass", lc.en_US, "Bypass");
DragOP.setLString("special.target", lc.en_US, "Target");
DragOP.setLString("special.panic", lc.en_US, "Panic");
DragOP.setLString("hacks.gamemode", lc.en_US, "Gamemode");
DragOP.setLString("hacks.speed", lc.en_US, "Speed");
DragOP.setLString("hacks.jumpspeed", lc.en_US, "JumpSpeed");
DragOP.setLString("hacks.aimaura", lc.en_US, "AimAura"); //No good German translation for aim aura
DragOP.setLString("hacks.autojump", lc.en_US, "AutoJump");
DragOP.setLString("hacks.tpaura", lc.en_US, "TP-Aura");
DragOP.setLString("hacks.bowaimbot", lc.en_US, "BowAimBot");
DragOP.setLString("hacks.clicktp", lc.en_US, "TapTeleport");
DragOP.setLString("hacks.longjump", lc.en_US, "Longjump");
DragOP.setLString("hacks.flight", lc.en_US, "Flight");
DragOP.setLString("hacks.step", lc.en_US, "Step");
DragOP.setLString("hacks.jesus", lc.en_US, "Jesus");
DragOP.setLString("hacks.nodownglide", lc.en_US, "NoDownGlide");
DragOP.setLString("hacks.glide", lc.en_US, "Glide");
DragOP.setLString("gm.survival", lc.en_US, "Survival");
DragOP.setLString("gm.creative", lc.en_US, "Creative");
DragOP.setLString("moduletype.mod", lc.en_US, "Mod");
DragOP.setLString("moduletype.special", lc.en_US, "Special");
DragOP.setLString("moduletype.command", lc.en_US, "Command");
DragOP.setLString("moddialog.description", lc.en_US, "Description");
DragOP.setLString("moddialog.type", lc.en_US, "Type");
DragOP.setLString("state.on", lc.en_US, "On");
DragOP.setLString("state.off", lc.en_US, "Off");
//German
DragOP.setLString("hacks.gamemode", lc.de_DE, "Spielmodus");
/*DragOP.setLString("hacks.speed", lc.de_DE, "Schnelligkeit");Schnelligkeit is bad*/
DragOP.setLString("hacks.jumpspeed", lc.de_DE, "HasenTempo"); //Why not using bunnyspeed? :)
DragOP.setLString("hacks.autojump", lc.de_DE, "Automatisches\nSpringen");
DragOP.setLString("hacks.jesus", lc.de_DE, "Wasserlauf");
DragOP.setLString("hacks.flight", lc.de_DE, "Fliegen");
DragOP.setLString("gm.survival", lc.de_DE, "Ãberleben");
DragOP.setLString("gm.creative", lc.de_DE, "Kreativ");
DragOP.setLString("moduletype.mod", lc.de_DE, "Mod");
DragOP.setLString("moduletype.special", lc.de_DE, "Spezielles");
DragOP.setLString("moduletype.command", lc.de_DE, "Befehl");
DragOP.setLString("moddialog.description", lc.de_DE, "Beschreibung");
DragOP.setLString("moddialog.type", lc.de_DE, "Typ");

DragOP.getL = function () {
	//Todo
	return l[1];
}

DragOP.getLString = function (code) {
	var str = code;
	l[0].forEach(function (entry, index, array) {

		if (entry.toLowerCase()
			.indexOf(code.toLowerCase()) > -1) {
			try {
				str = DragOP.getL()[index];
			} catch (e) {
				try {
					str = l[1][index];
				} catch (e) {
					DragOP.ctoast(e);
				}


			}
		}
	});
	return str;
}

DragOP.ctoast = function (text, showPrefix) {
	try {
		var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				var thetoast = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), text, android.widget.Toast.LENGTH_LONG);
				var layout = new android.widget.LinearLayout(ctx);
				var msg = new android.widget.TextView(ctx);
				if (showPrefix || showPrefix == null) text = "DragOP: " + text;
				msg.setText(text);
				msg.setGravity(android.view.Gravity.CENTER);
				msg.setTextSize(20);
				msg.setPadding(10, 10, 10, 10);
				msg.setTextColor(android.graphics.Color.WHITE);
				var bg = new android.graphics.drawable.GradientDrawable();
				bg.setColor(android.graphics.Color.argb(150, 50, 50, 50));
				bg.setStroke(dip2px(5), android.graphics.Color.argb(200, 5, 5, 5));
				bg.setCornerRadius(dip2px(20));
				layout.addView(msg);
				layout.setBackground(bg);
				thetoast.setView(layout);
				thetoast.show();
			}
		}));
	} catch (e) {
		print(e);
	}
}
DragOP.loadModsAnim = function (progress) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler()
				.postDelayed(new java.lang.Runnable({
					run: function () {
						ModPE.langEdit("menu.copyright", "DragOP: " + progress + " Modules loaded");
						if (progress < Utils.modsCount) DragOP.loadModsAnim(progress + 1);
					}
				}), 70);
		}
	}));
}
DragOP.getStyledBackground = function () {
	var bg = android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(1);
	bg.setColor(android.graphics.Color.argb(90, 255, 255, 255));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(210, 0, 0, 0));
	return bg;
}
DragOP.getStyledBtnBackground = function (state, toggleable) {
	var bg = android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(1);
	bg.setColor(android.graphics.Color.argb(80, 0, 0, 0));
	if (state) bg.setColor(android.graphics.Color.argb(210, 0, 200, 0));
	if (toggleable == false) bg.setColor(android.graphics.Color.argb(210, 230, 150, 30));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(230, 0, 0, 0));
	return bg;
}

DragOP.showModDialog = function (mod) {
	ctx.runOnUiThread(new java.lang.Runnable() {
		run: function () {
			try {
				var display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				var content = new android.widget.RelativeLayout(ctx);
				content.setId(9472729);
				var contentScroll = new android.widget.ScrollView(ctx);
				contentScroll.setId(492628);
				//default content
				var modTitle = new android.widget.TextView(ctx);
				modTitle.setText(android.text.Html.fromHtml("<u>" + mod.name + "</u>"));
				modTitle.setTextSize(dip2px(20));
				modTitle.setGravity(android.view.Gravity.CENTER);
				modTitle.setTextColor(android.graphics.Color.BLACK);
				modTitle.setTypeface(Utils.font);
				modTitle.setId(94771);
				var modTypeText = new android.widget.TextView(ctx);
				modTypeText.setText(DragOP.getLString("moddialog.type") + ": " + ModuleType.toName(mod.type));
				modTypeText.setGravity(android.view.Gravity.CENTER);
				modTypeText.setTextColor(android.graphics.Color.BLACK);
				modTypeText.setTextSize(dip2px(10));
				modTypeText.setTypeface(Utils.font);
				modTypeText.setId(93922);
				var modDescTitle = new android.widget.TextView(ctx);
				modDescTitle.setText(DragOP.getLString("moddialog.description") + ":");
				modDescTitle.setGravity(android.view.Gravity.CENTER);
				modDescTitle.setTextColor(android.graphics.Color.BLACK);
				modDescTitle.setTextSize(dip2px(11));
				modDescTitle.setTypeface(Utils.font);
				modDescTitle.setId(29582);
				var modDescText = new android.widget.TextView(ctx);
				modDescText.setText(mod.desc);
				modDescText.setGravity(android.view.Gravity.CENTER);
				modDescText.setTextSize(dip2px(10));
				modDescText.setTypeface(Utils.font);
				modDescText.setTextColor(android.graphics.Color.BLACK);
				modDescText.setId(29285);
				//settings
				var modSettings = new android.widget.LinearLayout(ctx);
				modSettings.setOrientation(1);
				if(mod.getSettingsLayout){
					//modSettings = mod.Layout();
					var params = new android.widget.LinearLayout.LayoutParams(mwidth, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					var line = new android.widget.TextView(ctx);
					line.setText("");
					var gradientLine = new android.graphics.drawable.GradientDrawable();
					gradientLine.setShape(android.graphics.drawable.GradientDrawable.LINE);
					gradientLine.setColor(android.graphics.Color.TRANSPARENT);
					//gradientLine.setCornerRadius(dip2px(100));
					gradientLine.setStroke(dip2px(1), android.graphics.Color.argb(50,0,0,0));
					line.setBackground(gradientLine);
					line.setGravity(android.view.Gravity.CENTER);
					modSettings.addView(line, params);
					var settingText = new android.widget.TextView(ctx);
					settingText.setText("Settings");
					settingText.setGravity(android.view.Gravity.CENTER);
					settingText.setTextColor(android.graphics.Color.BLACK);
					settingText.setTextSize(dip2px(11));
					settingText.setTypeface(Utils.font);
					modSettings.addView(settingText, params);
					var extraParams = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					modSettings.addView(mod.getSettingsLayout(extraParams));
					//Im thinking about a line (html <hr> tag) and the layout underneath
				}
				//footer
				var closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				var dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				//dialogLayout.setGravity(android.view.Gravity.CENTER);
				//dialogLayout.setOrientation(LinearLayout.VERTICAL);
				var params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				dialogLayout.addView(modTitle, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				content.addView(modTypeText, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modTypeText.getId());
				content.addView(modDescTitle, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modDescTitle.getId());
				content.addView(modDescText, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modDescText.getId());
				content.addView(modSettings, params);
				contentScroll.addView(content);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modTitle.getId());
				params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
				contentScroll.setFillViewport(true);
				dialogLayout.addView(contentScroll, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle(mod.name);
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener() {
					onDismiss: function () {
						showMenu();
					}
				});
				dialog.show();
				var window = dialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener() {
					onClick: function (view) {
						dialog.dismiss();
					}
				});
			} catch (e) {
				DragOP.ctoast("Error: " + e);
			}
		}
	});
}

DragOP.registerModule = function (mod) {

	DragOP.mods.push(mod);
	Utils.modsCount += 1;

}
var target = {
	name: DragOP.getLString("special.target"),
	desc: "Let you choose the type of entitys that are targetted by Modules like AimAura and BowAimBot.",
	type: ModuleType.special,
	getSettingsLayout: function(params){
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var players = new android.widget.CheckBox(ctx);
		players.setText("Players");
		players.setTypeface(Utils.font);
		players.setTextColor(android.graphics.Color.BLACK);
		players.setChecked(Utils.Entity.targettedMobs[1]);
		players.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.Entity.targettedMobs = [Utils.Entity.targettedMobs[0], v.isChecked()];
			}
		}));
		var mobs = new android.widget.CheckBox(ctx);
		mobs.setText("Mobs");
		mobs.setTextColor(android.graphics.Color.BLACK);
		mobs.setTypeface(Utils.font);
		mobs.setChecked(Utils.Entity.targettedMobs[0]);
		mobs.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.Entity.targettedMobs = [v.isChecked(), Utils.Entity.targettedMobs[1]];
			}
		}));
		settings.addView(players, params);
		settings.addView(mobs, params);
		return settings;
	},
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		DragOP.showModDialog(this);
		menu.dismiss();
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("special.target"));
	}
};

DragOP.registerModule(target);
var bypass = {
	name: DragOP.getLString("special.bypass"),
	desc: "Mods will bypass AntiCheats or disable them if they can't.",
	type: ModuleType.special,
	getSettingsLayout: function(params){
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var enabledGradient = new android.graphics.drawable.GradientDrawable();
		enabledGradient.setColor(android.graphics.Color.argb(150, 0, 200, 0));
		enabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		enabledGradient.setCornerRadius(dip2px(3));
		var disabledGradient = new android.graphics.drawable.GradientDrawable();
		disabledGradient.setColor(android.graphics.Color.argb(130, 200, 0,0));
		disabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		disabledGradient.setCornerRadius(dip2px(3));
		var lbsg = new android.widget.Button(ctx);
		lbsg.setText("LBSG Anti-Cheat");
		lbsg.setTypeface(Utils.font);
		lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG?enabledGradient:disabledGradient);
		lbsg.setTextColor(android.graphics.Color.BLACK);
		lbsg.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.bypassMode = BypassMode.LBSG;
				lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG?enabledGradient:disabledGradient);
				vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT?enabledGradient:disabledGradient);
			}
		}));
		var vanilla = new android.widget.Button(ctx);
		vanilla.setText("Vanilla");
		vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT?enabledGradient:disabledGradient);
		vanilla.setTextColor(android.graphics.Color.BLACK);
		vanilla.setTypeface(Utils.font);
		
		vanilla.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.bypassMode = BypassMode.DEFAULT;
				lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG?enabledGradient:disabledGradient);
				vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT?enabledGradient:disabledGradient);
			}
		}));
		settings.addView(vanilla, params);
		settings.addView(lbsg, params);
		return settings;
	},
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		DragOP.showModDialog(this);
		menu.dismiss();
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("special.bypass"));
	}
};
DragOP.registerModule(bypass);
var panic = {
	name: DragOP.getLString("special.panic"),
	desc: "Disables all mods at once!",
	type: ModuleType.mod,
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () { /*some tick*/ },
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		DragOP.mods.forEach(function (entry, index, array) {
			if (entry.isStateMode() && entry.state) entry.onClick(null);
		});
		refreshMenu();
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("special.panic"));
	}
};
DragOP.registerModule(panic);
var gmhack = {
	name: "Gamemode",
	desc: "Changes your gamemode!",
	type: ModuleType.mod,
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	extra: Level.getGameMode(),
	onTick: function () { /*some tick*/ },
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		if (this.extra == 1) this.extra = 0;
		else this.extra = 1;
		Level.setGameMode(this.extra);
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.gamemode") + ": " + (this.extra == 0 ? DragOP.getLString("gm.survival") : DragOP.getLString("gm.creative")));
	}
};
DragOP.registerModule(gmhack);

var aimaura = {
	name: DragOP.getLString("hacks.aimaura"),
	desc: "Automatically aims at near mobs!",
	type: ModuleType.mod,
	state: false,
	range: 7,
	getSettingsLayout: function(params){
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var rangeText = new android.widget.TextView(ctx);
		rangeText.setText("Range: "+this.range);
		rangeText.setTextColor(android.graphics.Color.BLACK);
		rangeText.setTextSize(dip2px(9));
		rangeText.setGravity(android.view.Gravity.CENTER);
		rangeText.setTypeface(Utils.font);
		var rangeSlider = Utils.ModSettings.getSlider();
		rangeSlider.setMax(20);
		//rangeSlider.setMin(1);
		rangeSlider.setProgress(this.range);
		rangeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener(){
		onProgressChanged:function (seekBar, progress, fromUser){
			
			rangeText.setText("Range: "+progress);
			
		},
		onStopTrackingTouch: function(seekbar){
			aimaura.range = seekbar.getProgress();
		}
});
		settings.addView(rangeSlider, params);
		settings.addView(rangeText, params);
		
		
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if (this.state) {
			var ent = Utils.Entity.getNearestEntity(this.range);
			if(ent!=null)Utils.Entity.crosshairAimAt(ent);
		}
	},
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.aimaura"));
	}
};
DragOP.registerModule(aimaura);
var bowaimbot = {
	name: DragOP.getLString("hacks.bowaimbot"),
	desc: "Automatically aims with a bow at near mobs!",
	type: ModuleType.mod,
	state: false,
	range: 100,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	getSettingsLayout: function(params){
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var rangeText = new android.widget.TextView(ctx);
		rangeText.setText("Range: "+this.range);
		rangeText.setTextColor(android.graphics.Color.BLACK);
		rangeText.setTextSize(dip2px(9));
		rangeText.setGravity(android.view.Gravity.CENTER);
		rangeText.setTypeface(Utils.font);
		var rangeSlider = Utils.ModSettings.getSlider();
		rangeSlider.setMax(100);
		//rangeSlider.setMin(1);
		rangeSlider.setProgress(this.range);
		rangeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener(){
		onProgressChanged:function (seekBar, progress, fromUser){
			
			rangeText.setText("Range: "+progress);
			
		},
		onStopTrackingTouch: function(seekbar){
			bowaimbot.range = seekbar.getProgress();
		}
});
		settings.addView(rangeSlider, params);
		settings.addView(rangeText, params);
		
		
		return settings;
	},
	onTick: function () {
		if (this.state && getCarriedItem() == 261 /*No Dynamic :( */ ) {
			var ent = Utils.Entity.getNearestEntity(this.range);
			
			if(ent != null)Utils.Entity.bowAimAt(ent);
			
		}
	},
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.bowaimbot"));
	}
};
DragOP.registerModule(bowaimbot);
var tpaura = {
	name: DragOP.getLString("hacks.tpaura"),
	desc: "Automatically teleports you around people so that they can\'t hit you.",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {

	},
	findPos: function (ent) {
		var Ppos = new Array(getPlayerX(), getPlayerY() + 0.5, getPlayerZ());
		var entPos = new Array(Entity.getX(ent), Entity.getY(ent), Entity.getZ(ent));
		var diff = new Array(entPos[0] - Ppos[0], null, entPos[2] - Ppos[2]);
		Ppos[0] += diff[0] * 1.6;
		Ppos[2] += diff[2] * 1.6;
		return Ppos;
		//just inverting pos at the moment
	},
	onAttack: function (att, vic) {
		if (att == Player.getEntity() && this.state && Entity.getHealth(vic) > 0) {

			var pos = this.findPos(vic);

			if (getTile(pos[0], pos[1], pos[2]) == 0 && getTile(pos[0], pos[1] - 1, pos[2]) == 0 && getTile(pos[0], pos[1] - 2, pos[2]) == 0) {
				Entity.setPosition(Player.getEntity(), pos[0], pos[1], pos[2]);
			}

			Utils.Entity.crosshairAimAt(vic, pos);
		}
	},
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.tpaura"));
	}
};
DragOP.registerModule(tpaura);
var clicktp = {
	name: DragOP.getLString("hacks.clicktp"),
	desc: "Teleports you to the place where you clicked",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onUseItem: function (x, y, z, itemid, blockid, side) {
		if (getTile(x, y + 1, z) == 0 && getTile(x, y + 2, z) == 0 && this.state) {
			Entity.setPosition(Player.getEntity(), x + 0.5, y + 2.63 /*1.62 = eye height of steve*/ , z + 0.5);
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.clicktp"));
	}
};
DragOP.registerModule(clicktp);
var speed = {
	name: DragOP.getLString("hacks.speed"),
	desc: "Standard: Standard speed without any modifications\n"+DragOP.getLString("hacks.jumpspeed")+": Jumps ~0.2 blocks high while walking\n"+DragOP.getLString("hacks.longjump")+": Jumps up to 6 blocks long while walking!",
	type: ModuleType.mod,
	state: false,
	extratick: 0,
	getSettingsLayout: function(params){
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var enabledGradient = new android.graphics.drawable.GradientDrawable();
		enabledGradient.setColor(android.graphics.Color.argb(150, 0, 200, 0));
		enabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		enabledGradient.setCornerRadius(dip2px(3));
		var disabledGradient = new android.graphics.drawable.GradientDrawable();
		disabledGradient.setColor(android.graphics.Color.argb(130, 200, 0,0));
		disabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		disabledGradient.setCornerRadius(dip2px(3));
		var defaultspeed = new android.widget.Button(ctx);
		defaultspeed.setText("Standard");
		defaultspeed.setTypeface(Utils.font);
		defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT?enabledGradient:disabledGradient);
		defaultspeed.setTextColor(android.graphics.Color.BLACK);
		defaultspeed.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.speedMode = SpeedMode.DEFAULT;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT?enabledGradient:disabledGradient);
				bhop.setBackground(Utils.speedMode == SpeedMode.BHOP?enabledGradient:disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP?enabledGradient:disabledGradient);
			}
		}));
		var bhop = new android.widget.Button(ctx);
		bhop.setText(DragOP.getLString("hacks.jumpspeed"));
		bhop.setBackground(Utils.speedMode == SpeedMode.BHOP?enabledGradient:disabledGradient);
		bhop.setTextColor(android.graphics.Color.BLACK);
		bhop.setTypeface(Utils.font);
		
		bhop.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.speedMode = SpeedMode.BHOP;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT?enabledGradient:disabledGradient);
				bhop.setBackground(Utils.speedMode == SpeedMode.BHOP?enabledGradient:disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP?enabledGradient:disabledGradient);
			}
		}));
		var bunny = new android.widget.Button(ctx);
		bunny.setText(DragOP.getLString("hacks.longjump"));
		bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP?enabledGradient:disabledGradient);
		bunny.setTextColor(android.graphics.Color.BLACK);
		bunny.setTypeface(Utils.font);
		
		bunny.setOnClickListener(new android.view.View.OnClickListener({
			onClick:function(v){
				Utils.speedMode = SpeedMode.LONGJUMP;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT?enabledGradient:disabledGradient);
				bhop.setBackground(Utils.speedMode == SpeedMode.BHOP?enabledGradient:disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP?enabledGradient:disabledGradient);
			}
		}));
		settings.addView(defaultspeed, params);
		settings.addView(bhop, params);
		settings.addView(bunny, params);
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if (this.state && Utils.Player.onGround()) {
			switch(Utils.speedMode){
				case SpeedMode.DEFAULT:
					var max = Utils.bypassMode == BypassMode.LBSG?0.35:0.6;
			var lastSpeed = Math.sqrt(Math.pow(Utils.Vel.lastX, 2) + Math.pow(Utils.Vel.lastZ, 2));
			var speed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
			 if(speed < 0.04){
				setVelX(getPlayerEnt(), 0);
				setVelZ(getPlayerEnt(), 0);
			}
			else if (speed >= lastSpeed-0.001 && speed < max && tick1 % 2 == 0) {
				setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * (1+max/2));
				setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * (1+max/2));
			} else if (speed < lastSpeed-0.0001) {
				setVelX(getPlayerEnt(), (getPlayerX() - Utils.Pos.lastX) / 1.5);
				setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.5);
				
			}else if(speed > max){
				setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt())/2);
				setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt())/2);
				//setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.1);
			}
					break;
				case SpeedMode.BHOP:
					var y = Entity.getY(getPlayerEnt());
					while (y > 1) y -= 1;
			if (y < 0) return;
			var max = Utils.bypassMode == BypassMode.LBSG?0.45:0.8;
			var lastSpeed = Math.sqrt(Math.pow(Utils.Vel.lastX, 2) + Math.pow(Utils.Vel.lastZ, 2));
			var speed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
			if (speed > 0.09) {
				if (Utils.Player.onGround()) setVelY(getPlayerEnt(), 0.2);
				else if (Math.round(y * 100) >= 70) setVelY(getPlayerEnt(), -0.15);

			} else if(speed < 0.04){
				setVelX(getPlayerEnt(), 0);
				setVelZ(getPlayerEnt(), 0);
			}
			 if(speed < 0.04){
				setVelX(getPlayerEnt(), 0);
				setVelZ(getPlayerEnt(), 0);
			}
			else if (speed >= lastSpeed-0.001 && speed < max && tick1 % 1 == 0) {
				setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * (1+max/2));
				setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * (1+max/2));
			} else if (speed < lastSpeed-0.0001) {
				setVelX(getPlayerEnt(), (getPlayerX() - Utils.Pos.lastX) / 1.5);
				setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.5);
				
			}else if(speed > max){
				setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt())/2);
				setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt())/2);
				//setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.1);
			}
					break;
				case SpeedMode.LONGJUMP:
					this.extratick++;
			if (this.extratick > 7) this.extratick = 0;
			if (Utils.Vel.calculateSpeed() > 0.105 && this.extratick == 0) {
				var vector = new Array();
				var yaw = (getYaw(getPlayerEnt()) + 90) * (Math.PI / 180);
				var pitch = 0;
				vector[0] = Math.cos(yaw) * Math.cos(pitch);
				vector[2] = Math.sin(yaw) * Math.cos(pitch);
				if(Utils.bypassMode == BypassMode.LBSG){
					vector[0] = vector[0]/2.5;
					vector[2] = vector[2]/2.5;
				}
				Entity.setVelX(getPlayerEnt(), vector[0]);
				Entity.setVelY(getPlayerEnt(), Utils.bypassMode == BypassMode.LBSG?0.425:0.5);
				Entity.setVelZ(getPlayerEnt(), vector[2]);
			} else if (this.extratick == 0 && Utils.Vel.calculateSpeed() < 0.106) {
				Entity.setVelX(getPlayerEnt(), 0);
				Entity.setVelZ(getPlayerEnt(), 0);
			}
					break;
			}
			
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.speed"));
	}
};
DragOP.registerModule(speed);
var flight = {
	name: DragOP.getLString("hacks.flight"),
	desc: "Makes you fly.",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if (this.state)
			Player.setFlying(1);
		
	},
	onClick: function (btn) {
		this.state = !this.state;
		Player.setFlying(this.state?1:0);
		Player.setCanFly(this.state?1:Level.getGameMode());
	},
	onRefresh: function (btn) {
		if (btn != null)
			btn.setText(DragOP.getLString("hacks.flight"));
	}
};
DragOP.registerModule(flight);
var step = {
	name: DragOP.getLString("hacks.step"),
	desc: "Steps on full blocks like you will on a half slap",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	
	onTick: function () { 
		if(this.state && Utils.Player.isCollidedHorizontally()){
			Entity.setPositionRelative(getPlayerEnt(), 0, 1.6, 0);
		}
	},
	onClick: function (btn) {this.state=!this.state;},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.step"));
	}
};
DragOP.registerModule(step);

var jesus = {
	name: DragOP.getLString("hacks.jesus"),
	desc: "Jesus used this hack 2000 years ago",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state ){
			if((getTile(getPlayerX(), getPlayerY()-0.8, getPlayerZ()-1)>=8 && getTile(getPlayerX(), getPlayerY()-0.8, getPlayerZ()-1)<=11)){
				setVelY(getPlayerEnt(), 0.2);
			}else if((getTile(getPlayerX(), getPlayerY()-1.3, getPlayerZ()-1)>=8 && getTile(getPlayerX(), getPlayerY()-1.3, getPlayerZ()-1)<=11)){
				setVelY(getPlayerEnt(), 0.05);
			}else if((getTile(getPlayerX(), getPlayerY()-1.68, getPlayerZ()-1)>=8 && getTile(getPlayerX(), getPlayerY()-1.68, getPlayerZ()-1)<=11)){
				setVelY(getPlayerEnt(), 0.015);
			}
		}
	},
	onClick: function (btn) {this.state=!this.state;},
	onRefresh: function (btn) {
		if(btn!=null)
			btn.setText(DragOP.getLString("hacks.jesus"));
	}
};
DragOP.registerModule(jesus);
var nodownglide = {
	name: DragOP.getLString("hacks.nodownglide"),
	desc: "Not letting you to move on y-axis (upwards & downwards)",
	type: ModuleType.mod,
	state: false,
	startY: -1,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state){
			setVelY(getPlayerEnt(), -0.000000000001);
			Entity.setPositionRelative(getPlayerEnt(), 0, this.startY-getPlayerY(), 0);
		}
	},
	onClick: function (btn) {this.startY = getPlayerY();this.state=!this.state;},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.nodownglide"));
	}
};
DragOP.registerModule(nodownglide);
var glide = {
	name: DragOP.getLString("hacks.glide"),
	desc: "Let you glide through the air. Sometimes good to bypass anti cheats",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state && Entity.getVelY(getPlayerEnt()) < 0&& !Player.isFlying()){
			switch(Utils.bypassMode){
				case BypassMode.DEFAULT:
				    setVelY(getPlayerEnt(), -0.001);
					break;
				case BypassMode.LBSG:
					if(tick1 % 2 == 0)
						setVelY(getPlayerEnt(), -0.01);
					break;
			}
			
		}
	},
	onClick: function (btn) {this.state = !this.state;},
	onRefresh: function (btn) {
		if(btn!=null)
			btn.setText(DragOP.getLString("hacks.glide"));
	}
};
DragOP.registerModule(glide);
/*
var statehack = {
	name: "Hack",
	desc: "Some Desc",
	type: ModuleType.mod,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () { },
	onClick: function (btn) {},
	onRefresh: function (btn) {}
};
	*/




//Menu open Button
var menuBtn;
var moving = false;
var dx = 0;
var dy = 0;
var mPosX = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 16 * 5;
//Main Menu
var mwidth = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 100 * 70;
var menu;

var styledBtn = function () {
	var defaultBtn = new android.widget.Button(ctx);
	defaultBtn.setBackgroundDrawable(DragOP.getStyledBackground());
	return defaultBtn;
}

var modBtn = function (mod) {
	var btn = new android.widget.Button(ctx);
	btn.setTransformationMethod(null);
	btn.setBackground(null);
	btn.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.BLACK);
	btn.setTextColor(android.graphics.Color.WHITE);
	btn.setTypeface(Utils.font);
	btn.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			mod.onClick(btn);
			mod.onRefresh(btn);
			if (mod.isStateMode()) modButtonLayout.setBackground(DragOP.getStyledBtnBackground(mod.state, true));
			else modButtonLayout.setBackground(DragOP.getStyledBtnBackground(false, false));

		}
	}));

	var btn1 = new android.widget.Button(ctx);
	btn1.setTransformationMethod(null);
	var txt = eval("new String(\"\\" + "ud83d" + "\\" + "udd3b\")");
	btn1.setText(txt + "");
	//btn1.setBackground(null);
	btn1.setBackgroundColor(android.graphics.Color.argb(100, 0, 0, 0));
	btn1.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			DragOP.showModDialog(mod);
			menu.dismiss();

			//Show a screen or a dialog with the mod's info and settings
		}
	}));

	var modButtonLayout = new LinearLayout(ctx);
	modButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
	if (mod.isStateMode()) modButtonLayout.setBackground(DragOP.getStyledBtnBackground(mod.state, true));
	else modButtonLayout.setBackground(DragOP.getStyledBtnBackground(false, false));

	var modButtonLayoutLeft = new LinearLayout(ctx);
	modButtonLayoutLeft.setOrientation(1);
	modButtonLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutLeft);

	var modButtonLayoutRight = new LinearLayout(ctx);
	modButtonLayoutRight.setOrientation(1);
	modButtonLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2 - mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutRight);

	modButtonLayoutLeft.addView(btn);
	modButtonLayoutRight.addView(btn1);

	mod.onRefresh(btn);
	//btn.setLayoutParams(new android.widget.TableLayout.LayoutParams(mwidth/2, android.widget.TableLayout.LayoutParams.WRAP_CONTENT, 1));
	return modButtonLayout;
};

function dip2px(dips) {
	var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	return Math.ceil(dips * ctx.getResources()
		.getDisplayMetrics()
		.density);
}
DragOP.generateMenu = function (keyword) {
	var lay = new android.widget.TableLayout(ctx);
	var currow;
	DragOP.mods.forEach(function (entry, index, array) {
		if ((entry.name.toString()
				.toLowerCase()
				.indexOf(keyword.toString()
					.toLowerCase())) > -1 || (keyword == null || keyword == "" || keyword == undefined)) {
			if (index % 2 == 1) {
				if (!currow) currow = new android.widget.TableRow(ctx);
				currow.addView(new modBtn(DragOP.mods[index]));
				lay.addView(currow);
				currow = null;

			} else {
				currow = new android.widget.TableRow(ctx);
				currow.addView(new modBtn(DragOP.mods[index]));

			}
		} else {

		}
	});
	if (currow != null) lay.addView(currow);
	var sc = new android.widget.ScrollView(ctx);
	sc.addView(lay);
	return sc;
}

function showMenu() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {

				var sbar = new android.widget.LinearLayout(ctx);

				var bg = android.graphics.drawable.GradientDrawable();
				bg.setColor(android.graphics.Color.argb(100, 255, 255, 255));
				bg.setStroke(dip2px(2), android.graphics.Color.BLACK);
				bg.setCornerRadius(1);

				sbar.setBackgroundDrawable(bg);
				search = new android.widget.EditText(ctx);
				search.setBackgroundColor(android.graphics.Color.TRANSPARENT);
				search.setHint("Search a mod");
				search.setTypeface(Utils.font);
				search.setHintTextColor(android.graphics.Color.argb(240, 80, 80, 80));
				search.setTextColor(android.graphics.Color.BLACK);
				search.setGravity(android.view.Gravity.CENTER);
				search.addTextChangedListener(new android.text.TextWatcher() {
					afterTextChanged: function (text) {
						updateMenu(text, toplayout);
						searchQ = text;
					}
				});
				sbar.addView(search, new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
				sbar.setId(39472);
				mlist = new android.widget.LinearLayout(ctx);
				//mlist.setGravity(android.view.Gravity.TOP);
				mlist.setId(20372);
				mlist.addView(DragOP.generateMenu(search.getText() + ""));
				var lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				//lparam.addRule(android.widget.RelativeLayout.BELOW, toplayout.getChildAt(0).getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				//lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				var toplayout = new android.widget.RelativeLayout(ctx);
				toplayout.addView(sbar, lparam);
				lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				lparam.addRule(android.widget.RelativeLayout.BELOW, toplayout.getChildAt(0)
					.getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				//lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				mlist.setLayoutParams(lparam);
				toplayout.addView(mlist);
				//toplayout.setBackground(null);
				toplayout.setGravity(android.view.Gravity.CENTER);
				toplayout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						menu.dismiss();
						showMenuBtn();
						searchQ = "";
					}
				}));
				menu = new android.widget.PopupWindow(toplayout, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, true);
				menu.setAnimationStyle(android.R.style.Animation_Dialog);
				//menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				//menu.setSoftInputMode(android.view.WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
				menu.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.CENTER, 0, 0 /*ctx.getWindowManager().getDefaultDisplay().getHeight()*/ );
				//search.requestFocus();
				//lol
			} catch (e) {
				DragOP.ctoast(e);
			}
		}
	}));
}

function refreshMenu() {
	if (mlist != null) {
		mlist.removeAllViewsInLayout();
		mlist.addView(DragOP.generateMenu(search.getText() + ""));
	}
}

function updateMenu(keyword, toplayout) {
	Utils.currentSearchCount += 1;
	if (Utils.currentSearchCount > 999) Utils.currentSearchCount = 0;
	var myNum = Utils.currentSearchCount;
	var r = new java.lang.Runnable({
		run: function () {
			var newList = DragOP.generateMenu(keyword);
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					try {
						if (myNum == Utils.currentSearchCount) {
							var mlist = toplayout.getChildAt(1);
							var lparam = mlist.getLayoutParams();
							while (mlist.getChildCount() > 0) mlist.removeView(mlist.getChildAt(0));
							mlist.addView(newList);
						}
					} catch (e) {
						DragOP.ctoast(e);
					}
				}
			}));
		}
	});
	var t = new java.lang.Thread(r);
	t.start();

}

function showMenuBtn() {

	menuBtn = new android.widget.Button(ctx);
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				if (GUI != null && GUI.isShowing()) GUI.dismiss();
				/*if(ghost) {
					menuBtn.setText('');
					menuBtn.setBackgroundColor(android.graphics.Color.parseColor("#01ffff00"));
				} else {
					menuBtn.setText('D');
					menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));
				}
				*/
				menuBtn.setText('D');
				menuBtn.setTypeface(Utils.font);
				//menuBtn.setBackgroundDrawable(new android.graphics.drawable.BitmapDrawable(bg));
				menuBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						//mainMenu();
						//windowMenu();
						/*exit();*/
						showMenu();
						GUI.dismiss();
						GUI = null;
					}
				}));
				menuBtn.setOnTouchListener(new android.view.View.OnTouchListener() {
					onTouch: function (view, motionEvent) {
						try {
							if (!moving) return false;
							switch (motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx = mPosX - motionEvent.getRawX();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX = (motionEvent.getRawX() + dx);
								GUI.update(mPosX, 0, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving = false;
								break;
							}
						} catch (e) {
							DragOP.ctoast("Error: " + e);
						}

						return true;
					}
				});
				menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener() {
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						/*gad();
						configd1();
						advsetd();*/
						moving = true;
						return true;
					}
				});
				menuBtn.getBackground()
					.setAlpha(200);

				GUI = new android.widget.PopupWindow(menuBtn, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				GUI.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 5, 0);
			} catch (err) {
				DragOP.ctoast(err);
			}
		}
	}));
}
showMenuBtn();

function rptask() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler()
				.postDelayed(new java.lang.Runnable({
					run: function () {

						nx = getPlayerX();
						ny = getPlayerY();
						nz = getPlayerZ();
						DragOP.mods.forEach(function (entry, index, array) {
							try{
								if (entry.onTick) entry.onTick();
							}catch(e){}
							
						});
						if ((GUI != null && GUI.isShowing()) && (menu != null && menu.isShowing())) GUI.dismiss();
						if ((GUI == null || !GUI.isShowing()) && (menu == null || !menu.isShowing()) && (dialog == null || !dialog.isShowing())) {
							try {
								net.zhuoweizhang.mcpelauncher.ScriptManager.isRemote = true;
								net.zhuoweizhang.mcpelauncher.ScriptManager.setLevelFakeCallback(true, false);
							} catch (e) {
								//toolbox....
							}
							showMenuBtn();
						}
						//did you know thats its eval(java.lang.String) and not eval(null)?
						if (Player.getEntity() != -1) {
							Utils.Vel.lastX = Entity.getVelX(Player.getEntity());
							Utils.Vel.lastY = Entity.getVelY(Player.getEntity());
							Utils.Vel.lastZ = Entity.getVelZ(Player.getEntity());
						}
						Utils.Pos.lastX = getPlayerX();
						Utils.Pos.lastY = getPlayerY();
						Utils.Pos.lastZ = getPlayerZ();

						tick1++;
						if (tick1 > 50) tick1 = 0;
						rptask();
					}
				}), 15);
		}
	}))
}

rptask();
DragOP.loadModsAnim(0);

DragOP.commandManager = function (cmd) {
	var commandSplit = cmd.split(" ");
	switch (commandSplit[0]) {
	case "help":
		clientMessage("[DragOP] Help command is coming soon!");
		break;
	case "t":
		if (cmd.substring(2, cmd.length) != null && cmd.substring(2, cmd.length) != undefined) {
			var shouldReturn = false;
			DragOP.mods.forEach(function (entry, index, array) {
				if (entry.name.toLowerCase() == cmd.substring(2, cmd.length)
					.toLowerCase() && !shouldReturn) {
					if (entry.isStateMode()) {
						DragOP.mods[index].state = !DragOP.mods[index].state;
						DragOP.mods[index].onRefresh(null);
						DragOP.ctoast("Sucessfully toggled module " + entry.name);
					} else if (entry.isToggleAble()) {
						DragOP.mods[index].onClick(null);
						DragOP.mods[index].onRefresh(null);
						DragOP.ctoast("Sucessfully toggled module " + entry.name);
					} else {
						DragOP.ctoast(entry.name + "can't be toggled!");
					}
					shouldReturn = true;
				}
			});
			if (shouldReturn) return;
			DragOP.ctoast("Module " + cmd.substring(2, cmd.length) + " can't be found/toggled!");
		} else {
			DragOP.ctoast("Syntax error!");
		}
		break;
	}
}

function chatHook(text) {
	if (text.charAt(0) == ".") {
		preventDefault();
		try {
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
				.nativeSetTextboxText("");
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
				.updateTextboxText("");
		} catch (e) {
			//Not-BlockLauncher-Error
		}
		DragOP.commandManager(text.substring(1, text.length));
	}
}
this.Item.getEnchantType = function (id) {
	if (id == 340) return 0;
	if (Item.getUseAnimation(id) == UseAnimation.bow) return 1;
	if (id == 258 || id == 271 || id == 275 || id == 279 || id == 286) return 2;
	if (id == 290 || id == 291 || id == 292 || id == 293 || id == 294) return 2;
	if (id == 257 || id == 270 || id == 274 || id == 278 || id == 285) return 2;
	if (id == 256 || id == 269 || id == 273 || id == 277 || id == 284) return 2;
	if (id == 359 || id == 259) return 2;
	if (id == 267 || id == 268 || id == 272 || id == 276 || id == 283) return 3;
	if (id >= 298 && id <= 317) return 4;
	if (id == 346) return 5;
};

function attackHook(att, vic) {
	DragOP.mods.forEach(function (entry, index, array) {
		try{
			entry.onAttack(att, vic);
		}catch(e){}
		
	});
}

function useItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage) {
	DragOP.mods.forEach(function (entry, index, array) {
		try{
			entry.onUseItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage);
		}catch(e){}
		
	});
}
function leaveGame(){
	Utils.Entity.allEntitys = new Array();
}
function entityAddedHook(ent){
	Utils.Entity.allEntitys.push(ent);
	//clientMessage("Entity added count:"+Utils.Entity.allEntitys.length);
}
function entityRemovedHook(ent){
	
	Utils.Entity.allEntitys.forEach(function(entry, index, array){
		if(entry == ent)Utils.Entity.allEntitys.splice(index, 1);
	});
}
