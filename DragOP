/*
 * Â© 2016 - brought to you by the DragOP team: Godsoft029 and peacestorm.
 */
var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var LinearLayout = android.widget.LinearLayout;
var GUI;
var dialog;
var aboard;
var searchQ = ""; //Current search query
var tick1 = 0;
var search;
var Launcher = {
	isBlockLauncher: function () {
		return(ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher" || ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher.pro");
	},
	isToolbox: function () {
		return ctx.getPackageName() == "io.mrarm.mctoolbox";
	}
};

var DragOP = {
	mods: new Array(),
	commands: new Array(),
	isDev: true,
	inGame: false,
	lightMode: false,
	ghostMode: false,
	enableOpenGL: true,
	enableFastEat: true,
	enableTimings: true
};

var sharedPref = ctx.getPreferences(ctx.MODE_PRIVATE);
var editor = sharedPref.edit();

DragOP.metersScrolled = 0;

DragOP.finishedScroll = false;
DragOP.finishedBreak = false;

(DragOP.initEggs = function () {
	DragOP.metersScrolled = sharedPref.getInt("DragOP.egg.metersScrolled", 0);
	DragOP.finishedScroll = sharedPref.getBoolean("DragOP.egg.finishedScroll", false);
	DragOP.finishedBreak = sharedPref.getBoolean("DragOP.egg.finishedBreak", false);
})();

function dip2px(dips) {
	let ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	return Math.ceil(dips * ctx.getResources()
		.getDisplayMetrics()
		.density);
}
var enabledGradient = new android.graphics.drawable.GradientDrawable();
		enabledGradient.setColor(android.graphics.Color.argb(150, 0, 200, 0));
		enabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		enabledGradient.setCornerRadius(dip2px(3));
var disabledGradient = new android.graphics.drawable.GradientDrawable();
		disabledGradient.setColor(android.graphics.Color.argb(130, 200, 0, 0));
		disabledGradient.setStroke(dip2px(3), android.graphics.Color.BLACK);
		disabledGradient.setCornerRadius(dip2px(3));
var Settings = {
	settings: new org.json.JSONObject(),
	resetConfig: function () {
		this.settings = new org.json.JSONObject();
		this.setString("menu", "Navigator"); //Navigator, Basic, Cater (Comming soon)

		this.setBoolean("enable_commands", true);
		this.setString("command_prefix", ".");
		this.saveToFile();
	},
	loadFromFile: function () {
		try {
			let file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP/", "config.dat");
			let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
			let data = new java.lang.StringBuilder();
			let string;
			while((string = readed.readLine()) != null) {
				data.append(string);

			}
			try {
				this.settings = new org.json.JSONObject(data.toString());
			} catch(e) {
				DragOP.ctoast("Config data corrupt. Resetting your config(" + e);
				this.resetConfig();
			}
		} catch(e) {
			//Seems like theres no file

			this.resetConfig();
		}
	},
	saveToFile: function () {
		let dir = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP");
		if(!dir.exists()) dir.mkdir();
		let file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP/", "config.dat");
		if(!file.exists()) file.createNewFile();
		let stream = new java.io.FileOutputStream(file);
		try {
			stream.write(this.settings.toString().getBytes());
		} finally {
			stream.close();
		}
	},
	init: function () {
		this.loadFromFile();
	},
	getBoolean: function (key, _default) {
		return this.settings.optBoolean(key, _default == null ? false : _default);
	},
	setBoolean: function (key, value) {
		this.settings.put(key, value.toString());
		this.saveToFile();
	},
	getString: function (key, _default) {
		return this.settings.optString(key, _default == null ? "" : _default);
	},
	setString: function (key, value) {
		this.settings.put(key, value.toString());
		this.saveToFile();
	}
};
Settings.init();

var Timings = {
	processing: new org.json.JSONObject(),
	timingData: new org.json.JSONObject(),
	startTiming: function(funcName){
		this.processing.put(funcName, java.lang.System.currentTimeMillis());
	},
	stopTiming: function(funcName){
		this.timingData.put(funcName,java.lang.System.currentTimeMillis() - this.processing.optLong(funcName, -1));
	},
	getTimingData: function(){
		return this.timingData;
	},
	resetTiming: function(funcName){
		this.timingData.put(funcName, 0);
	}
};
var CommandManager = {
	cmdModules: new Array(),
	cmdNames: new Array(),
	cmdBlacklist: ["login", "log", "legit", "register", "reg"],
	onCommand: function (cmd) {
		cmd = cmd.split(" ");
		let command = cmd.shift().toLowerCase();
		let args = cmd;
		let module = null;
		let found = false;
		this.cmdNames.forEach(function (entry, index) {
			if(found == false) {
				entry.forEach(function (entry2) {
					if(entry2.toLowerCase() == command) {
						found = true;
						module = CommandManager.cmdModules[index];
					}
				});
			}
		});
		if(module != null)
			module.onCall(args);
		else
			DragOP.cmsg("Command \"" + command + "\" not found");
	},
	isBlacklisted: function (cmd) {
		cmd = cmd.split(" ").shift().toLowerCase();
		this.cmdBlacklist.forEach(function (entry) {
			if(entry.equals(cmd))
				return true;
		});
		return false;
	},
	registerCommand: function (module) {
		this.cmdModules.push(module);
		this.cmdNames.push(module.alias);
	}
};

var FriendManager = {
	all: new org.json.JSONArray(),
	isFriend: function (name) {
		let is = false;
		if(name == null) return false;
		let cname = Utils.Text.clean(name.toString().toLowerCase());

		for(let i = 0; i < this.all.length(); i++) {
			if(cname.toString().toLowerCase() == this.all.getString(i).toLowerCase()) is = true;
		}
		return is;
	},
	loadFromFile: function () {
		try {
			let file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP/", "friends.dat");
			let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
			let data = new java.lang.StringBuilder();
			let string;
			while((string = readed.readLine()) != null) {
				data.append(string);

			}
			try {
				this.all = new org.json.JSONArray(data.toString());
			} catch(e) {
				DragOP.ctoast("Friend data corrupt. Deleting your friend list(" + e);
			}
		} catch(e) {
			//Seems like theres no file
		}
	},
	saveToFile: function () {
		let dir = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP");
		if(!dir.exists()) dir.mkdir();
		let file = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/DragOP/", "friends.dat");
		if(!file.exists()) file.createNewFile();
		let stream = new java.io.FileOutputStream(file);
		try {
			stream.write(this.all.toString().getBytes());
		} finally {
			stream.close();
		}
	},
	addFriend: function (name) {
		this.all.put(name);
		this.saveToFile();
	},
	removeFriend: function (name) {
		let tempall = new org.json.JSONArray();
		for(let i = 0; i < this.all.length(); i++) {
			if(this.all.getString(i).toLowerCase() != name.toString().toLowerCase()) tempall.put(this.all.getString(i));
		}
		this.all = tempall;
		this.saveToFile();
	}
};
FriendManager.loadFromFile();
var lc = {
	en_US: 1,
	de_DE: 2
};
var ModuleType = {
	mod: 1,
	special: 2,
	command: 3,
	cmd: 3,
	toName: function (type) {
		switch(type) {
		case ModuleType.mod:
			return DragOP.getLString("moduletype.mod");
			break;
		case ModuleType.special:
			return DragOP.getLString("moduletype.special");
			break;
		case ModuleType.command:
			return DragOP.getLString("moduletype.command");
			break;
		default:
			return "unknown";
		}
	}
};
var ModCategory = {
	MOVEMENT: 1,
	COMBAT: 2,
	RENDER: 3,
	MISC: 4,
	PLAYER: 5,
	SPECIAL: 6
};
var l = new Array();
l.push(new Array()); //Codes
l.push(new Array()); //English
l.push(new Array()); //German
//Multi Language Support
var BypassMode = {
	VANILLA: 0,
	DEFAULT: 0,
	LBSG: 1,
	FACILITY: 2
};
var SpeedMode = {
	DEFAULT: 0,
	LONGJUMP: 1
};
var getStyledBtnBackground = function (state, toggleable) {
	let bg = android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(1);
	bg.setColor(android.graphics.Color.argb(80, 0, 0, 0));
	if(state) bg.setColor(android.graphics.Color.argb(210, 0, 200, 0));
	if(toggleable == false) bg.setColor(android.graphics.Color.argb(210, 230, 150, 30));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(230, 0, 0, 0));
};
var Themes = {
	DEFAULT: {
		font: android.os.Build.VERSION.SDK_INT >= 17 ? android.graphics.Typeface.create("sans-serif-light", android.graphics.Typeface.NORMAL) : android.graphics.Typeface.DEFAULT,
		ModButton: {
			Neutral: {
				textColor: android.graphics.Color.WHITE,
				background: getStyledBtnBackground(false, false)
			},
			Activated: {
				textColor: android.graphics.Color.WHITE,
				background: getStyledBtnBackground(true, true)
			},
			Deactivated: {
				textColor: android.graphics.Color.WHITE,
				background: getStyledBtnBackground(false, true)
			}
		}

	}
};

DragOP.cmsg = function (text) {
	clientMessage(ChatColor.GREEN + "[" + ChatColor.BLUE + "Drag" + ChatColor.GOLD + "OP" + ChatColor.GREEN + "]" + ChatColor.GRAY + ": " + ChatColor.YELLOW + text);
}
DragOP.ctoast = function (text, showPrefix, iconName) {
	try {
		let ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				let thetoast = android.widget.Toast.makeText(com.mojang.minecraftpe.MainActivity.currentMainActivity.get(), "" + text, android.widget.Toast.LENGTH_LONG);
				let layout = new android.widget.LinearLayout(ctx);
				let icon = new android.widget.ImageView(ctx);
				let msg = new android.widget.TextView(ctx);
				if(showPrefix || showPrefix == null) text = "DragOP: " + text;
				try {
					if(iconName != null) {
						icon.setImageResource(iconName);
						layout.addView(icon);
					}
				} catch(e) {

				}
				msg.setText(text);
				msg.setGravity(android.view.Gravity.CENTER);
				msg.setTextSize(16);
				msg.setPadding(10, 10, 10, 10);
				msg.setTextColor(android.graphics.Color.WHITE);
				let bg = new android.graphics.drawable.GradientDrawable();
				bg.setColor(android.graphics.Color.argb(150, 50, 50, 50));
				bg.setStroke(dip2px(3), android.graphics.Color.argb(200, 5, 5, 5));
				bg.setCornerRadius(dip2px(20));
				layout.addView(msg);
				layout.setBackground(bg);
				layout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						thetoast.cancel();
					}
				}));
				thetoast.setView(layout);
				thetoast.show();
			}
		}));
	} catch(e) {
		print(e);
	}
}


var Utils = {
	bypassMode: BypassMode.DEFAULT,
	speedMode: SpeedMode.DEFAULT,
	online: false,
	flyTick: 0,
	modsCount: 0,
	currentSearchCount: 0,
	font: android.os.Build.VERSION.SDK_INT >= 17 ? android.graphics.Typeface.create("sans-serif-light", android.graphics.Typeface.NORMAL) : android.graphics.Typeface.DEFAULT,
	Render: {
		getFloatBuffer: function (fArray) {
			let bBuffer = java.nio.ByteBuffer.allocateDirect(fArray.length * 4);
			bBuffer.order(java.nio.ByteOrder.nativeOrder());

			let fBuffer = bBuffer.asFloatBuffer();
			fBuffer.put(fArray);
			fBuffer.position(0);
			return fBuffer;
		},
		getShortBuffer: function (sArray) {
			let bBuffer = java.nio.ByteBuffer.allocateDirect(sArray.length * 2);
			bBuffer.order(java.nio.ByteOrder.nativeOrder());

			let sBuffer = bBuffer.asShortBuffer();
			sBuffer.put(sArray);
			sBuffer.position(0);
			return sBuffer;
		},
		renderer: null,
		glSurface: null,
		fov: 90,
		initted: false,
		init: function () {
			if(!DragOP.enableOpenGL)
				return;
			let options = Utils.File.getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/", "options.txt"));

			options = options.split("\n");
			options.forEach(function (entry) {
				let suboption = entry.split(":");
				if(suboption[0] == "gfx_field_of_view") {
					Utils.Render.fov = suboption[1];

				}
			});
			this.renderer = new android.opengl.GLSurfaceView.Renderer({
				onSurfaceCreated: function (gl, config) {
					let GL10 = javax.microedition.khronos.opengles.GL10;
					gl.glClearColor(0, 0, 0, 0);
					gl.glShadeModel(GL10.GL_SMOOTH);
					gl.glClearDepthf(1.0);
					gl.glDisable (GL10.GL_DITHER);
					gl.glEnable(GL10.GL_DEPTH_TEST);
					gl.glDepthFunc(GL10.GL_LEQUAL);
					gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
				},
				onSurfaceChanged: function (gl, width, height) {
					let GL10 = javax.microedition.khronos.opengles.GL10;
					gl.glMatrixMode(GL10.GL_PROJECTION);
					gl.glLoadIdentity();
					android.opengl.GLU.gluPerspective(gl, Utils.Render.fov, width / height, 0.1, 100);
					gl.glMatrixMode(GL10.GL_MODELVIEW);
					gl.glLoadIdentity();
				},
				onDrawFrame: function (gl) {
					Timings.startTiming("gl_clear");
					let GL10 = javax.microedition.khronos.opengles.GL10;
					gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
					gl.glLoadIdentity();
					Timings.stopTiming("gl_clear");
					if(playerEsp.state || chesttracers.state || tracers.state || teleport.state) {
						try {
							Timings.startTiming("gl_lookAt");
							gl.glDisable(GL10.GL_LIGHTING);
							let yaw = getYaw() % 360;
							let pitch = getPitch() % 360;
							let eyeX = getPlayerX();
							let eyeY = getPlayerY() + 1;
							let eyeZ = getPlayerZ();

							let dCenterX = Math.sin(yaw / 180 * Math.PI);
							let dCenterZ = Math.cos(yaw / 180 * Math.PI);
							let dCenterY = Math.sqrt(dCenterX * dCenterX + dCenterZ * dCenterZ) * Math.tan((pitch - 180) / 180 * Math.PI);

							let centerX = eyeX - dCenterX;
							let centerZ = eyeZ + dCenterZ;
							let centerY = eyeY - dCenterY;

							android.opengl.GLU.gluLookAt(gl, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, 0, 1.0, 0);
							
							Timings.stopTiming("gl_lookAt");
							Timings.startTiming("gl_onRender");
							DragOP.mods.forEach(function (entry, index, array) {
								try {
									if((!entry.isStateMode() || entry.state) && entry.hasOwnProperty("onRender"))
										entry.onRender(gl);
								} catch(e) {}
							});
							Timings.stopTiming("gl_onRender");
						} catch(e) {
							DragOP.ctoast("RenderProblem: " + e);
						}

					}else{
						Timings.resetTiming("gl_lookAt");
						Timings.resetTiming("gl_onRender");
					}
				}
			});
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					Utils.Render.glSurface = new android.opengl.GLSurfaceView(ctx);
					Utils.Render.glSurface.setZOrderOnTop(true);


					Utils.Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
					Utils.Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
					Utils.Render.glSurface.setRenderer(Utils.Render.renderer);
					Utils.Render.glSurface.setRenderMode(0);

					ctx.getWindow().getDecorView().addView(Utils.Render.glSurface);

					Utils.Render.initted = true;
				}
			}));

		},
		drawBox: function (gl, x, y, z, xsize, ysize, zsize) {
			if(!DragOP.enableOpenGL)
				return;
			let GL10 = javax.microedition.khronos.opengles.GL10;
			let size = new Array(xsize, ysize, zsize);
			let vertices = [
				0, 0, 0,
				size[0], 0, 0,
				0, 0, size[2],
				size[0], 0, size[2],

				0, size[1], 0,
				size[0], size[1], 0,
				0, size[1], size[2],
				size[0], size[1], size[2]
			];
			let vertexBuffer = Utils.Render.getFloatBuffer(vertices);
			let indices = [
				0, 1,
				0, 2,
				0, 4,

				3, 1,
				3, 2,
				3, 7,

				5, 4,
				5, 7,
				5, 1,

				6, 4,
				6, 7,
				6, 2
			];
			let indexBuffer = Utils.Render.getShortBuffer(indices);
			gl.glTranslatef(x, y, z);
			gl.glFrontFace(GL10.GL_CCW);
			gl.glEnable(GL10.GL_BLEND);
			//gl.glEnable(GL10.GL_LINE_SMOOTH);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(4);
			gl.glColor4f(0.0, 1.0, 0.0, 0.4);
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
			gl.glDisable(GL10.GL_LINE_SMOOTH);
			gl.glTranslatef(-x, -y, -z);
		},
		drawLine: function (gl, x, y, z, x2, y2, z2) {
			if(!DragOP.enableOpenGL)
				return;
			let GL10 = javax.microedition.khronos.opengles.GL10;
			let size = new Array(x2, y2, z2);
			let vertices = [
				0, 0, 0,
				x2 - x, y2 - y, z2 - z
			];
			let vertexBuffer = Utils.Render.getFloatBuffer(vertices);
			let indices = [
				0, 1
			];
			let indexBuffer = Utils.Render.getShortBuffer(indices);
			gl.glTranslatef(x, y, z);
			gl.glEnable(GL10.GL_BLEND);
			gl.glDepthMask(false);
			//gl.glEnable(GL10.GL_LINE_SMOOTH);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(4);
			gl.glColor4f(0.0, 1.0, 0.0, 0.4);
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
			gl.glTranslatef(-x, -y, -z);
			gl.glDepthMask(true);
			gl.glDisable(GL10.GL_LINE_SMOOTH);
		}
	},
	Theme: {
		current: Themes.DEFAULT
	},
	Screen: {
		currentScreen: "",
		INGAME: "hud_screen"
	},
	Url: {
		getUrlContents: function (url, result) {
			let t = new java.lang.Thread(new java.lang.Runnable({
				run: function () {
					try {
						let u = new java.net.URL(url);
						let allCont = new java.lang.StringBuilder();
						let con = u.openConnection();
						con.setIfModifiedSince(0);
						con.setRequestProperty("User-Agent", "Mozilla/5.0");
						con.setRequestProperty("Accept-Encoding", "UTF-8");
						let reader = new java.io.BufferedReader(new java.io.InputStreamReader(con.getInputStream(), "UTF-8"));
						let line = "";
						while((line = reader.readLine()) != null)
							allCont.append(line + "\n");
						reader.close();
						result(allCont.toString(), null);
					} catch(e) {
						DragOP.ctoast(e);
						result(null, e);
					}
				}
			}));
			t.start();
		}
	},
	File: {
		dragopDir: android.os.Environment.getExternalStorageDirectory() + "/DragOP/",
		getTextFromFile: function (file) {

			let readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
			let data = new java.lang.StringBuilder();
			let string;
			while((string = readed.readLine()) != null)
				data.append(string + "\n");
			return data.toString();
		},
		saveTextToFile: function (file, text) {
			if(!file.exists()) file.createNewFile();
			let bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, text.length());
			for(let i = 0; i < text.length(); i++) bytes[i] = text.charCodeAt(i);
			let stream = new java.io.FileOutputStream(file);
			try {
				stream.write(bytes);
			} finally {
				stream.close();
			}
		}
	},
	Base64: {
		encode: function (text) {

			let bytes = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, text.length());
			for(let i = 0; i < text.length(); i++) bytes[i] = new java.lang.Byte(new String(text).charCodeAt(i));
			return android.util.Base64.encodeToString(bytes, 0);
		},
		decode: function (text) {
			return android.util.Base64.decode(text, 0);
		}
	},
	Text: {
		clean: function (text) {
			let allColor = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "k", "l", "m", "n", "o", "r"];

			if(text != null) {

				allColor.forEach(function (entry) {
					text = text.replace(new RegExp("\u00A7" + entry, 'g'), "");
				});
				return text;
			} else
				return "";
		}
	},
	ModSettings: {
		getSlider: function () {
			return new android.widget.SeekBar(ctx);
		},
	},
	Block: {
		isLiquid: function (id) {
			if(id >= 8 && id <= 11) return true;
			return false;
		},
		rayTrace: function (dir, pos, radius) {
			/*
			Taken from  https://raw.githubusercontent.com/zhuowei/ModPEScripts/master/500ise_paintbrush.js
			Originally Taken from https://raw.github.com/Overv/MineAssemble/master/reference/src/mineassemble.c .
			An implementation of http://www.cse[1]orku.ca/~amana/research/grid.pdf
			(modified with guidance from http://gamedev.stackexchange.com/questions/47362/cast-ray-to-select-block-in-voxel-game)
			Thus, this below method is:
			Copyright (C) 2013 Alexander Overvoorde
			Permission is hereby granted, free of charge, to any person obtaining a copy of
			this software and associated documentation files (the "Software"), to deal in
			the Software without restriction, including without limitation the rights to
			use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
			the Software, and to permit persons to whom the Software is furnished to do so,
			subject to the following conditions:
			The above copyright notice and this permission notice shall be included in all
			copies or substantial portions of the Software.
			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
			IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
			FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
			COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
			IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
			CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
			 */
			let result = {};
			if(dir[0] == 0.0 && dir[1] == 0.0 && dir[2] == 0.0) {
				result.hit = false;
				return result;
			}
			let start = pos.slice(0);

			let x = Math.floor(pos[0]);
			let y = Math.floor(pos[1]);
			let z = Math.floor(pos[2]);

			let x_dir = dir[0] >= 0.0 ? 1 : -1;
			let y_dir = dir[1] >= 0.0 ? 1 : -1;
			let z_dir = dir[2] >= 0.0 ? 1 : -1;

			let dx_off = x_dir > 0 ? 1.0 : 0.0;
			let dy_off = y_dir > 0 ? 1.0 : 0.0;
			let dz_off = z_dir > 0 ? 1.0 : 0.0;




			let radius2 = radius * radius;

			while(true) {
				let dx = start[0] - pos[0];
				let dy = start[1] - pos[1];
				let dz = start[2] - pos[2];
				let dist2 = dx * dx + dy * dy + dz * dz;
				if(dist2 > radius2) {
					result.hit = false;


					return result;
				}

				if(getTile(x, y, z) != 0) {
					let dist = Math.sqrt(dist2);

					pos[0] -= x;
					pos[1] -= y;
					pos[2] -= z;

					result.hit = true;
					result.x = x;
					result.y = y;
					result.z = z;
					result.dist = dist;

					return result;

				}

				dx = x - pos[0] + dx_off;
				dy = y - pos[1] + dy_off;
				dz = z - pos[2] + dz_off;

				let t1 = dx / dir[0];
				let t2 = dy / dir[1];
				let t3 = dz / dir[2];

				if(t1 <= t2 && t1 <= t3) {
					pos[0] += dx;
					pos[1] += t1 * dir[1];
					pos[2] += t1 * dir[2];
					x += x_dir;
				}
				if(t2 <= t1 && t2 <= t3) {
					pos[0] += t2 * dir[0];
					pos[1] += dy;
					pos[2] += t2 * dir[2];
					y += y_dir;
				}
				if(t3 <= t1 && t3 <= t2) {
					pos[0] += t3 * dir[0];
					pos[1] += t3 * dir[1];
					pos[2] += dz;
					z += z_dir;
				}
			}
		}
	},
	Player: {
		isInWater: function () {
			if(Utils.Block.isLiquid(getTile(getPlayerX() + 0.5, getPlayerY() - 1.5, getPlayerZ() + 0.5))) return true;
			return false;
		},
		isOnLadder: function () {
			if(getTile(getPlayerX() + 0.5, getPlayerY() - 1.5, getPlayerZ() + 0.5) == 65 || getTile(getPlayerX() + 0.5, getPlayerY() - 1.5, getPlayerZ() + 0.5) == 106) return true;
			return false;
		},
		onGround: function () {
			let y = getPlayerY();
			while(y > 1) y -= 1;

			if((Math.round(y * 100) >= 61 && Math.round(y * 100) <= 63) && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			if((Math.round(y * 100) >= 11 && Math.round(y * 100) <= 13) && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			return false;
		},
		isCollidedHorizontally: function () {
			let x = getPlayerX();
			let z = getPlayerZ();
			let blockX = Math.round(x - 0.5);
			let blockZ = Math.round(z - 0.5);
			while(x < 1) x += 1;
			while(z < 1) z += 1;
			while(x > 1) x -= 1;
			while(z > 1) z -= 1;

			if(Math.round(x * 100) == 31) x -= 0.01;
			if(Math.round(z * 100) == 31) z -= 0.01;
			if(Math.round(x * 100) == 69) x += 0.01;
			if(Math.round(z * 100) == 69) z += 0.01;
			if(Math.round(x * 100) == 30) blockX--;
			if(Math.round(z * 100) == 30) blockZ--;
			if(Math.round(x * 100) == 70) blockX++;
			if(Math.round(z * 100) == 70) blockZ++;
			if(getTile(blockX, getPlayerY(), blockZ) == 0 && getTile(blockX, getPlayerY() - 1, blockZ) == 0 && getTile(blockX, getPlayerY() - 0.5, blockZ) == 0 && getTile(blockX, getPlayerY() + 0.2, blockZ) == 0 && getTile(blockX, getPlayerY() - 1.6, blockZ) == 0) return false;

			if(Block.getDestroyTime(getTile(blockX, getPlayerY() - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, getPlayerY(), blockZ)) <= 0.1) return false;

			if(Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
			if(Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
			return false;
		}
	},
	Vel: {
		lastX: 0,
		lastY: 0,
		lastZ: 0,
		calculateSpeed: function () {
			return Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
		}
	},
	Item: {
		getDamage: function(id){
			switch(id){
			//Swords
			case 268:
			case 283:
				return 5;
				break;
			case 272:
				return 6;
				break;
			case 267:
				return 7;
				break;
			case 276:
				return 8;
				break;
			//Axe
			case 271:
			case 286:
				return 4;
				break;
			case 275:
				return 5;
				break;
			case 258:
				return 6;
				break;
			case 279:
				return 7;
				break;
			}
		}
	},
	Pos: {
		lastX: 0,
		lastY: 0,
		lastZ: 0
	},
	Entity: {
		getAll: function () {
			if(Launcher.isToolbox()) {
				return Entity.getAll();
			} else {
				return Utils.Entity.allEntitys;
			}
		},
		targettedMobs: [true, true],
		/*first mobs second players*/
		allEntitys: new Array(),
		charEnts: new Array(),
		crosshairAimAt: function (ent, pos) {
			if(ent != null) {
				let x = Entity.getX(ent) - getPlayerX();
				let y = Entity.getY(ent) - getPlayerY();
				let z = Entity.getZ(ent) - getPlayerZ();
				if(pos != null && pos instanceof Array) {

					x = Entity.getX(ent) - pos[0];
					y = Entity.getY(ent) - pos[1];
					z = Entity.getZ(ent) - pos[2];
				}
				if(Entity.getEntityTypeId(ent) != 63)
					y += 0.5;

				let len = Math.sqrt(x * x + y * y + z * z);
				y = y / len;
				let pitch = Math.asin(y);
				let deg_rad = 180 / Math.PI;
				pitch = pitch * deg_rad;
				pitch = -pitch;
				let yaw = -Math.atan2(x, z) * deg_rad;
				if(pitch < 89 && pitch > -89) {
					Entity.setRot(Player.getEntity(), yaw, pitch);
				}
			}
		},
		bowAimAt: function (ent) {
			let deg_rad = 180 / Math.PI;
			let posX = Entity.getX(ent) - Player.getX();
			let posY = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) - Player.getY() : Entity.getY(ent) + 1 - Player.getY();
			let posZ = Entity.getZ(ent) - Player.getZ();
			let yaw = (Math.atan2(posZ, posX) * deg_rad) - 90;
			let len = Math.sqrt(posX * posX + posZ * posZ);
			let g = 0.007;
			let tmp = (1 - g * (g * (Math.pow(len, 2)) + 2 * posY));
			let pitch = deg_rad * -(Math.atan((1 - Math.sqrt(tmp)) / (g * len)));
			if(pitch < 89 && pitch > -89) {
				setRot(Player.getEntity(), yaw, pitch);
			}

		},
		getNearestEntity(maxrange, bypass) {
			let mobs = Utils.Entity.getAll();
			let players = Server.getAllPlayers();

			let small = maxrange;
			let ent = null;
			let much = 0;

			mobs.forEach(function (entry) {
				let x = Entity.getX(entry) - getPlayerX();
				let y = Entity.getY(entry) - getPlayerY();
				let z = Entity.getZ(entry) - getPlayerZ();
				
				let dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				
				if(dist >= small || dist <= 0.001)return;

				if(bypass && y > 0.8) {
					let xVel = Entity.getVelX(entry);
					let yVel = Entity.getVelY(entry);
					let zVel = Entity.getVelZ(entry);
					if(xVel == 0 && yVel == 0 && zVel == 0)
						return;
				}


				if(Entity.getEntityTypeId(entry) == 63 && Entity.getNameTag(entry) == "")
					return;

				

				if(!(Utils.Entity.targettedMobs[1] == true && Entity.getEntityTypeId(entry) == 63) &&
				!(Utils.Entity.targettedMobs[0] == true && Entity.getEntityTypeId(entry) < 63))return;

				
					if(Entity.getHealth(entry)> 0 && Entity.getNameTag(entry) == "" || FriendManager.isFriend(Entity.getNameTag(entry)) == false) {
						small = dist;
						ent = entry;
					}
				

			});

			players.forEach(function (entry) {
				let x = Entity.getX(entry) - getPlayerX();
				let y = Entity.getY(entry) - getPlayerY();
				let z = Entity.getZ(entry) - getPlayerZ();
				
				let dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
				
				if(dist >= small || dist <= 0.001)return;

				if(bypass && y > 0.8) {
					let xVel = Entity.getVelX(entry);
					let yVel = Entity.getVelY(entry);
					let zVel = Entity.getVelZ(entry);
					if(xVel == 0 && yVel == 0 && zVel == 0)
						return;
				}


				if(Entity.getEntityTypeId(entry) == 63 && Entity.getNameTag(entry) == "")
					return;

				

				if(!(Utils.Entity.targettedMobs[1] == true && Entity.getEntityTypeId(entry) == 63) &&
				!(Utils.Entity.targettedMobs[0] == true && Entity.getEntityTypeId(entry) < 63))return;

				
					if(Entity.getHealth(entry)> 0 && Entity.getNameTag(entry) == "" || FriendManager.isFriend(Entity.getNameTag(entry)) == false) {
						small = dist;
						ent = entry;
					}
				
			});

			return ent;
		}
	}
};

var UpdateManager = {
	version: "1.1.1",
	stableVer: "Loading",
	stableInfo: null,
	devInfo: null,
	scriptLoader: null,
	init: function () {
		if(Launcher.isBlockLauncher()) {
			this.scriptLoader = net.zhuoweizhang.mcpelauncher.ScriptManager;
		} else if(Launcher.isToolbox()) {
			//this.scriptLoader = eval (ctx.getPackageName() + ".MinecraftActivity");
			//this.scriptLoader = io.mrarm.mcpelauncher.modpe.ModPEScriptLoader;
		} else {
			DragOP.ctoast("You are using an unsupported Launcher. The auto updater wont work");
			return;
		}
		this.downloadStableInfo();
	},
	downloadStableInfo: function () {
		Utils.Url.getUrlContents("https://api.github.com/repos/DragOP-Menu/DragOP-Menu/releases/latest", function (cont, err) {
			if(err == null && cont != "") {
				UpdateManager.stableInfo = new org.json.JSONObject(cont);
			} else {
				DragOP.ctoast("StableDownloadError: " + err);

			}
			UpdateManager.downloadDevInfo();
		});
	},
	downloadDevInfo: function () {
		Utils.Url.getUrlContents("https://api.github.com/repos/DragOP-Menu/DragOP-Menu/commits", function (cont, err) {
			if(cont != null && cont != "") {
				let arr = new org.json.JSONArray(cont);
				UpdateManager.devInfo = arr.getJSONObject(0);
			} else {
				DragOP.ctoast("DevDownloadError: " + err);
			}
			UpdateManager.checkForUpdate();
		});
	},
	checkForUpdate: function () {
		if(this.stableInfo == null)
			return;
		if(this.stableInfo.getString("tag_name") != UpdateManager.version && this.stableInfo.getString("tag_name").replace("v", "") != UpdateManager.version) {
			DragOP.ctoast("New stable version available: " + this.stableInfo.getString("tag_name") + "\nCurrent version: " + UpdateManager.version);
		}
	}
};
UpdateManager.init();

DragOP.addCode = function (code) {
	l[0].push(code);
}
DragOP.setLString = function (code, lang, value) {
	let done = false;
	l[0].forEach(function (entry, index, array) {
		if(done == false && entry.toLowerCase() == code.toLowerCase()) {
			l[lang][index] = value;
			done = true;
		}
	});
}
DragOP.addCode("special.panic");
DragOP.addCode("special.target");
DragOP.addCode("special.friend_manager");
DragOP.addCode("special.bypass");
DragOP.addCode("special.more");
DragOP.addCode("hacks.gamemode");
DragOP.addCode("hacks.speed");
DragOP.addCode("hacks.aimaura");
DragOP.addCode("hacks.jumpspeed");
DragOP.addCode("hacks.autojump");
DragOP.addCode("hacks.tpaura");
DragOP.addCode("hacks.bowaimbot");
DragOP.addCode("hacks.clicktp");
DragOP.addCode("hacks.longjump");
DragOP.addCode("hacks.flight");
DragOP.addCode("hacks.step");
DragOP.addCode("hacks.jesus");
DragOP.addCode("hacks.nodownglide");
DragOP.addCode("hacks.glide");
DragOP.addCode("hacks.chestTracer");
DragOP.addCode("hacks.criticals");
DragOP.addCode("hacks.coords");
DragOP.addCode("hacks.playerEsp");
DragOP.addCode("hacks.nuker");
DragOP.addCode("gm.survival");
DragOP.addCode("gm.creative");
DragOP.addCode("moduletype.mod");
DragOP.addCode("moduletype.special");
DragOP.addCode("moduletype.command");
DragOP.addCode("moddialog.description");
DragOP.addCode("moddialog.type");
DragOP.addCode("state.on");
DragOP.addCode("state.off");
DragOP.addCode("screen.settings");
DragOP.addCode("screen.updatemgr");
DragOP.addCode("screen.about");

//DragOP.setLString(code, lc.en_US, value);
DragOP.setLString("special.bypass", lc.en_US, "Bypass");
DragOP.setLString("special.target", lc.en_US, "Target");
DragOP.setLString("special.friend_manager", lc.en_US, "Friend-Manager");
DragOP.setLString("special.panic", lc.en_US, "Panic");
DragOP.setLString("special.more", lc.en_US, "MORE");
DragOP.setLString("hacks.gamemode", lc.en_US, "Gamemode");
DragOP.setLString("hacks.speed", lc.en_US, "Speed");
DragOP.setLString("hacks.jumpspeed", lc.en_US, "JumpSpeed");
DragOP.setLString("hacks.aimaura", lc.en_US, "AimAura"); //No good German translation for aim aura
DragOP.setLString("hacks.autojump", lc.en_US, "AutoJump");
DragOP.setLString("hacks.tpaura", lc.en_US, "TP-Aura");
DragOP.setLString("hacks.bowaimbot", lc.en_US, "BowAimBot");
DragOP.setLString("hacks.clicktp", lc.en_US, "TapTeleport");
DragOP.setLString("hacks.longjump", lc.en_US, "BunnyHop");
DragOP.setLString("hacks.flight", lc.en_US, "Flight");
DragOP.setLString("hacks.step", lc.en_US, "Step");
DragOP.setLString("hacks.jesus", lc.en_US, "Jesus");
DragOP.setLString("hacks.nodownglide", lc.en_US, "NoDownGlide");
DragOP.setLString("hacks.glide", lc.en_US, "Glide");
DragOP.setLString("hacks.chestTracer", lc.en_US, "ChestTracers");
DragOP.setLString("hacks.criticals", lc.en_US, "Criticals");
DragOP.setLString("hacks.coords", lc.en_US, "Coords");
DragOP.setLString("hacks.playerEsp", lc.en_US, "PlayerESP");
DragOP.setLString("hacks.nuker", lc.en_US, "Nuker");
DragOP.setLString("gm.survival", lc.en_US, "Survival");
DragOP.setLString("gm.creative", lc.en_US, "Creative");
DragOP.setLString("moduletype.mod", lc.en_US, "Mod");
DragOP.setLString("moduletype.special", lc.en_US, "Special");
DragOP.setLString("moduletype.command", lc.en_US, "Command");
DragOP.setLString("moddialog.description", lc.en_US, "Description");
DragOP.setLString("moddialog.type", lc.en_US, "Type");
DragOP.setLString("state.on", lc.en_US, "On");
DragOP.setLString("state.off", lc.en_US, "Off");
DragOP.setLString("screen.settings", lc.en_US, "Settings");
DragOP.setLString("screen.updatemgr", lc.en_US, "Update Manager");
DragOP.setLString("screen.about", lc.en_US, "About");

DragOP.getL = function () {
	return l[1];
}

DragOP.getLString = function (code) {
	let str = code;
	l[0].forEach(function (entry, index, array) {

		if(entry.toLowerCase()
			.indexOf(code.toLowerCase()) > -1) {
			try {
				str = DragOP.getL()[index];
			} catch(e) {
				try {
					str = l[1][index];
				} catch(e) {
					DragOP.ctoast(e);
				}
			}
		}
	});
	return str;
}

DragOP.loadModsAnim = function (progress) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler()
				.postDelayed(new java.lang.Runnable({
					run: function () {
						ModPE.langEdit("menu.copyright", "DragOP: " + progress + " Modules loaded");
						if(progress < Utils.modsCount) DragOP.loadModsAnim(progress + 1);
					}
				}), 100);
		}
	}));
}
DragOP.getStyledBackground = function () {
	let bg = new android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(1);
	bg.setColor(android.graphics.Color.argb(90, 255, 255, 255));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(210, 0, 0, 0));
	return bg;
}
DragOP.getStyledBtnBackground = function (state, toggleable) {
	let bg = android.graphics.drawable.GradientDrawable();
	bg.setCornerRadius(1);
	bg.setColor(android.graphics.Color.argb(80, 0, 0, 0));
	if(state) bg.setColor(android.graphics.Color.argb(210, 0, 200, 0));
	if(toggleable == false) bg.setColor(android.graphics.Color.argb(210, 230, 150, 30));
	bg.setShape(android.graphics.drawable.GradientDrawable.RECTANGLE);
	bg.setStroke(dip2px(2), android.graphics.Color.argb(230, 0, 0, 0));
	return bg;
}

DragOP.xScrolled = 0;
DragOP.yScrolled = 0;

DragOP.pxToMeter = function (px) {
	return(px / android.util.TypedValue.applyDimension(android.util.TypedValue.COMPLEX_UNIT_MM, 1, ctx.getResources().getDisplayMetrics())) / 1000;
}

DragOP.getMetersScrolled = function () {
	let justScrolled = DragOP.pxToMeter(DragOP.xScrolled + DragOP.yScrolled);
	justScrolled += DragOP.metersScrolled;
	editor.putInt("DragOP.egg.metersScrolled", justScrolled);
	editor.commit();

	return justScrolled;
}

DragOP.scrollView = function (context) {
	let scrollView = new android.widget.ScrollView(context);

	try {
		if(android.os.Build.VERSION.SDK_INT > 22)
			scrollView.setOnScrollChangeListener(new android.view.View.OnScrollChangeListener({
				onScrollChange: function (view, scrollX, scrollY, oldScrollX, oldScrollY) {
					DragOP.xScrolled += Math.abs(scrollX - oldScrollX);
					DragOP.yScrolled += Math.abs(scrollY - oldScrollY);
				}
			}));
	} catch(e) {}
	return scrollView;
}

DragOP.showModDialog = function (mod) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				let content = new android.widget.RelativeLayout(ctx);
				content.setId(9472729);
				let contentScroll = new DragOP.scrollView(ctx);
				contentScroll.setId(492628);
				//default content
				let modTitle = new android.widget.TextView(ctx);
				modTitle.setText(android.text.Html.fromHtml("<u>" + mod.name + "</u>"));
				modTitle.setTextSize(dip2px(20));
				modTitle.setGravity(android.view.Gravity.CENTER);
				modTitle.setTextColor(android.graphics.Color.BLACK);
				modTitle.setTypeface(Utils.font);
				modTitle.setId(94771);
				let modTypeText = new android.widget.TextView(ctx);
				modTypeText.setText(DragOP.getLString("moddialog.type") + ": " + ModuleType.toName(mod.type));
				modTypeText.setGravity(android.view.Gravity.CENTER);
				modTypeText.setTextColor(android.graphics.Color.BLACK);
				modTypeText.setTextSize(dip2px(10));
				modTypeText.setTypeface(Utils.font);
				modTypeText.setId(93922);
				let modDescTitle = new android.widget.TextView(ctx);
				modDescTitle.setText(DragOP.getLString("moddialog.description") + ":");
				modDescTitle.setGravity(android.view.Gravity.CENTER);
				modDescTitle.setTextColor(android.graphics.Color.BLACK);
				modDescTitle.setTextSize(dip2px(11));
				modDescTitle.setTypeface(Utils.font);
				modDescTitle.setId(29582);
				let modDescText = new android.widget.TextView(ctx);
				modDescText.setText(mod.desc);
				modDescText.setGravity(android.view.Gravity.CENTER);
				modDescText.setTextSize(dip2px(10));
				modDescText.setTypeface(Utils.font);
				modDescText.setTextColor(android.graphics.Color.BLACK);
				modDescText.setId(29285);
				//settings
				let modSettings = new android.widget.LinearLayout(ctx);
				modSettings.setOrientation(1);
				if(mod.getSettingsLayout) {
					let params = new android.widget.LinearLayout.LayoutParams(mwidth, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					let line = new android.widget.TextView(ctx);
					line.setText("");
					let gradientLine = new android.graphics.drawable.GradientDrawable();
					gradientLine.setShape(android.graphics.drawable.GradientDrawable.LINE);
					gradientLine.setColor(android.graphics.Color.TRANSPARENT);
					gradientLine.setStroke(dip2px(1), android.graphics.Color.argb(50, 0, 0, 0));
					line.setBackground(gradientLine);
					line.setGravity(android.view.Gravity.CENTER);
					modSettings.addView(line, params);
					let settingText = new android.widget.TextView(ctx);
					settingText.setText("Settings");
					settingText.setGravity(android.view.Gravity.CENTER);
					settingText.setTextColor(android.graphics.Color.BLACK);
					settingText.setTextSize(dip2px(11));
					settingText.setTypeface(Utils.font);
					modSettings.addView(settingText, params);
					let extraParams = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
					modSettings.addView(mod.getSettingsLayout(extraParams));
					//Im thinking about a line (html <hr> tag) and the layout underneath
				}
				//footer
				let closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				closeButton.setTextColor(android.graphics.Color.BLACK);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				let dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				let params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				dialogLayout.addView(modTitle, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				content.addView(modTypeText, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modTypeText.getId());
				content.addView(modDescTitle, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modDescTitle.getId());
				content.addView(modDescText, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modDescText.getId());
				content.addView(modSettings, params);
				contentScroll.addView(content);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, modTitle.getId());
				params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
				contentScroll.setFillViewport(true);
				dialogLayout.addView(contentScroll, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				dialog = new android.app.Dialog(ctx);
				dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				dialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				dialog.setContentView(dialogLayout);
				dialog.setTitle(mod.name);
				dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {
						showMenu();
					}
				}));
				dialog.show();
				let window = dialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						dialog.dismiss();
					}
				}));
			} catch(e) {
				DragOP.ctoast("Error(#"+e.lineNumber+"): " + e);
			}
		}
	}));
}

DragOP.registerModule = function (module) {
	Utils.modsCount += 1;
	if(module.type == ModuleType.command) {
		CommandManager.registerCommand(module);
	} else {
		DragOP.mods.push(module);
	}
}
var friendMgr = {
	name: DragOP.getLString("special.friend_manager"),
	desc: "Friends wont be aimed by AimAura or BowAimBot",
	type: ModuleType.special,
	category: ModCategory.MISC,
	openFriendManager: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				try {
					var display = new android.util.DisplayMetrics();
					com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
						.getWindowManager()
						.getDefaultDisplay()
						.getMetrics(display);
					var refresh = function () {
						list.removeAllViews();
						for(var i = 0; i < FriendManager.all.length(); i++) {
							var layout = new android.widget.RelativeLayout(ctx);
							var params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

							var Fname = new android.widget.TextView(ctx);
							Fname.setText(FriendManager.all.get(i));
							Fname.setTypeface(Utils.font);
							Fname.setTextColor(android.graphics.Color.BLACK);
							Fname.setTextSize(dip2px(13));
							Fname.setPadding(10, 0, 10, 0);
							Fname.setId(395957372);

							var del = new android.widget.Button(ctx);
							del.setText("X");
							del.setTypeface(Utils.font);
							del.setId(38473727);
							del.setTextColor(android.graphics.Color.RED);
							del.setOnClickListener(new android.view.View.OnClickListener({
								onClick: function (v) {
									DragOP.ctoast("Friend removed!");
									FriendManager.removeFriend(v.getParent().getChildAt(0).getText().toString());
									refresh();
								}
							}));
							params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
							params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
							params.addRule(android.widget.RelativeLayout.LEFT_OF, del.getId());
							params.addRule(android.widget.RelativeLayout.ALIGN_BOTTOM, del.getId());
							layout.addView(Fname, params);
							params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
							params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);

							params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
							layout.addView(del, params);
							list.addView(layout);
						}
					};
					var content = new android.widget.LinearLayout(ctx);
					content.setId(9472729);
					content.setOrientation(1);
					var contentScroll = new DragOP.scrollView(ctx);
					contentScroll.setId(492628);

					FriendManager.loadFromFile();
					//default content
					var title = new android.widget.TextView(ctx);
					title.setText(DragOP.getLString("special.friend_manager"));
					title.setTextSize(dip2px(20));
					title.setGravity(android.view.Gravity.CENTER);
					title.setTextColor(android.graphics.Color.BLACK);
					title.setTypeface(Utils.font);
					title.setId(94771);
					//content
					var adder = new android.widget.RelativeLayout(ctx);
					var name = new android.widget.EditText(ctx);
					name.setId(29382829);
					name.setHint("Name of your Friend");
					name.setTypeface(Utils.font);
					name.setTextColor(android.graphics.Color.BLACK);
					var addBtn = new android.widget.Button(ctx);
					addBtn.setId(9452111);
					addBtn.setTypeface(Utils.font);
					addBtn.setText("Add");

					addBtn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (v) {
							FriendManager.addFriend(name.getText() + "");
							name.setText("");
							FriendManager.saveToFile();
							FriendManager.loadFromFile();
							refresh();
						}
					}));


					var params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					params.addRule(android.widget.RelativeLayout.LEFT_OF, addBtn.getId());
					params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
					params.addRule(android.widget.RelativeLayout.ALIGN_BOTTOM, addBtn.getId());
					adder.addView(name, params);
					params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
					adder.addView(addBtn, params);
					content.addView(adder);
					//dynamic friend layout
					var list = new android.widget.LinearLayout(ctx);
					list.setOrientation(1);

					for(var i = 0; i < FriendManager.all.length(); i++) {
						var layout = new android.widget.RelativeLayout(ctx);
						var params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

						var Fname = new android.widget.TextView(ctx);
						Fname.setText(FriendManager.all.get(i));
						Fname.setTypeface(Utils.font);
						Fname.setTextColor(android.graphics.Color.BLACK);
						Fname.setTextSize(dip2px(13));
						Fname.setPadding(10, 0, 10, 0);
						Fname.setId(395957372);

						var del = new android.widget.Button(ctx);
						del.setText("X");
						del.setTypeface(Utils.font);
						del.setId(38473727);
						del.setTextColor(android.graphics.Color.RED);

						del.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function (v) {
								DragOP.ctoast("Friend removed!");
								FriendManager.removeFriend(v.getParent().getChildAt(0).getText().toString());


								refresh();
							}
						}));
						params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
						params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
						params.addRule(android.widget.RelativeLayout.LEFT_OF, del.getId());
						params.addRule(android.widget.RelativeLayout.ALIGN_BOTTOM, del.getId());
						layout.addView(Fname, params);
						params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
						params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);

						params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
						layout.addView(del, params);
						list.addView(layout);
					}

					content.addView(list);
					//footer
					var closeButton = new styledBtn();
					closeButton.setText("Close");
					closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
					closeButton.setId(10472);
					closeButton.setTypeface(Utils.font);
					//layout alignement....
					var dialogLayout = new android.widget.RelativeLayout(ctx);
					dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
					var params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
					dialogLayout.addView(title, params);

					contentScroll.addView(content);
					params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					params.addRule(android.widget.RelativeLayout.BELOW, title.getId());
					params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
					contentScroll.setFillViewport(true);
					dialogLayout.addView(contentScroll, params);
					params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
					dialogLayout.addView(closeButton, params);
					//Dialog Stuff
					dialog = new android.app.Dialog(ctx);
					dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
					dialog.getWindow()
						.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					dialog.setContentView(dialogLayout);
					dialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
						onDismiss: function () {
							showMenu();

						}
					}));
					dialog.show();
					var window = dialog.getWindow();
					window.setLayout(mwidth, display.heightPixels);
					closeButton.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (view) {
							dialog.dismiss();
						}
					}));
				} catch(e) {
					DragOP.ctoast("Error: " + e);
				}
			}
		}));
	},

	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		menu.dismiss();
		this.openFriendManager();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("special.friend_manager"));
	}
};
DragOP.registerModule(friendMgr);
var target = {
	name: DragOP.getLString("special.target"),
	desc: "Let you choose the type of entitys that are targetted by Modules like AimAura and BowAimBot.",
	type: ModuleType.special,
	category: ModCategory.MISC,
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var players = new android.widget.CheckBox(ctx);
		players.setText("Players");
		players.setTypeface(Utils.font);
		players.setTextColor(android.graphics.Color.BLACK);
		players.setChecked(Utils.Entity.targettedMobs[1]);
		players.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.Entity.targettedMobs = [Utils.Entity.targettedMobs[0], v.isChecked()];
			}
		}));
		var mobs = new android.widget.CheckBox(ctx);
		mobs.setText("Mobs");
		mobs.setTextColor(android.graphics.Color.BLACK);
		mobs.setTypeface(Utils.font);
		mobs.setChecked(Utils.Entity.targettedMobs[0]);
		mobs.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.Entity.targettedMobs = [v.isChecked(), Utils.Entity.targettedMobs[1]];
			}
		}));
		settings.addView(players, params);
		settings.addView(mobs, params);
		return settings;
	},
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		DragOP.showModDialog(this);
		menu.dismiss();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("special.target"));
	}
};

DragOP.registerModule(target);
var bypass = {
	name: DragOP.getLString("special.bypass"),
	desc: "Mods will bypass AntiCheats or disable them if they can't.",
	type: ModuleType.special,
	category: ModCategory.MISC,
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var lbsg = new android.widget.Button(ctx);
		lbsg.setText("LBSG Anti-Cheat");
		lbsg.setTypeface(Utils.font);

		lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG ? enabledGradient : disabledGradient);
		lbsg.setTextColor(android.graphics.Color.BLACK);
		lbsg.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.bypassMode = BypassMode.LBSG;
				//facility.setBackground(Utils.bypassMode == BypassMode.FACILITY ? enabledGradient : disabledGradient);
				lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG ? enabledGradient : disabledGradient);
				vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT ? enabledGradient : disabledGradient);
			}
		}));
		var vanilla = new android.widget.Button(ctx);
		vanilla.setText("Vanilla");
		vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT ? enabledGradient : disabledGradient);
		vanilla.setTextColor(android.graphics.Color.BLACK);
		vanilla.setTypeface(Utils.font);

		vanilla.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.bypassMode = BypassMode.DEFAULT;
				//facility.setBackground(Utils.bypassMode == BypassMode.FACILITY ? enabledGradient : disabledGradient);
				lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG ? enabledGradient : disabledGradient);
				vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT ? enabledGradient : disabledGradient);
			}
		}));
		/*var facility = new android.widget.Button(ctx);
		facility.setText("facilityPE Anti-Cheat");
		facility.setTypeface(Utils.font);

		facility.setBackground(Utils.bypassMode == BypassMode.FACILITY ? enabledGradient : disabledGradient);
		facility.setTextColor(android.graphics.Color.BLACK);
		facility.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.bypassMode = BypassMode.FACILITY;
				facility.setBackground(Utils.bypassMode == BypassMode.FACILITY ? enabledGradient : disabledGradient);
				lbsg.setBackground(Utils.bypassMode == BypassMode.LBSG ? enabledGradient : disabledGradient);
				vanilla.setBackground(Utils.bypassMode == BypassMode.DEFAULT ? enabledGradient : disabledGradient);
			}
		}));*/
		settings.addView(vanilla, params);
		settings.addView(lbsg, params);
		//settings.addView(facility, params);
		return settings;
	},
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		DragOP.showModDialog(this);
		menu.dismiss();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("special.bypass"));
	}
};
DragOP.registerModule(bypass);
var panic = {
	name: DragOP.getLString("special.panic"),
	desc: "Disables all mods at once!",
	type: ModuleType.mod,
	category: ModCategory.MISC,
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},


	onEnable: function (btn) {},
	onDisable: function (btn) {},
	onClick: function (btn) {
		
		DragOP.mods.forEach(function (entry, index, array) {
			if(entry.isStateMode() && entry.state) entry.onClick(null);
		});
		if (btn != null)menu.dismiss ();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("special.panic"));
	}
};
DragOP.registerModule(panic);
var gmhack = {
	name: "Gamemode",
	desc: "Changes your gamemode!",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	extra: Level.getGameMode(),
	onTick: function () { /*some tick*/ },
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		if(this.extra == 1) this.extra = 0;
		else this.extra = 1;
		Level.setGameMode(this.extra);
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.gamemode") + ": " + (this.extra == 0 ? DragOP.getLString("gm.survival") : DragOP.getLString("gm.creative")));
	}
};
DragOP.registerModule(gmhack);

var aimaura = {
	name: DragOP.getLString("hacks.aimaura"),
	desc: "Automatically aims at near mobs!",
	type: ModuleType.mod,
	category: ModCategory.COMBAT,
	state: false,
	range: 7,
	requestAim: false,
	curEnt: null,
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var rangeText = new android.widget.TextView(ctx);
		rangeText.setText("Range: " + this.range);
		rangeText.setTextColor(android.graphics.Color.BLACK);
		rangeText.setTextSize(dip2px(9));
		rangeText.setGravity(android.view.Gravity.CENTER);
		rangeText.setTypeface(Utils.font);
		var rangeSlider = Utils.ModSettings.getSlider();
		rangeSlider.setMax(20);
		//rangeSlider.setMin(1);
		rangeSlider.setProgress(this.range);
		rangeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				rangeText.setText("Range: " + progress);

			},
			onStopTrackingTouch: function (seekbar) {
				aimaura.range = seekbar.getProgress();
			}
		}));
		settings.addView(rangeSlider, params);
		settings.addView(rangeText, params);


		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function(){
		if(this.curEnt !=null){
			Utils.Entity.crosshairAimAt(this.curEnt);
		}
	},
	onModTick: function () {
		if(this.state) {
			this.requestAim = true;

		}
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state) {
			var r = new java.lang.Runnable({
				run: function () {
					while(aimaura.state) {
						if(aimaura.requestAim) {
							aimaura.requestAim = false;
							try {
								Timings.startTiming("aimaura-thread");
								
								aimaura.curEnt = Utils.Entity.getNearestEntity(aimaura.range, true);
								
								
								Timings.stopTiming("aimaura-thread");
							} catch(e) {
								DragOP.ctoast(e);
								aimaura.state = false;
							}

						} else
							java.lang.Thread.sleep(10);
					}
					Timings.resetTiming("aimaura-thread");
				}
			});
			var t = new java.lang.Thread(r);
			t.start();
		}
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.aimaura"));
	}
};
DragOP.registerModule(aimaura);
var bowaimbot = {
	name: DragOP.getLString("hacks.bowaimbot"),
	desc: "Automatically aims with a bow at near mobs!",
	type: ModuleType.mod,
	category: ModCategory.COMBAT,
	state: false,
	range: 100,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var rangeText = new android.widget.TextView(ctx);
		rangeText.setText("Range: " + this.range);
		rangeText.setTextColor(android.graphics.Color.BLACK);
		rangeText.setTextSize(dip2px(9));
		rangeText.setGravity(android.view.Gravity.CENTER);
		rangeText.setTypeface(Utils.font);
		var rangeSlider = Utils.ModSettings.getSlider();
		rangeSlider.setMax(100);
		//rangeSlider.setMin(1);
		rangeSlider.setProgress(this.range);
		rangeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				rangeText.setText("Range: " + progress);

			},
			onStopTrackingTouch: function (seekbar) {
				bowaimbot.range = seekbar.getProgress();
			}
		}));
		settings.addView(rangeSlider, params);
		settings.addView(rangeText, params);


		return settings;
	},
	onTick: function () {
		if(this.state && getCarriedItem() == 261 /*No Dynamic :( */ ) {

			var ent = Utils.Entity.getNearestEntity(this.range);

			if(ent != null) Utils.Entity.bowAimAt(ent);

		}
	},
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.bowaimbot"));
	}
};
DragOP.registerModule(bowaimbot);
var tpaura = {
	name: DragOP.getLString("hacks.tpaura"),
	desc: "Automatically teleports you around people so that they can\'t hit you.",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {

	},
	findPos: function (ent) {
		var Ppos = new Array(getPlayerX(), getPlayerY() + (criticals.state && criticals.velTick > 0 ? 0 : 0.5), getPlayerZ());
		var entPos = new Array(Entity.getX(ent), Entity.getY(ent), Entity.getZ(ent));
		var diff = new Array(entPos[0] - Ppos[0], null, entPos[2] - Ppos[2]);
		Ppos[0] += diff[0] * 1.8;
		Ppos[2] += diff[2] * 1.8;
		return Ppos;
		//just inverting pos at the moment
	},
	findVel: function (ent) {
		var Ppos = new Array(getPlayerX(), getPlayerY() + criticals.state && criticals.velTick > 0 ? 0 : 0.5, getPlayerZ());
		var entPos = new Array(Entity.getX(ent), Entity.getY(ent), Entity.getZ(ent));
		var diff = new Array(entPos[0] - Ppos[0], (Utils.Player.onGround() ? 0.25 : 0), entPos[2] - Ppos[2]);
		while(diff[0] > 1.5 || diff[0] < -1.5 || diff[2] > 1.5 || diff[2] < -1.5) {
			diff[0] = diff[0] / 1.2;
			diff[2] = diff[2] / 1.2;
		}

		return diff;
	},
	onAttack: function (att, vic) {
		if(att == Player.getEntity() && this.state && Entity.getHealth(vic) > 0) {

			var pos = this.findPos(vic);
			var vel = this.findVel(vic);

			if(getTile(pos[0], pos[1], pos[2]) == 0 && getTile(pos[0], pos[1] - 1, pos[2]) == 0 && getTile(pos[0], pos[1] - 2, pos[2]) == 0) {
				if(Utils.bypassMode == BypassMode.LBSG) {
					setVelX(getPlayerEnt(), vel[0]);
					setVelY(getPlayerEnt(), vel[1]);
					setVelZ(getPlayerEnt(), vel[2]);
				} else {
					Entity.setPosition(Player.getEntity(), pos[0], pos[1], pos[2]);
					Utils.Entity.crosshairAimAt(vic, pos);
				}
			}


		}
	},
	onEnable: function (btn) { /*Not used*/ },
	onDisable: function (btn) { /*Not used*/ },
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.tpaura"));
	}
};
DragOP.registerModule(tpaura);
var clicktp = {
	name: DragOP.getLString("hacks.clicktp"),
	desc: "Teleports you to the place where you clicked",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onUseItem: function (x, y, z, itemid, blockid, side) {
		if(getTile(x, y + 1, z) == 0 && getTile(x, y + 2, z) == 0 && this.state) {
			Entity.setPosition(Player.getEntity(), x + 0.5, y + 2.63 /*1.62 = eye height of steve*/ , z + 0.5);
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.clicktp"));
	}
};
DragOP.registerModule(clicktp);
var speed = {
	name: DragOP.getLString("hacks.speed"),
	desc: "Standard: Standard speed without any modifications\n" + DragOP.getLString("hacks.longjump") + ": Jumps up to 6 blocks long while walking!",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	extraTick: 0,
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var defaultspeed = new android.widget.Button(ctx);
		defaultspeed.setText("Standard");
		defaultspeed.setTypeface(Utils.font);
		defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT ? enabledGradient : disabledGradient);
		defaultspeed.setTextColor(android.graphics.Color.BLACK);
		defaultspeed.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.speedMode = SpeedMode.DEFAULT;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT ? enabledGradient : disabledGradient);
				//friction.setBackground(Utils.speedMode == SpeedMode.FRICTION ? enabledGradient : disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP ? enabledGradient : disabledGradient);
			}
		}));
		/*var friction = new android.widget.Button(ctx);
		friction.setText("Friction Speed");
		friction.setBackground(Utils.speedMode == SpeedMode.FRICTION ? enabledGradient : disabledGradient);
		friction.setTextColor(android.graphics.Color.BLACK);
		friction.setTypeface(Utils.font);

		friction.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.speedMode = SpeedMode.FRICTION;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT ? enabledGradient : disabledGradient);
				friction.setBackground(Utils.speedMode == SpeedMode.FRICTION ? enabledGradient : disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP ? enabledGradient : disabledGradient);
			}
		}));*/
		var bunny = new android.widget.Button(ctx);
		bunny.setText(DragOP.getLString("hacks.longjump"));
		bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP ? enabledGradient : disabledGradient);
		bunny.setTextColor(android.graphics.Color.BLACK);
		bunny.setTypeface(Utils.font);

		bunny.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Utils.speedMode = SpeedMode.LONGJUMP;
				defaultspeed.setBackground(Utils.speedMode == SpeedMode.DEFAULT ? enabledGradient : disabledGradient);
				//friction.setBackground(Utils.speedMode == SpeedMode.FRICTION ? enabledGradient : disabledGradient);
				bunny.setBackground(Utils.speedMode == SpeedMode.LONGJUMP ? enabledGradient : disabledGradient);
			}
		}));
		settings.addView(defaultspeed, params);
		settings.addView(bunny, params);
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onModTick: function () {
		if(this.state && Utils.Player.onGround()) {
			switch(Utils.speedMode) {
			case SpeedMode.DEFAULT:
				var max = Utils.bypassMode == BypassMode.LBSG ? 0.4 : 0.8;
				var lastSpeed = Math.sqrt(Math.pow(Utils.Vel.lastX, 2) + Math.pow(Utils.Vel.lastZ, 2));
				var speed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
				if(speed < 0.04) {
					setVelX(getPlayerEnt(), 0);
					setVelZ(getPlayerEnt(), 0);
				} else if(speed >= lastSpeed - 0.001 && speed < max) {
					setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) * (1 + max / 2));
					setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) * (1 + max / 2));
				} else if(speed < lastSpeed - 0.0001) {
					setVelX(getPlayerEnt(), (getPlayerX() - Utils.Pos.lastX) / 1.3);
					setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.3);

				} else if(speed > max) {
					setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) / 1.7);
					setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) / 1.7);
					//setVelZ(getPlayerEnt(), (getPlayerZ() - Utils.Pos.lastZ) / 1.1);
				}
				break;
			case SpeedMode.LONGJUMP:
				var speed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));
				if (Utils.Player.onGround ())this.extraTick++;
				if(speed > 0.105 && this.extraTick > 2 && Utils.Player.onGround ()) {
					this.extraTick = 0;
					var lastSpeed = Math.sqrt(Math.pow(Utils.Vel.lastX, 2) + Math.pow(Utils.Vel.lastZ, 2));
					if (speed <= lastSpeed - 0.001)return;
					var vector = new Array();
					var yaw = (getYaw(getPlayerEnt()) + 90) * (Math.PI / 180);
					var pitch = 0;
					vector[0] = Math.cos(yaw) * Math.cos(pitch);
					vector[2] = Math.sin(yaw) * Math.cos(pitch);
					if(Utils.bypassMode == BypassMode.LBSG) {
						vector[0] = vector[0] / 2;
						vector[2] = vector[2] / 2;
					}
					Entity.setVelX(getPlayerEnt(), vector[0]);
					Entity.setVelY(getPlayerEnt(), Utils.bypassMode == BypassMode.LBSG ? 0.425 : 0.5);
					Entity.setVelZ(getPlayerEnt(), vector[2]);
				} else if(Utils.Vel.calculateSpeed() < 0.04) {
					setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) / 2);
					setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) / 2);
				}
				break;
			}

		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.speed"));
	}
};
DragOP.registerModule(speed);
var flight = {
	name: DragOP.getLString("hacks.flight"),
	desc: "Makes you fly.",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state)
			Player.setFlying(1);
	},
	onClick: function (btn) {
		this.state = !this.state;
		Player.setFlying(this.state ? 1 : 0);
		Player.setCanFly(this.state ? 1 : Level.getGameMode());
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.flight"));
	}
};
DragOP.registerModule(flight);
var step = {
	name: DragOP.getLString("hacks.step"),
	desc: "Steps on full blocks like you will on a half slap",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},

	onTick: function () {
		if(this.state && Utils.Player.isCollidedHorizontally()) {
			if(Utils.bypassMode == BypassMode.VANILLA){
				Entity.setPositionRelative(getPlayerEnt(), 0, 1.6, 0);
				setVelY(getPlayerEnt (), 0.1);
			}else if (Utils.Player.onGround ())
				Entity.setPositionRelative(getPlayerEnt(), 0, 1.1, 0);
			else
				setVelY(getPlayerEnt(), 0.42);
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.step"));
	}
};
DragOP.registerModule(step);
var JesusMode = {
	FLOAT: 0,
	Solid: 1
};
var jesus = {
	name: DragOP.getLString("hacks.jesus"),
	desc: "Jesus used this hack 2000 years ago to walk over water\nFloat: Floats over water\nSolid: Makes liquids solid",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	mode: JesusMode.FLOAT,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	getSettingsLayout: function (params) {
		var settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		var float = new android.widget.Button(ctx);
		float.setText("Float");
		float.setTypeface(Utils.font);

		float.setBackground(this.mode == JesusMode.FLOAT ? enabledGradient : disabledGradient);
		float.setTextColor(android.graphics.Color.BLACK);
		float.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				Block.defineLiquidBlock(8, "Water", [
					["still_water", 0],
					["still_water", 0]
				], 8);
				Block.defineLiquidBlock(10, "Lava", [
					["still_lava", 0],
					["still_lava", 0]
				], 10);
				jesus.mode = JesusMode.FLOAT;
				float.setBackground(this.mode == JesusMode.FLOAT ? enabledGradient : disabledGradient);
				solid.setBackground(this.mode == JesusMode.SOLID ? enabledGradient : disabledGradient);
			}
		}));
		var solid = new android.widget.Button(ctx);
		solid.setText("Solid");
		solid.setTypeface(Utils.font);

		solid.setBackground(this.mode == JesusMode.SOLID ? enabledGradient : disabledGradient);
		solid.setTextColor(android.graphics.Color.BLACK);
		solid.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				jesus.mode = JesusMode.SOLID;
				solid.setBackground(this.mode == JesusMode.SOLID ? enabledGradient : disabledGradient);
				float.setBackground(this.mode == JesusMode.FLOAT ? enabledGradient : disabledGradient);
				if(jesus.state) {
					Block.defineBlock(8, "Water", [
						["still_water", 0]
					], 8, false, 4);
					Block.defineBlock(9, "Stationary Water", [
						["still_water", 0]
					], 9, false, 4);
					Block.setShape(8, 0, 0, 0, 1, 0.7, 1);
					Block.setShape(9, 0, 0, 0, 1, 0.7, 1);
					Block.defineBlock(10, "Lava", [
						["still_lava", 0]
					], 10, false, 4);
					Block.defineBlock(11, "Stationary Lava", [
						["still_lava", 0]
					], 11, false, 4);
					Block.setShape(10, 0, 0, 0, 1, 0.7, 1);
					Block.setShape(11, 0, 0, 0, 1, 0.7, 1);
				}


			}
		}));
		settings.addView(float, params);
		settings.addView(solid, params);
		return settings;
	},
	onTick: function () {
		if(this.state && this.mode == JesusMode.FLOAT) {
			if((getTile(getPlayerX(), getPlayerY() - 0.8, getPlayerZ() - 1) >= 8 && getTile(getPlayerX(), getPlayerY() - 0.8, getPlayerZ() - 1) <= 11)) {
				setVelY(getPlayerEnt(), 0.2);
			} else if((getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ() - 1) >= 8 && getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ() - 1) <= 11)) {
				setVelY(getPlayerEnt(), 0.05);
			} else if((getTile(getPlayerX(), getPlayerY() - 1.68, getPlayerZ() - 1) >= 8 && getTile(getPlayerX(), getPlayerY() - 1.68, getPlayerZ() - 1) <= 11)) {
				setVelY(getPlayerEnt(), 0.015);
			}
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state && this.mode == JesusMode.SOLID) {
			Block.defineBlock(8, "Water", [
				["still_water", 0]
			], 8, false, 4);
			Block.defineBlock(9, "Stationary Water", [
				["still_water", 0]
			], 9, false, 4);
			Block.setShape(8, 0, 0, 0, 1, 0.7, 1);
			Block.setShape(9, 0, 0, 0, 1, 0.7, 1);
			Block.defineBlock(10, "Lava", [
				["still_lava", 0]
			], 10, false, 4);
			Block.defineBlock(11, "Stationary Lava", [
				["still_lava", 0]
			], 11, false, 4);
			Block.setShape(10, 0, 0, 0, 1, 0.7, 1);
			Block.setShape(11, 0, 0, 0, 1, 0.7, 1);
		} else if(this.mode == JesusMode.SOLID) {
			Block.defineLiquidBlock(8, "Water", [
				["still_water", 0],
				["still_water", 0]
			], 8);
			Block.defineLiquidBlock(10, "Lava", [
				["still_lava", 0],
				["still_lava", 0]
			], 10);
		}
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.jesus"));
	}
};
DragOP.registerModule(jesus);
var nodownglide = {
	name: DragOP.getLString("hacks.nodownglide"),
	desc: "Not letting you to move on y-axis (upwards & downwards)",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	startY: -1,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onModTick: function () {
		if(this.state) {
			setVelY(getPlayerEnt(), 0.000000000001);
			Entity.setPositionRelative(getPlayerEnt(), 0, this.startY - getPlayerY(), 0);
		}
	},
	onClick: function (btn) {
		this.startY = getPlayerY();
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.nodownglide"));
	}
};
DragOP.registerModule(nodownglide);
var glide = {
	name: DragOP.getLString("hacks.glide"),
	desc: "Let you glide through the air. Sometimes good to bypass anti cheats",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	motion: -0.001,
	glideGui: null,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let gmText = new android.widget.TextView(ctx);
		gmText.setText("GlideMotion: " + this.motion);
		gmText.setTextColor(android.graphics.Color.BLACK);
		gmText.setTextSize(dip2px(9));
		gmText.setGravity(android.view.Gravity.CENTER);
		gmText.setTypeface(Utils.font);
		let gmSlider = Utils.ModSettings.getSlider();
		gmSlider.setMax(250);
		//rangeSlider.setMin(1);
		gmSlider.setProgress(-(this.motion + 0.001) * 1000);
		gmSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				let pro = (-progress / 1000) - 0.001;
				pro = Math.round(pro * 1000) / 1000;
				pro = pro.toString();
				if(pro.length == 2) pro += ".";
				while(pro.length < 6) pro += "0";

				gmText.setText("GlideMotion: " + pro);

			},
			onStopTrackingTouch: function (seekbar) {
				let pro = (-seekbar.getProgress() / 1000) - 0.001;
				pro = Math.round(pro * 1000) / 1000;
				glide.motion = pro;
			}
		}));
		//		if(Utils.bypassMode == BypassMode.FACILITY) {
		//			gmSlider.setEnabled(false);
		//			gmText.setText("Settings not available in MiniBox bypass mode!");
		//		}
		settings.addView(gmSlider, params);
		settings.addView(gmText, params);


		return settings;
	},
	showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				if(glide.glideGui == null || glide.glideGui.isShowing() == false) {
					let glideUpBtn = new android.widget.Button(ctx);
					glideUpBtn.setTypeface(Utils.font);
					glideUpBtn.setText("UP");
					glideUpBtn.getBackground().setAlpha(200);
					glideUpBtn.setPadding(10, 10, 10, 10);
					glideUpBtn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							Entity.setPositionRelative(getPlayerEnt(), 0, 1.01, 0);
						}
					}));
					let glideDownBtn = new android.widget.Button(ctx);
					glideDownBtn.setTypeface(Utils.font);
					glideDownBtn.setText("DOWN");
					glideDownBtn.getBackground().setAlpha(200);
					glideDownBtn.setPadding(10, 10, 10, 10);
					glideDownBtn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							Entity.setPositionRelative(getPlayerEnt(), 0, -1.01, 0);
						}
					}));
					let layout = new android.widget.LinearLayout(ctx);
					layout.setOrientation(1);
					layout.addView(glideUpBtn);
					layout.addView(glideDownBtn);
					glide.glideGui = new android.widget.PopupWindow(layout, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					glide.glideGui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, 0);
				}
			}
		}));

	},
	goDown: function () {
		let found = false;
		let cord = new Array(getPlayerX(), getPlayerY(), getPlayerZ());

		while(!found) {
			cord[1] = cord[1] - 1;
			if(getTile(cord[0], cord[1], cord[2]) != 0) found = true;
		}
		//Entity.setPosition(getPlayerEnt(), cord[0], cord[1]+2.7, cord[2]);
		setVelY(getPlayerEnt(), -4);

	},
	onModTick: function () {
		if(this.state && !Player.isFlying() && !Utils.Player.isInWater()) {
			switch(Utils.bypassMode) {
			case BypassMode.DEFAULT:
				if(Entity.getVelY(getPlayerEnt()) < 0)
					setVelY(getPlayerEnt(), this.motion);
				break;
			case BypassMode.LBSG:
				if(Entity.getVelY(getPlayerEnt()) < 0)
					if(Utils.flyTick < 680) {
						if(tick1 % 2 == 0) setVelY(getPlayerEnt(), -0.03);
						else setVelY(getPlayerEnt(), -0.1);
					} else {
						setVelY(getPlayerEnt(), -3);
					}
				break;
			}

		}
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(!this.state && glide.glideGui != null && glide.glideGui.isShowing() != false)
			glide.glideGui.dismiss();
		else if(this.state)
			this.showGui();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.glide"));
	}
};
DragOP.registerModule(glide);

var chesttracers = {
	name: DragOP.getLString("hacks.chestTracer"),
	desc: "Makes chests better visible",
	type: ModuleType.mod,
	category: ModCategory.RENDER,
	state: false,
	findTick: 0,
	groundMode: true,
	drawBox: false,
	ChestScan: {
		blocks: 0,
		finished: false,
		scanning: false
	},
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let rangeText = new android.widget.TextView(ctx);
		rangeText.setText("Range: " + this.radius);
		rangeText.setTextColor(android.graphics.Color.BLACK);
		rangeText.setTextSize(dip2px(9));
		rangeText.setGravity(android.view.Gravity.CENTER);
		rangeText.setTypeface(Utils.font);
		let rangeSlider = Utils.ModSettings.getSlider();
		rangeSlider.setMax(100);
		//rangeSlider.setMin(1);
		rangeSlider.setProgress(this.radius);
		rangeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				rangeText.setText("Range: " + progress);

			},
			onStopTrackingTouch: function (seekbar) {
				chesttracers.radius = seekbar.getProgress();
			}
		}));
		let groundCheck = new android.widget.CheckBox(ctx);
		groundCheck.setChecked(this.groundMode);
		groundCheck.setText("Ground Mode");
		groundCheck.setTypeface(Utils.font);
		groundCheck.setTextSize(dip2px(8));
		groundCheck.setTextColor(android.graphics.Color.BLACK);

		groundCheck.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				chesttracers.groundMode = v.isChecked();
				v.setChecked(chesttracers.groundMode);
			}
		}));
		let drawEspBox = new android.widget.CheckBox(ctx);
		drawEspBox.setChecked(this.drawBox);
		drawEspBox.setText("Draw ESPBox around Chests");
		drawEspBox.setTypeface(Utils.font);
		drawEspBox.setTextSize(dip2px(8));
		drawEspBox.setTextColor(android.graphics.Color.BLACK);

		drawEspBox.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				chesttracers.drawBox = v.isChecked();
				v.setChecked(chesttracers.drawBox);
			}
		}));
		let chestScan = new android.widget.TextView(ctx);
		chestScan.setTypeface(Utils.font);
		chestScan.setGravity(android.view.Gravity.CENTER);
		chestScan.setTextSize(dip2px(9));
		chestScan.setPadding(dip2px(5), 0, dip2px(5), 0);
		chestScan.setTextColor(android.graphics.Color.BLACK);
		if(this.ChestScan.finished)
			chestScan.setText("ChestScan finished. " + this.chests.length + " Chests found (" + this.ChestScan.blocks + " Blocks checked)");
		else if(this.ChestScan.scanning)
			chestScan.setText("Currently scanning for Chests. " + this.ChestScan.blocks + " Blocks already checked");
		else
			chestScan.setText("Chest Scan not started yet");
		let refreshBG = new android.graphics.drawable.GradientDrawable();
		refreshBG.setColor(android.graphics.Color.argb(90, 30, 30, 30));
		refreshBG.setStroke(dip2px(2), android.graphics.Color.BLACK);
		let refresh = new android.widget.Button(ctx);
		refresh.setBackground(refreshBG);
		refresh.setTypeface(Utils.font);
		refresh.setTextColor(android.graphics.Color.WHITE);
		refresh.setTextSize(dip2px(8));
		refresh.setText("Refresh");
		refresh.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				if(chesttracers.ChestScan.finished) {
					chestScan.setText("ChestScan finished. " + chesttracers.chests.length + " Chests found (" + chesttracers.ChestScan.blocks + " Blocks checked)");
				} else if(chesttracers.ChestScan.scanning) {
					chestScan.setText("Currently scanning for Chests. " + chesttracers.ChestScan.blocks + " Blocks already checked");
				} else {
					chestScan.setText("Chest Scan not started yet");
				}
			}
		}));

		settings.addView(rangeSlider, params);
		settings.addView(rangeText, params);
		settings.addView(groundCheck, params);
		settings.addView(drawEspBox, params);
		settings.addView(chestScan, params);
		settings.addView(refresh, params);
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	radius: 50,
	chests: new Array(),
	fCheckerThread: null,
	findChests: function () {
		if(this.ChestScan.scanning == true) return;
		this.ChestScan.finished = false;
		this.ChestScan.scanning = true;
		this.ChestScan.blocks = 0;
		let startX = Math.round(getPlayerX());
		let startZ = Math.round(getPlayerZ());
		let startRadius = this.radius;
		let blocks = 0;
		let newChests = new Array();
		let finished = [false, false, false, false];
		let lt = new java.lang.Runnable({
			run: function () {

				for(let x = startX - startRadius; x < startX; x++) {
					for(let z = startZ; z < startZ + startRadius; z++) {
						java.lang.Thread.sleep(1);
						for(let y = 0; y < 127; y++) {
							try {
								if(getTile(x, y, z) == 54) newChests.push([x, y, z]);
								blocks++;

							} catch(e) {
								cmsg("Error: " + e);
							}
						}
					}
				}
				//DragOP.cmsg("Thread1 finished");
				finished[0] = true;
			}
		});
		let t = new java.lang.Thread(lt);
		t.start();
		let rt = new java.lang.Runnable({
			run: function () {

				for(let x = startX; x < startX + startRadius; x++) {
					for(let z = startZ; z < startZ + startRadius; z++) {
						java.lang.Thread.sleep(1);
						for(let y = 0; y < 127; y++) {
							try {
								if(getTile(x, y, z) == 54) newChests.push([x, y, z]);

								blocks++;
							} catch(e) {
								cmsg("Error: " + e);
							}
						}
					}
				}
				//DragOP.cmsg("Thread2 finished");
				finished[1] = true;
			}
		});
		let t2 = new java.lang.Thread(rt);
		t2.start();
		let lb = new java.lang.Runnable({
			run: function () {

				for(let x = startX - startRadius; x < startX; x++) {
					for(let z = startZ - startRadius; z < startZ; z++) {
						java.lang.Thread.sleep(1);
						for(let y = 0; y < 127; y++) {
							try {
								if(getTile(x, y, z) == 54) newChests.push([x, y, z]);

								blocks++;
							} catch(e) {
								cmsg("Error: " + e);
							}
						}
					}
				}
				//DragOP.cmsg("Thread3 finished");
				finished[2] = true;
			}
		});
		let t3 = new java.lang.Thread(lb);
		t3.start();
		let rb = new java.lang.Runnable({
			run: function () {

				for(let x = startX; x < startX + startRadius; x++) {
					for(let z = startZ - startRadius; z < startZ; z++) {
						java.lang.Thread.sleep(1);
						for(let y = 0; y < 127; y++) {
							try {
								if(getTile(x, y, z) == 54) newChests.push([x, y, z]);

								blocks++;
							} catch(e) {
								cmsg("Error: " + e);
							}
						}
					}
				}
				//DragOP.cmsg("Thread4 finished");
				finished[3] = true;
			}
		});
		let t4 = new java.lang.Thread(rb);
		t4.start();
		let finishChecker = new java.lang.Runnable({
			run: function () {
				let wasEmpty = false;
				wasEmpty = chesttracers.chests.length == 0;
				while(!finished[0] || !finished[1] || !finished[2] || !finished[3]) {
					java.lang.Thread.sleep(250);
					chesttracers.ChestScan.blocks = blocks;
					if(wasEmpty) chesttracers.chests = newChests;
					//ModPE.showTipMessage("Blocks: "+blocks);
				}
				//DragOP.cmsg("Chest scan done. Found "+chesttracers.chests.length+" Chests ("+blocks+" Blocks scanned)");
				chesttracers.fCheckerThread = null;
				chesttracers.chests = newChests;
				chesttracers.ChestScan.finished = true;
				chesttracers.ChestScan.scanning = false;
			}
		});
		this.fCheckerThread = new java.lang.Thread(finishChecker);
		this.fCheckerThread.start();
	},
	onTick: function () {
		if(this.state) {
			if(this.ChestScan.scanning == false) this.findTick++;

			if(this.findTick >= 33 * this.radius / 3) {
				this.findTick = 0;

				if(this.fCheckerThread == null)
					this.findChests();
			}
			this.chests.forEach(function (entry) {
				let x = getPlayerX() - entry[0] - 0.5;
				let y = getPlayerY() - entry[1] - 0.5;
				let z = getPlayerZ() - entry[2] - 0.5;
				let dist = Math.sqrt(Math.pow(x, 2) * Math.pow(y, 2) * Math.pow(z, 2));
				while(x > 2 || x < -2 || y > 2 || y < -2 || z > 2 || z < -2) {
					x /= 1.5;
					y /= 1.5;
					z /= 1.5;
				}
				Level.addParticle(ParticleType.flame, getPlayerX() - x, getPlayerY() - y - (chesttracers.groundMode ? 0.6 : 0), getPlayerZ() - z, -x / 3, -y / 3, -z / 3, 2);

			});
		}
	},
	onRender: function (gl) {
		if(chesttracers.state && chesttracers.drawBox) {
			chesttracers.chests.forEach(function (entry) {
				Utils.Render.drawBox(gl, entry[0] + 1 / 16, entry[1] + 1, entry[2] + 1 / 16, 1 / 16 * 15, 0.875, 1 / 16 * 15);
			});
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state)
			this.findChests();
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.chestTracer"));
	}
};
DragOP.registerModule(chesttracers);
var criticals = {
	name: DragOP.getLString("hacks.criticals"),
	desc: "Most of your hits will be critical hits!",
	type: ModuleType.mod,
	category: ModCategory.COMBAT,
	state: false,
	tick: 0,
	velTick: 0,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state && this.tick < 25) {
			this.tick++;
			if(this.tick == 16) Entity.setPositionRelative(getPlayerEnt(), 0, 0.001, 0);


			if(this.tick == 15) {
				this.velTick = 15;
			}
			if(this.velTick > 0) {
				this.velTick--;
				setVelY(getPlayerEnt(), -0.000001);
			}

		}
	},
	onAttack: function (att, vic) {
		if(this.state && att == getPlayerEnt() && Entity.getVelY(getPlayerEnt()) >= -0.079 && Entity.getHealth(vic) > 0) {
			//clientMessage(this.tick);
			if(this.tick >= 16)
				this.tick = 0;

		}
	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(DragOP.getLString("hacks.criticals"));
	}
};
DragOP.registerModule(criticals);
var coords = {
	name: DragOP.getLString("hacks.coords"),
	desc: "Displays your coordinates",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	state: false,
	coordGui: null,
	coordView: null,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state && getPlayerEnt() == -1 || getPlayerEnt() == -1)
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					if(coords.coordGui != null) coords.coordGui.dismiss();
				}
			}));
		else if(this.state && tick1 % 8 == 0) {
			this.showGui("X: " + Math.floor(getPlayerX()) + "\nY: " + Math.floor(getPlayerY()) + "\nZ: " + Math.floor(getPlayerZ()));
		}
	},
	showGui: function (text) {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				if(coords.coordGui == null || coords.coordGui.isShowing() == false) {
					let bg = new android.graphics.drawable.GradientDrawable();
					bg.setColor(android.graphics.Color.argb(150, 20, 20, 20));
					bg.setCornerRadius(dip2px(3));
					coords.coordView = new android.widget.TextView(ctx);
					coords.coordView.setTypeface(Utils.font);
					coords.coordView.setTextColor(android.graphics.Color.WHITE);
					coords.coordView.setBackground(bg);
					coords.coordView.setText(text);
					coords.coordGui = new android.widget.PopupWindow(coords.coordView, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					coords.coordGui.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					coords.coordGui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 0, 0);
				} else {
					coords.coordView.setText(text);
				}
			}
		}));

	},
	onClick: function (btn) {
		this.state = !this.state;
		if(!this.state) ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				coords.coordGui.dismiss();
			}
		}));
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.coords"));
	}
};
DragOP.registerModule(coords);
var playerEsp = {
	name: DragOP.getLString("hacks.playerEsp"),
	desc: "Draws a box around players.",
	type: ModuleType.mod,
	category: ModCategory.RENDER,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onRender: function (gl) {
		if(playerEsp.state && getPlayerEnt() != -1 && getPlayerEnt() != -1 && true) {
			let mobs = Utils.Entity.getAll();
			let players = Server.getAllPlayers();

			//clientMessage(mobs.length);
			mobs.forEach(function (entry) {

				if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
					Utils.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.50, 1, 2, 1);

				}
			});
			players.forEach(function (entry) {
				if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
					Utils.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);

				}
			});

			//Utils.Render.drawBox(gl,Player.getPointedVecX()-0.5, Player.getPointedVecY()+1,Player.getPointedVecZ()-0.5, 1, 2, 1);

		}

	},
	onClick: function (btn) {
		this.state = !this.state;
	},
	onRefresh: function (btn) {
		if(btn != null)
			btn.setText(DragOP.getLString("hacks.playerEsp"));
	}
};
DragOP.registerModule(playerEsp);
var nuker = {
	name: DragOP.getLString("hacks.nuker"),
	desc: "Nukes blocks around you.",
	type: ModuleType.mod,
	category: ModCategory.MISC,
	state: false,
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let radiusText = new android.widget.TextView(ctx);
		radiusText.setText("Radius: " + this.radius);
		radiusText.setTextColor(android.graphics.Color.BLACK);
		radiusText.setTextSize(dip2px(9));
		radiusText.setGravity(android.view.Gravity.CENTER);
		radiusText.setTypeface(Utils.font);
		let radiusSlider = Utils.ModSettings.getSlider();
		radiusSlider.setMax(4);
		//rangeSlider.setMin(1);
		radiusSlider.setProgress(this.radius - 2);
		radiusSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				radiusText.setText("Radius: " + (progress + 2));

			},
			onStopTrackingTouch: function (seekbar) {
				nuker.radius = seekbar.getProgress() + 2;
			}
		}));
		settings.addView(radiusSlider, params);
		settings.addView(radiusText, params);


		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	done: true,
	radius: 2,
	onModTick: function () {
		if(this.state == true && this.done == true) {
			let t = new java.lang.Thread(new java.lang.Runnable({
				run: function () {
					nuker.done = false;
					for(let x = -nuker.radius; x < nuker.radius; x++) {
						java.lang.Thread.sleep(20);
						for(let y = -nuker.radius; y < nuker.radius; y++)
							for(let z = -nuker.radius; z < nuker.radius; z++)
								Level.destroyBlock(Math.floor(getPlayerX() + x), Math.floor(getPlayerY() + y), Math.floor(getPlayerZ() + z), false);
					}

					java.lang.Thread.sleep(50);
					nuker.done = true;
				}
			}));
			t.run();
		}
	},
	onClick: function (btn) {
		this.state = !this.state
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(DragOP.getLString("hacks.nuker"));
	}
};
DragOP.registerModule(nuker)
var velocity = {
	name: "Velocity",
	desc: "Disables knockback",
	type: ModuleType.mod,
	category: ModCategory.COMBAT,
	state: false,
	attackTick: 0,
	lastHealth: 0,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onModTick: function () {
		if(!this.state || Entity.getHealth(getPlayerEnt()) <= 0)
			return
		if(this.attackTick > 0)
			this.attackTick--;
		else
			Entity.setImmobile(getPlayerEnt(), false);

		if(this.lastHealth > Entity.getHealth(getPlayerEnt())) {
			Entity.setImmobile(getPlayerEnt(), true);
			this.attackTick = 1;
		}

		this.lastHealth = Entity.getHealth(getPlayerEnt());
	},
	onHurt: function (att, vic, hearts) {
		if(!this.state || (vic != getPlayerEnt()))
			return;
		Entity.setImmobile(getPlayerEnt(), true);
		this.attackTick = 1;
	},
	onClick: function (btn) {
		this.state = !this.state
		this.lastHealth = Entity.getHealth(getPlayerEnt());
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(velocity);
var webbrowser = {
	name: "Webbrowser",
	desc: "Opens the webbrowser",
	type: ModuleType.special,
	browser: null,
	view: null,
	address: null,
	lastUrl: "",
	showBrowser: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				let layout1 = new android.widget.RelativeLayout(ctx);
				webbrowser.view = new android.webkit.WebView(ctx);
				webbrowser.view.getSettings().setJavaScriptEnabled(true);
				webbrowser.view.setWebChromeClient(new android.webkit.WebChromeClient());
				webbrowser.view.setWebViewClient(new android.webkit.WebViewClient());
				webbrowser.view.setId(502103);
				if(webbrowser.lastUrl == "")
					webbrowser.view.loadUrl("https://www.google.com");
				else
					webbrowser.view.loadUrl(webbrowser.lastUrl);
				webbrowser.address = new android.widget.EditText(ctx);
				webbrowser.address.setHint("Enter URL or search something");
				webbrowser.address.setId(598258);
				webbrowser.address.setTextColor(android.graphics.Color.BLACK);
				//webbrowser.address.setImeOptions(android.view.inputmethod.EditorInfo.IME_ACTION_DONE);
				webbrowser.address.setSingleLine(true);
				webbrowser.address.setText(webbrowser.view.getUrl());
				webbrowser.address.setOnKeyListener(new android.view.View.OnKeyListener({
					onKey: function (view, keycode, event) {
						if(keycode == android.view.KeyEvent.KEYCODE_ENTER && event.getAction() == android.view.KeyEvent.ACTION_DOWN) {
							let url = webbrowser.address.getText().toString();
							if(android.util.Patterns.WEB_URL.matcher(url).matches()) {
								if(url.indexOf("http") == -1)
									url = "http://" + url;
								webbrowser.view.loadUrl(url);
							} else {
								webbrowser.view.loadUrl("https://www.google.de/#q=" + (new String(url).replace(new RegExp(" ", 'g'), "+")));
							}
							return true;
						}
						return true;
					}
				}));
				let param = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				layout1.addView(webbrowser.address, param);
				param = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				param.addRule(android.widget.RelativeLayout.BELOW, webbrowser.address.getId());
				layout1.addView(webbrowser.view, param);
				layout1.setBackground(DragOP.getStyledBackground());
				webbrowser.browser = new android.app.Dialog(ctx);
				webbrowser.browser.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				webbrowser.browser.getWindow().setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				webbrowser.browser.setContentView(layout1);
				webbrowser.browser.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {
						webbrowser.lastUrl = webbrowser.view.getUrl();
						showMenu();
					}
				}));
				webbrowser.browser.show();
				let window = webbrowser.browser.getWindow();
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				window.setLayout(mwidth, display.heightPixels);
			}
		}));
	},
	isStateMode: function () {
		return false; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true;
	},
	onClick: function (btn) {
		menu.dismiss();
		this.showBrowser();
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(webbrowser);
if(DragOP.enableFastEat) {
	try {
		var items = "";
		items = Utils.Base64.decode(items);
		let newStr = "",
			leng = 0;
		for(let i in items)
			leng++;
		for(let i = 0; i < leng; i++)
			newStr += String.fromCharCode(items[i]);
		items = newStr;
	} catch(e) {
		DragOP.ctoast("Loading FastEat items not working! FastEat wont work.");
	}
} else
	DragOP.ctoast("FastEat is not enabled! FastEat wont work.");


var fasteat = {
	name: "FastEat",
	desc: "You eat faster.\nEatTime: Time in ticks you need to eat one food Item",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	state: false,
	eatTime: 4,
	refreshFEat: function (eatTime) {
		let t = new java.lang.Thread(new java.lang.Runnable({
			run: function () {
				try {
					items = new org.json.JSONArray(items.toString());
					let curr;
					for(let i = 0; i < items.length(); i++)
						if((curr = items.optJSONObject(i)) && curr.has("use_duration") && curr.getInt("use_duration") <= 32)
							if(curr.put("use_duration", eatTime))
								Item.setProperties(256 + parseInt(curr.getInt("id")), curr.toString() + "");
				} catch(e) {
					DragOP.ctoast("Error!: " + e);
				}
			}
		}));
		t.start();
	},
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let timeText = new android.widget.TextView(ctx);
		timeText.setText("EatTime: " + (this.eatTime));
		timeText.setTextColor(android.graphics.Color.BLACK);
		timeText.setTextSize(dip2px(9));
		timeText.setGravity(android.view.Gravity.CENTER);
		timeText.setTypeface(Utils.font);
		let timeSlider = Utils.ModSettings.getSlider();
		timeSlider.setMax(31);
		//rangeSlider.setMin(1);
		timeSlider.setProgress(this.eatTime - 1);
		timeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {

				timeText.setText("EatTime: " + (progress + 1));

			},
			onStopTrackingTouch: function (seekbar) {
				fasteat.eatTime = seekbar.getProgress() + 1;
				fasteat.refreshFEat(fasteat.eatTime);
			}
		}));
		settings.addView(timeSlider, params);
		settings.addView(timeText, params);


		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		this.state = !this.state
		if(this.state)
			this.refreshFEat(this.eatTime);
		else
			this.refreshFEat(32);
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(fasteat);
var tracers = {
	name: "Tracers",
	desc: "Draws lines from you to your enemy",
	type: ModuleType.mod,
	category: ModCategory.RENDER,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onRender: function (gl) {
		if(!this.state)
			return
		let all = Utils.Entity.getAll();
		let players = Server.getAllPlayers();
		let px = getPlayerX();
		let py = getPlayerY();
		let pz = getPlayerZ();
		all.forEach(function (entry) {
			let x = Entity.getX(entry) - px;
			let y = Entity.getY(entry) - py;
			let z = Entity.getZ(entry) - pz;

			let dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
			
			

			if(dist <= 200 && dist > 0.1 && Entity.getEntityTypeId(entry) <= 63)
				Utils.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
		});
		players.forEach(function (entry) {
			let x = Entity.getX(entry) - px;
			let y = Entity.getY(entry) - py;
			let z = Entity.getZ(entry) - pz;

			let dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));

			if(dist <= 200 && dist > 0.1 && Entity.getEntityTypeId(entry) <= 63)
				Utils.Render.drawLine(gl, px, py + 0.8, pz, Entity.getX(entry), Entity.getY(entry) + 1, Entity.getZ(entry));
		});
	},
	onClick: function (btn) {
		this.state = !this.state
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(tracers);
var fastbridge = {
	name: "FastBridge",
	desc: "You will be teleported to the block you placed",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onUseItem: function (x, y, z, itemid, blockid, side, itemDamage, blockDamage) {
		if(!this.state)
			return;
		if(Math.abs(x - getPlayerX()) > 1.5 || Math.abs(z - getPlayerZ()) > 1.5)
			return;
		if(itemid == 0 || itemid >= 256)
			return;
		switch(side) {
		case BlockFace.NORTH:
			Entity.setPositionRelative(getPlayerEnt(), 0, 0, -1);
			break;
		case BlockFace.SOUTH:
			Entity.setPositionRelative(getPlayerEnt(), 0, 0, 1);
			break;
		case BlockFace.WEST:
			Entity.setPositionRelative(getPlayerEnt(), -1, 0, 0);
			break;
		case BlockFace.EAST:
			Entity.setPositionRelative(getPlayerEnt(), 1, 0, 0);
			break;
		case BlockFace.UP:
			Entity.setPositionRelative(getPlayerEnt(), 0, 1, 0);
			break;
		}
	},
	onClick: function (btn) {
		this.state = !this.state
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(fastbridge);
var spammer = {
	name: "Spammer",
	desc: "Spams a specified text" + (Utils.bypassMode != BypassMode.DEFAULT ? "" : ""),
	type: ModuleType.mod,
	category: ModCategory.MISC,
	state: false,
	lastTime: 0,
	msg: "Spam! Spam! Spam!",
	delay: 100,
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let delayText = new android.widget.TextView(ctx);
		delayText.setText("Delay: " + (this.delay / 1000) + " Seconds");
		delayText.setTextColor(android.graphics.Color.BLACK);
		delayText.setTextSize(dip2px(9));
		delayText.setGravity(android.view.Gravity.CENTER);
		delayText.setTypeface(Utils.font);
		let delaySlider = Utils.ModSettings.getSlider();
		delaySlider.setMax(50);
		//5 seconds
		delaySlider.setProgress(this.delay / 100);
		delaySlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {
				switch(Utils.bypassMode) {
				case BypassMode.LBSG:
					if(progress < 40) {
						progress = 40;
						//DragOP.ctoast("Spammer delay below 4 seconds is not allowed in LBSG Bypass-Mode!");
						seekBar.setProgress(40);
					}
					break;
				}
				delayText.setText("Delay: " + (progress / 10) + " Seconds");

			},
			onStopTrackingTouch: function (seekbar) {
				spammer.delay = seekbar.getProgress() * 100;
			}
		}));
		let spamMsg = new android.widget.EditText(ctx);
		spamMsg.setText(this.msg);
		spamMsg.setGravity(android.view.Gravity.CENTER);
		spamMsg.setTypeface(Utils.font);
		spamMsg.setHint("Text to spam");
		spamMsg.addTextChangedListener(new android.text.TextWatcher({
			afterTextChanged: function (text) {
				spammer.msg = text;
			}
		}));
		settings.addView(delaySlider, params);
		settings.addView(delayText, params);
		settings.addView(spamMsg, params);

		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(!this.state)
			return
		switch(Utils.bypassMode) {
		case BypassMode.DEFAULT:
			if(java.lang.System.currentTimeMillis() - this.lastTime > this.delay) {
				let msg = this.msg;
				if(msg.charAt(0) != "/") {
					msg = msg + "ð";
					msg = msg + Math.random().toString(36).replace(/[^a-z]+/g, '');
				}
				Server.sendChat(msg);
				this.lastTime = java.lang.System.currentTimeMillis();
			}
			break;
		case BypassMode.LBSG:
			if(java.lang.System.currentTimeMillis() - this.lastTime > Math.max(this.delay, 4000)) {
				let msg = this.msg;
				if(msg.charAt(0) != "/") {
					msg = msg + "ð";
					msg = msg + Math.random().toString(36).replace(/[^a-z]+/g, '');
				}
				Server.sendChat(msg);
				this.lastTime = java.lang.System.currentTimeMillis();
			}
			break;
		}

	},
	onClick: function (btn) {
		this.state = !this.state
		this.lastTime = java.lang.System.currentTimeMillis() - 10000;
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}

};

DragOP.registerModule(spammer);
var autowalk = {
	name: "AutoWalk",
	desc: "Makes you walk automatically.",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(!this.state)
			return;
		let vector = new Array();
		let yaw = (getYaw(getPlayerEnt()) + 90) * (Math.PI / 180);
		let pitch = 0;
		vector[0] = Math.cos(yaw) * Math.cos(pitch);
		vector[1] = Math.sin(getPitch(getPlayerEnt()) * (Math.PI / 180) * -1);
		vector[2] = Math.sin(yaw) * Math.cos(pitch);
		Entity.setVelX(getPlayerEnt(), vector[0] * 0.2);
		if(Player.isFlying()) {
			Entity.setVelY(getPlayerEnt(), vector[1] * 0.2);
		}
		Entity.setVelZ(getPlayerEnt(), vector[2] * 0.2);
		//TODO: Fix flying compatibility
	},
	onClick: function (btn) {
		this.state = !this.state
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(autowalk);
var passhack = {
	name: "Passhack",
	desc: "Tries to crack a password.",
	type: ModuleType.mod,
	category: ModCategory.MISC,
	state: false,
	lastTime: 0,
	delay: 100,
	loginPattern: "/login {password}",
	passes: "lol",
	usedPasses: 0,
	downloadPasses: function () {
		let url = "https://raw.githubusercontent.com/danielmiessler/SecLists/master/Passwords/10_million_password_list_top_10000.txt";
		Utils.Url.getUrlContents(url, function (cont, error) {
			if(error != null && error != "") {
				DragOP.ctoast("Pass-DL-Error: " + error);
			} else
				passhack.passes = cont.split("\n");
		});

	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(!this.state || this.passes == "lol")
			return
		if((java.lang.System.currentTimeMillis() - this.lastTime) > 100) {
			let password = this.passes[this.usedPasses];
			this.usedPasses++;
			Server.sendChat(this.loginPattern.replace(new RegExp("{password}", 'g'), password));
			DragOP.cmsg("Tried the " + this.usedPasses + "th password \"" + password + "\"");
			this.lastTime = java.lang.System.currentTimeMillis();
		}
	},
	onClick: function (btn) {
		this.state = !this.state;
		this.usedPasses = 0;
		this.lastTime = java.lang.System.currentTimeMillis() - 10000;
		if(this.state == true)
			if(this.passes == null) {
				DragOP.ctoast("Password list not downloaded yet.\nTrying to download it...");
				this.state = false;
				this.downloadPasses();
			}

	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
passhack.downloadPasses();
DragOP.registerModule(passhack);
var ghostmode = {
	name: "GhostMode",
	desc: "Makes the \"D\" Button invisible",
	type: ModuleType.special,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		this.state = !this.state;
		DragOP.ghostMode = this.state;
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(ghostmode);

var fullbright = {
	name: "Fullbright",
	desc: "Let you see everything.",
	type: ModuleType.mod,
	category: ModCategory.RENDER,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onClick: function (btn) {
		this.state = !this.state;
		Block.setLightLevel(0, this.state ? 15 : 0);
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(fullbright);

var follow = {
	name: "Follow",
	desc: "Follows the nearest entity. This works with Target",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	lastTime: 0,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(!this.state)
			return
			//		if(this.lastTime == 0)
			//			this.lastTime = java.lang.System.currentTimeMillis() - 100;
			//		if(java.lang.System.currentTimeMillis() - this.lastTime > )
		let target = Utils.Entity.getNearestEntity(80);
		let x = getPlayerX();
		let z = getPlayerZ();
		let x2 = Entity.getX(target);
		let z2 = Entity.getZ(target);
		if(Utils.Player.onGround() && getPlayerY() - 1.62 - (Entity.getEntityTypeId(target) == 63 ? Entity.getY(target) - 1.62 : Entity.getY(target)) < -0.8)
			setVelY(getPlayerEnt(), 0.42);
		if(Utils.Player.isInWater() && getPlayerY() - 1.62 - (Entity.getEntityTypeId(target) == 63 ? Entity.getY(target) - 1.62 : Entity.getY(target)) < -0.8)
			setVelY(getPlayerEnt(), 0.3);
		if(Utils.Player.isOnLadder() && getPlayerY() - 1.62 - (Entity.getEntityTypeId(target) == 63 ? Entity.getY(target) - 1.62 : Entity.getY(target)) < -0.2)
			setVelY(getPlayerEnt(), 0.2);
		let dist = Math.sqrt(Math.pow(x - x2, 2) + Math.pow(z - z2, 2));
		if(dist <= 1)
			return;
		setVelX(getPlayerEnt(), -Math.max(-0.35, Math.min(0.35, ((x - x2) / dist) / 3)));
		setVelZ(getPlayerEnt(), -Math.max(-0.35, Math.min(0.35, ((z - z2) / dist) / 3)));
	},
	onClick: function (btn) {
		this.state = !this.state
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(follow);
var lifedisplay = {
	name: "LifeDisplay",
	desc: "Displays your life stats",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	state: false,
	lifeGui: null,
	lifeView: null,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(this.state && getPlayerEnt() == -1 || getPlayerEnt() == -1)
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					if(lifedisplay.lifeGui != null)
						lifedisplay.lifeGui.dismiss();
				}
			}));
		else if(this.state && tick1 % 8 == 0) {
			this.showGui(Entity.getHealth(getPlayerEnt()) + "/" + Entity.getMaxHealth(getPlayerEnt()) + "â¤");
		}
	},
	showGui: function (text) {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				if(lifedisplay.lifeGui == null || lifedisplay.lifeGui.isShowing() == false) {
					let bg = new android.graphics.drawable.GradientDrawable();
					bg.setColor(android.graphics.Color.argb(150, 20, 20, 20));
					bg.setCornerRadius(dip2px(3));
					lifedisplay.lifeView = new android.widget.TextView(ctx);
					lifedisplay.lifeView.setTypeface(Utils.font);
					lifedisplay.lifeView.setTextColor(android.graphics.Color.WHITE);
					lifedisplay.lifeView.setBackground(bg);
					lifedisplay.lifeView.setTextSize(dip2px(19));
					lifedisplay.lifeView.setText(text);
					lifedisplay.lifeGui = new android.widget.PopupWindow(lifedisplay.lifeView, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					lifedisplay.lifeGui.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					lifedisplay.lifeGui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0);
				} else {
					lifedisplay.lifeView.setText(text);
				}
			}
		}));

	},
	onClick: function (btn) {
		this.state = !this.state;
		if(!this.state && this.lifeGui != null)
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					lifedisplay.lifeGui.dismiss();
				}
			}));
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(lifedisplay);

var teleport = {
	name: "Teleport",
	desc: "Teleports you",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	aimedBlock: [0, 0, 0],
	selectedBlock: [0, 0, 0],
	telGui: null,
	telDelay: 100,
	yMotion: true,
	isThreadRunning: false,
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let delayText = new android.widget.TextView(ctx);
		delayText.setText("Delay: " + (this.telDelay / 1000) + " Seconds");
		delayText.setTextColor(android.graphics.Color.BLACK);
		delayText.setTextSize(dip2px(9));
		delayText.setGravity(android.view.Gravity.CENTER);
		delayText.setTypeface(Utils.font);
		let delaySlider = Utils.ModSettings.getSlider();
		delaySlider.setMax(30);
		//3 seconds
		delaySlider.setProgress(this.telDelay / 100);
		delaySlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {
				switch(Utils.bypassMode) {
				case BypassMode.LBSG:
					if(progress < 5) {
						progress = 5;
						//DragOP.ctoast("Spammer delay below 4 seconds is not allowed in LBSG Bypass-Mode!");
						seekBar.setProgress(5);
					}
					break;
				}
				delayText.setText("Delay: " + (progress / 10) + " Seconds");
				if(progress == 0)
					delayText.setText("Delay: Instant");
			},
			onStopTrackingTouch: function (seekbar) {
				teleport.telDelay = seekbar.getProgress() * 100;
			}
		}));

		let yMotCheck = new android.widget.CheckBox(ctx);
		yMotCheck.setGravity(android.view.Gravity.CENTER);
		yMotCheck.setTypeface(Utils.font);
		yMotCheck.setText("YMotion (Deactivate for Fly-Bypass)");
		yMotCheck.setTextColor(android.graphics.Color.BLACK);
		yMotCheck.setChecked(teleport.yMotion);
		yMotCheck.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (view) {
				teleport.yMotion = yMotCheck.isChecked();
			}
		}))

		settings.addView(delaySlider, params);
		settings.addView(delayText, params);
		settings.addView(yMotCheck, params);

		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onModTick: function () {
		if(teleport.threadRunning)
			setVelY(getPlayerEnt(), 0);
	},
	tpThread: function () {
		if(teleport.threadRunning)
			return;
		var t = new java.lang.Thread(new java.lang.Runnable({
			run: function () {
				teleport.threadRunning = true;
				while(teleport.state && (Math.floor(teleport.selectedBlock[0]) != Math.floor(getPlayerX()) || (Math.floor(teleport.selectedBlock[1] + 2.8) != Math.floor(getPlayerY()) && teleport.yMotion) || Math.floor(teleport.selectedBlock[2]) != Math.floor(getPlayerZ()))) {
					java.lang.Thread.sleep(teleport.telDelay);
					if(!teleport.state)
						break;
					let x = getPlayerX();
					let y = getPlayerY();
					let z = getPlayerZ();
					let x2 = teleport.selectedBlock[0];
					let y2 = teleport.selectedBlock[1] + 2.8;
					let z2 = teleport.selectedBlock[2];
					//let dist = Math.sqrt(Math.pow(x2 - x, 2) * Math.pow(y2 - y, 2) * Math.pow(z2- z, 2));
					//if(dist < 0.1)
					//break;
					Entity.setPositionRelative(getPlayerEnt(), -Math.max(-3, Math.min(3, x - x2)), teleport.yMotion ? -Math.max(-2, Math.min(2, y - y2)) : 0, -Math.max(-3, Math.min(3, z - z2)));

				}
				teleport.threadRunning = false;
			}
		}));
		t.start();
	},
	showGui: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				if(teleport.telGui == null || teleport.telGui.isShowing() == false) {
					let setPosBtn = new android.widget.Button(ctx);
					setPosBtn.setTypeface(Utils.font);
					setPosBtn.setText("Set Position");
					setPosBtn.getBackground().setAlpha(200);
					setPosBtn.setPadding(10, 10, 10, 10);
					setPosBtn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (btn) {
							if(teleport.aimedBlock[1] <= 0) {
								DragOP.cmsg("Please select a valid Position");
								return;
							}
							teleport.selectedBlock = teleport.aimedBlock;
							//Entity.setPosition(getPlayerEnt(), teleport.aimedBlock [0] + 0.5, teleport.aimedBlock[1] + 2.1, teleport.aimedBlock[2] + 0.5);
							teleport.tpThread();

						}
					}));
					teleport.telGui = new android.widget.PopupWindow(setPosBtn, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					teleport.telGui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 0, -dip2px(50));
				}
			}
		}));

	},
	startRayTr: function () {
		var t = new java.lang.Thread(new java.lang.Runnable({
			run: function () {
				while(teleport.state) {
					if(teleport.threadRunning == true)
						continue;
					Timings.startTiming("teleport-rayTrThread");
					let yaw = (getYaw() + 90) * (Math.PI / 180);

					let pitch = getPitch() * -(Math.PI / 180);
					var dir = [
						Math.cos(yaw) * Math.cos(pitch),
						Math.sin(pitch),
						Math.sin(yaw) * Math.cos(pitch)
					];
					var res = Utils.Block.rayTrace([
						dir[0], dir[1], dir[2]
					], [getPlayerX(), getPlayerY() + 0.0, getPlayerZ()], 100);
					if(res.hit) {
						teleport.aimedBlock = [res.x, res.y, res.z];
					} else {
						teleport.aimedBlock = [0, 0, 0];
					}
					Timings.stopTiming("teleport-rayTrThread");
				}
			}
		}));
		t.start();
	},
	onRender: function (gl) {
		if(teleport.state && teleport.aimedBlock[1] > 0)
			Utils.Render.drawBox(gl, teleport.aimedBlock[0], teleport.aimedBlock[1] + 1, teleport.aimedBlock[2], 1, 1, 1);
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state) {
			this.startRayTr();
			this.showGui();
		} else
		if(teleport.telGui != null && teleport.telGui.isShowing() == true)
			teleport.telGui.dismiss();
	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(teleport);
var sbind = {
	name: "SimpleBind",
	desc: "Adds a button which can toggle a module without being in the menu.",
	type: ModuleType.special,
	state: false,
	currentModule: null,
	sgui: null,
	sbtn: null,
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let scroll = new android.widget.ScrollView(ctx);
		let modList = new android.widget.LinearLayout(ctx);
		modList.setOrientation(1);
		DragOP.mods.forEach(function (entry) {
			if(entry.type == ModuleType.mod) {
				let btn = new android.widget.Button(ctx);
				btn.setText(entry.name);
				btn.setTypeface(Utils.font);
				btn.setTextColor(android.graphics.Color.BLACK);
				btn.setBackground(sbind.currentModule == null ? disabledGradient : sbind.currentModule.name == entry.name ? enabledGradient : disabledGradient);
				btn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						sbind.currentModule = entry;
						let childct = modList.getChildCount();
						for(let i = 0; i < childct; i++) {
							let v = modList.getChildAt(i);
							v.setBackground(sbind.currentModule == null ? disabledGradient : sbind.currentModule.name == v.getText() ? enabledGradient : disabledGradient);
						}
						sbind.showBtn();
					}
				}));
				modList.addView(btn);
			}
		});
		scroll.addView(modList);
		settings.addView(scroll);
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	showBtn: function () {
		ctx.runOnUiThread(new java.lang.Runnable({
			run: function () {
				if(sbind.sgui == null || sbind.sgui.isShowing() == false) {
					let bg = DragOP.getStyledBtnBackground(false, false);
					if(sbind.currentModule.isStateMode())
						bg = DragOP.getStyledBtnBackground(sbind.currentModule.state, true);
					bg.setCornerRadius(dip2px(3));
					sbind.sbtn = new android.widget.Button(ctx);
					sbind.sbtn.setTypeface(Utils.font);
					sbind.sbtn.setTextColor(android.graphics.Color.WHITE);
					sbind.sbtn.setBackground(bg);
					sbind.sbtn.setText(sbind.currentModule.name);
					sbind.sbtn.setOnClickListener(new android.view.View.OnClickListener({
						onClick: function (view) {
							sbind.currentModule.onClick(null);
							sbind.showBtn();
						}
					}));
					let moving2 = false;
					let dx2 = 0;
					let dy2 = 0;
					let mPosX2 = 100;
					let mPosY2 = 0;
					sbind.sbtn.setOnTouchListener(new android.view.View.OnTouchListener({
						onTouch: function (view, motionEvent) {
							try {
								if(!moving2) return false;
								switch(motionEvent.getAction()) {
								case android.view.MotionEvent.ACTION_DOWN:
									dx2 = mPosX2 - motionEvent.getRawX();
									dy2 = mPosY2 - motionEvent.getRawY();
									break;
								case android.view.MotionEvent.ACTION_MOVE:
									mPosX2 = (motionEvent.getRawX() + dx2);
									mPosY2 = (motionEvent.getRawY() + dy2);
									sbind.sgui.update(mPosX2, mPosY2, -1, -1);
									break;
								case android.view.MotionEvent.ACTION_UP:
								case android.view.MotionEvent.ACTION_CANCEL:
									moving2 = false;
									break;
								}
							} catch(e) {
								DragOP.ctoast("Error: " + e);
							}

							return true;
						}
					}));
					sbind.sbtn.setOnLongClickListener(new android.view.View.OnLongClickListener({
						onLongClick: function (v, t) {
							ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
								.vibrate(60);
							moving2 = true;
							return true;
						}
					}));
					sbind.sgui = new android.widget.PopupWindow(sbind.sbtn, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
					sbind.sgui.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
					sbind.sgui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
						.getDefaultDisplay()
						.getWidth() / 16 * 0, ctx.getWindowManager()
						.getDefaultDisplay()
						.getHeight() / 2);
				} else {
					sbind.sbtn.setText(sbind.currentModule.name);
					let bg = DragOP.getStyledBtnBackground(false, false);
					if(sbind.currentModule.isStateMode())
						bg = DragOP.getStyledBtnBackground(sbind.currentModule.state, true);
					bg.setCornerRadius(dip2px(3));
					sbind.sbtn.setBackground(bg);

				}
			}
		}));
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state) {
			DragOP.showModDialog(this);
			menu.dismiss();
		} else {
			sbind.currentModule = null;
			if(sbind.sgui != null && sbind.sgui.isShowing())
				sbind.sgui.dismiss();
		}


	},
	onRefresh: function (btn) {
		if(btn != null) btn.setText(this.name);
	}
};
DragOP.registerModule(sbind);
var autosword = {
	name: "AutoSword",
	desc: "Automatically selects the best sword in your hotbar if an enemy is near you",
	type: ModuleType.mod,
	category: ModCategory.COMBAT,
	state: false,
	isTrRunning: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	startThread: function(){
		if(autosword.isTrRunning)
			return;
		let t = new java.lang.Thread(new java.lang.Runnable({
			run: function(){
				autosword.isTrRunning = true;
				while(autosword.state){
					if(Utils.Entity.getNearestEntity(5, true) != null){
						let bestsword = [-1, -1];
						for(let i = 0; i < 10; i++){
							let dmg = Utils.Item.getDamage(Player.getInventorySlot(i));
							if(dmg > bestsword[0]){
								bestsword[0] = dmg;
								bestsword[1] = i;
							}
						}
						if(bestsword[1] != -1)
							Player.setSelectedSlotId(bestsword[1]);
					}
					java.lang.Thread.sleep(50);
				}
				autosword.isTrRunning = false;
			}
		}));
		t.start();
	},
	onClick: function (btn) {
		this.state = !this.state;
		if(this.state)
			this.startThread();
	},
	onRefresh: function (btn) {
		if(btn != null)btn.setText(this.name);
	}
};
DragOP.registerModule(autosword);

var singsong = {
	name: "SingSong",
	desc: "Choose a song and let the mod sing for you.",
	type: ModuleType.special,
	category: ModCategory.MISC,
	state: false,
	lastTime: 0,
	selectedSong: [0, -1], //[song index, word index]
	delay: 1500,
	songList: [//[song name, song text splitted with \n]
	           ["Adele - Hello", "Hello,\nit's me\nI was wondering if after all these years\nYou'd like to meet,\nto go over\nEverything\n\nThey say that time's supposed to heal ya\nBut I ain't done much healing\nHello, can you hear me?\nI'm in California dreaming about who we used to be\n\nWhen we were younger\nand free\n\nI've forgotten how it felt before the world fell at our feet\nThere's such a difference\nbetween us\nAnd a million miles\n\nHello from the other side\nI must've called a thousand times\nto tell you I'm sorry\nfor everything that I've done\n\nBut when I call you never\nseem to be home\nHello from the outside\nAt least I can say that I've tried\nto tell you I'm sorry\nfor breaking your heart\nBut it don't matter,\nit clearly doesn't tear you apart anymore\n\nHello\nhow are you?\nIt's so typical of me to talk about myself\nI'm sorry\n\nI hope\nthat you're well\nDid you ever make it out of that town\nWhere nothing ever happened?\nIt's no secret\nThat the both of us are running out of time\nHello from the other side\nI must've called a thousand times\nto tell you I'm sorry\nfor everything that I've done\nBut when I call you never seem to be home\n\nHello from the outside\nAt least I can say that I've tried\nto tell you I'm sorry\nfor breaking your heart\nBut it don't matter,\nit clearly doesn't tear you apart anymore\nOoooohh, anymore\nOoooohh, anymore\nOoooohh, anymore\nAnymore\n\nHello from the other side\nI must've called a thousand times\nto tell you I'm sorry\nfor everything that I've done\nBut when I call you never seem to be home\nHello from the outside\nAt least I can say that I've tried\nto tell you I'm sorry\nfor breaking your heart\nBut it don't matter, it clearly doesn't tear you apart anymore".split("\n")],
	           ["Rag'n'Bone Man - Human", "Maybe I'm foolish, maybe I'm blind\nThinking I can see through this and see what's behind\nGot no way to prove it so maybe I'm blind\nBut I'm only human after all, I'm only human after all\nDon't put your blame on me\nTake a look in the mirror and what do you see\nDo you see it clearer or are you deceived in what you believe\nCos I'm only human after all, you're only human after all\nDon't put the blame on me\nDon't put your blame on me\nSome people got the real problems\nSome people out of luck\nSome people think I can solve them\nLord heavens above\nI'm only human after all, I'm only human after all\nDon't put the blame on me\nDon't put the blame on me\nDon't ask my opinion, don't ask me to lie\nThen beg for forgiveness for making you cry, making you cry\nCos I'm only human after all, I'm only human after all\nDon't put your blame on me, don't put the blame on me\nSome people got the real problems\nSome people out of luck\nSome people think I can solve them\nLord heavens above\nI'm only human after all, I'm only human after all\nDon't put the blame on me\nDon't put the blame on me\nI'm only human I make mistakes\nI'm only human that's all it takes to put the blame on me\nDon't put your blame on me\nI'm no prophet or messiah\nShould go looking somewhere higher\nI'm only human after all, I'm only human after all\nDon't put the blame on me, don't put the blame on me\nI'm only human I do what I can\nI'm just a man, I do what I can\nDon't put the blame on me\nDon't put your blame on me".split("\n")],
	           ["Beginner - Ahnma", "Ey yo, ich komm mit groÃem Herz und Pauken und Trompeten\nfÃ¼r die Obernerds und die saufenden Proleten\nDie Messdiener, Crackdealer, Alt-68er\nalle sind happy, denn der Testsieger rappt wieder\nEizi Eiz - heiÃer ScheiÃ!\nJeder, den du kennst, kennt eine meiner Lines\nHammertyp, Hammerflow, HammersprÃ¼che\nDarum hÃ¤ngt mein Bild in Marsimotos Mamas KÃ¼che\nSchreib Gedichte, schreib damit Geschichte\nJeder, der mich disste, ist bereits Geschichte\nAlter, ich kam schon mit K-Zwo und Hammerhart,\nals ihr noch irgendwo im Sack von eurem Vadder wart\nDer Veteran von der Reeperbahn\nHab Hamburg hinter mi als wÃ¤r ich Uwe Seeler, man\nUnd die Sonnenbrille - sie ist am Start, Baby\nSie ist der letzte Rest PrivatsphÃ¤re\nWas los Digger, Ahnma\nWie wir gucken, wie wir labern\nJeder sagt Digger heutzutage\nWir packen Hamburg wieder auf die Karte\nWas los Digger, Ahnma\nWie wir gucken, wie wir labern\nJeder sagt Digger heutzutage\nWir packen Hamburg wieder auf die Karte\nDem can't get we out\nNo matter how dem gon' shout\nDa one ya name trample all doubt\nDem can't get we out\nStill around, still I move the crowd\nFrom Hamburg way down to south\nIch komm mit groÃem Herz, dickem Kopf und kleinem Bauch\nWortgewalttÃ¤tig, aber masterpeacig drauf\nTriple A Pass - fremd im eigenem Land\nFette Anlageberater - Afrodeutsche Bank\nDenyo - ich komme rein\nHalt ne Basspredigt und die Sonne scheint\nWas Rap ist in der Sinnkrise?\nGuck, wie ich es hinbiege, mit Armen wie Tim Wiese\nIst n positiver Film den ich schieb, Typ\nVom Eppendorfer Weg bis zur Beatstreet\nHier kommt die Band mit Geschmack\nwenn jeder Jens Peter einen auf Endgegner macht\nUnd irgendwo zwischen Itzehoe und Idaho\nkommt noch einer mit Jason Derulo featuring Tyga Flow\nIs leider so - fÃ¼r uns n Haufen Scherben\ndoch wir lassen uns die legendÃ¤re Stimmung nicht verderben\nWas los Digger, Ahnma\nWie wir gucken, wie wir labern\nJeder sagt Digger heutzutage\nWir packen Hamburg wieder auf die Karte\nWas los Digger, Ahnma\nWie wir gucken, wie wir labern\nJeder sagt Digger heutzutage\nWir packen Hamburg wieder auf die Karte\nDem can't get we out\nNo matter how dem gon' shout\nDa one ya name trample all doubt\nDem can't get we out\nStill around, still I move the crowd\nFrom Hamburg way down to south".split("\n")],
	           ["Scooter - Hyper Hyper", "Miscellaneous\nHyper Hyper\nIs everybody on the floor?\nWe put some energy into this place!\nI want to ask you something...\nAre you ready for the sound of Scooter?\nI want to see you sweat\nI said... I want to see you sweat!\nYeaah.\nHyper, hyper!\nHyper, hyper!\nHyper, hyper!\nExcuse me! Where is the bass drum?\nWe need the bass drum!\nCome on!\nHyper, hyper!\nHyper, hyper!\nIt's so beautiful to see your hands in the air!\nPut your hands in the air!\nCome on!\nThis is Scooter!\nWe want to sing a big shout to US, and to all ravers in the world!\nAnd to Westbam, Marusha, Steve Mason, The Mystic Man, DJ Dick, Carl Cox, The Hooligan, Cosmic...\nKid Paul, Dag, Mike VanDike, Jens Lissat, Lenny D., Sven Vath, Mark Spoon, Marco Zaffarano...\nHell, Paul Elstac, Mate Galic, Roland Casper, Sylvie, Miss Djax, Jens Mahlstedt, Tanith, Laurent Garnier...\nSpecial, Pascal F.E.O.S., Gary D., Scotty, Gizmo... and to all DJs all over the World!\nKeep the Vibes... Hyper, hyper!\nHyper, hyper!\nHyper, hyper!\nI'll have to ask you again...\nDo you like it hardcore?\nDo you like it hardcore?\nWe need the hardcore!\nCome on! Come on! Come on!\nHyper, hyper!\nSit there.\nBe good.\nBye, Bye!".split("\n")],
	           ["Justin Bieber - Baby", "Ohh wooaah Ohh wooaah Ohh wooaah\nYou know you love me, I know you care\nJust shout whenever, And I'll be there\nYou are my love, You are my heart\nAnd we will never ever-ever be apart\nAre we an item. Girl quit playing\n\"We're just friends\"\nWhat are you sayin?\nsaid theres another and look right in my eyes\nMy first love broke my heart for the first time,\nAnd I was like\nBaby, baby, baby ooh\nLike baby, baby, baby noo\nLike baby, baby, baby ooh\nThought you'd always be mine, mine\nBaby, baby, baby oohh\nLike baby, baby, baby noo\nLike baby, baby, baby ohh\nThought you'd always be mine, mine\nFor you, i would have done what ever\nAnd I just cant believe we ain't together\nAnd I wanna play it cool, But I'm losing you\nI'll buy you anything, ill buy you any ring\nAnd I'm in pieces, Baby fix me\nand just shake me til' you wake me from this bad dream\nI'm going down, down, down, down\nAnd I just can't believe, my first love won't be around\nAnd I'm like,\nBaby, baby, baby oooh\nLike baby, baby, baby noo\nLike baby, baby, baby ooh\nThought you'd always be mine, mine\nBaby, baby, baby oooh\nLike baby, baby, baby noo\nLike baby, baby, baby ooh\nThought you'd always be mine, mine\nLuda, When I was thirteen, I had my first love\nThere was nobody that compaired to my baby\nAnd nobody came between us\nor could ever come above\nShe had me going crazy\nOh I was starstruck\nShe woke me up daily\nDon't need no Starbucks\nShe make my heart pound\nand skip a beat when I see her in the street\nand, At school, on the playground\nBut I really wanna see her on the weekend\nShe know she got me dazing\nCuz she was so amazing\nAnd now, my heart is breakin'\nBut I just keep on sayin'\nBaby, baby, baby ohh\nLike baby, baby, baby noo\nLike baby, baby, baby ohh\nThought you'd always be mine, mine\nBaby, baby, baby ooh\nLike baby, baby, baby noo\nLike baby, baby, baby oooh\nThought you'd always be mine, mine\n(Now I'm all gone)\nYeah, Yeah, Yeah\nYeah Yeah Yeah\n(Now I'm all gone)\nYeah, Yeah, Yeah\nYeah, Yeah, Yeah\n(Now I'm all gone)\nYeah, Yeah, Yeah\nYeah, Yeah, Yeah\nNow I'm all gone, gone, gone, ooh\nI'm gone".split("\n")],
	           ["Robin Schulz - Sugar", "She got cherry lips\nAngel eyes\nShe knows exactly how to tantalize\nShe's out to get you, danger by design\nCold blooded vixen, she don't compromise\nShe's optimistic of the coded lights\nSo far from typical, but take my advice\nBefore you play with fire, do things twice\nAnd if you get burned, don't be surprised\nGot me tripping higher than the ceiling\nOoh baby it's the ultimate feeling\nYou got me lifted feeling so gifted\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nWe're talking lady\nLove how you in tight\nSugar we're just a rider, man spies\nSean Penn a little bit ethic, one's desire\nShe's out to get you, you can't burn, you can't hide\nShe's optimistic of the coded lights\nSo far from typical, but take my advice\nBefore you play with fire, do things twice\nAnd if you get burned, don't be surprised\nGot me tripping higher than the ceiling\nOoh baby it's the ultimate feeling\nYou got me lifted feeling so gifted\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nBut you won't get me tonight\nGot me tripping higher than the ceiling\nOoh baby it's the ultimate feeling\nYou got me lifted feeling so gifted\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly\nSugar how you get so fly".split("\n")],
	           ["Cash Cash - Millionaire", "I feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nShe smell like money when she walk by\nAll heat, no smoke, but she on fire\nIf they suicide doors, then she gon' ride\nShe got that passport pussy cause she\ndon't fly, no love\nShe gon' make you pay to see you work it\nShe only twerk it for a Birkin\nI gotta see if shawty worth it\nHey, she must be the money\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nShawty work her way, the way she go down\nShawty worth her weight, her weight in gold pounds\nCall me young money, put that milli on me\nShe gon' make you pay to see you work it\nShe only twerk it for a Birkin\nI gotta see if shawty worth it\nHey, she must be the money\nShe must be the money\nShe only looking like money\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound\nI feel like a\nI feel like a\nI feel like a\nI feel like a millionaire\nI feel like a millionaire\nI feel like a millionaire\nWhenever she comes around\nWhenever I hear her sound".split("\n")],
	           ["Scooter - Bigroom Blitz", "Chapter five\nBigroom blitz\nInternational bitch\nIt's, it's the bigroom blitz\nTurn it up\nShotta got the plan, man\nAlways like a Grand Slam\nBig shot, hole in one\nShotalot is on the run\nCrack of the whip, snap attack\nBars so tight front to back\nI reach my fate at the gates\nGod says Shotta you was great\nWhen I'm shopping\nAnd my bad filled with options\nSo don't ask what it cost\nI'm in a Maserati coupe\nGoin' so fast that I lost 'em\nAnd my bitch got so much swag\nThat these bad bitches on us\nAh, killin' y'all, pow\nBigroom blitz\nIt's, it's the bigroom blitz\nBring the noise\nI jack them hoes, direct them hoes\nTake 'em home and let them hoes\nGo live out their fantasies\nThey're popping pills, I'm rolling weed\nEven got a couple bad bitches overseas\nShotta got the slo-mo\nYou can call it pro flow\nEvery shot a straight flush\nShotalot is in a rush\nBack on the floor, lyrical madness\nOn the mic, Jack the cactus\nReach my fate at the gates\nGod says Shotta you was great\nShotta got the chicks\nIt's, it's the bigroom blitz\nHee-haa\nYeah\nNobody's hotter than Shotta\nThank you".split("\n")],
	           ["257ers - Holz", "Ich und mein Holz\nIch und mein Holz\nOk der Song beginnt, und er bekommt ein Thema\nIch und mein Holz\nUnd das Thema heute, es heiÃt Holz\nIch und mein, ich und mein Holz\nHolz sieht sehr schÃ¶n aus, Holz ist vielseitig\nIch und mein Holz\nDu kannst es verbrennen, du kannst es sÃ¤gen\nIch und mein, ich und mein Holz\nJa, wenn du es verbrennst, dann spendet es WÃ¤rme\nIch und mein, ich und mein Holz\nAber wenn du es sÃ¤gst, dann nicht, oh\nUnd jetzt mal alle in this wood, yo\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nIch und mein Holz, best friends forever\nHdgdl, wir sind unzertrennlich\nUnverstÃ¤ndlich warum heutzutage nicht jeder Besitzer eines wunderbaren Exemplarers Holz sein will\nund nicht nur weil man es sich wunderschÃ¶n ins Wohnzimmer stellen kann\nNein, man kann es auch lackieren\nSo und jetzt nochmal alle in this wood, yo\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nMit Holz kann man voll gut nen Staudamm bauen\nund wenn der Stau dann bricht ihm auch vertrauen,\ndenn das ist crazy dieses Zeug, rettet nÃ¤mlich Leute,\nwie die Baywatch flitchen oder dieser David Hasselholt\nDu hast ein (Paysi Pet?) aus Gold, ich bin auf KettensÃ¤ge stolz\nDer (?) Proll, ich bin kein (?) unters Volk\n(?) am Holz vor GebrauchsgegenstÃ¤nde\nEs beginnt ein neues Leben, wenn ein Baumleben endet\nMeine Bank, mein Tisch, meine Treppe, meine Besen,\nmeine Vase, dein Zuhause, mein Kopf\nMeine Gedanken, mein Herz, mein Leben,\nmeine Welt ist der schwerste und der heftigste Stock\nPut your hands in the air\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nIch und mein Holz, ich und mein Holz (Holzi, Holzi, Holz)\nIch und mein Holz, ich und mein Holz\nIch und mein, ich und mein Holz, mein Holz\nIch und mein Holz, ich und mein Holz\nIch und mein Holz, ich und mein Holz\nIch und mein Holz, ich und mein Holz\nIch und mein Holz, ich und mein Holz".split("\n")],
	           ["Anthony B - Smoke Weed Everyday", "da da da da daaaa it's tha motha fuckin' D O double G (Snoop dogg) da da da da daaaa You know im mobbin' with the D.\nR.\nyeah yeah yeah you know who's back up in this mothafucker\nWhat what what what\nso blaze the weed out there\nBlaze it up\nBlaze that shit up nigga Yeah waz up snoop\none: Top dogg buy them all nigga burn this shit up D-P-G-C my nigga turn that shit up CPT, LBC yeah we hookin' back up N' when they bang this in the club baby you gotta get up thug niggas, drug dealers yeah they givin' it up low life, your life boy we livin' it up take a chance thats why we dancin' in the party fo' sho' slip my ho a fourty four n' she crept in it back do' bitches lookin' at me strange but you know i don't care step up in this mothafucker just to swingin' my hair Bitch quit talkin' Crip walk If you down with the set Take a Bullet with some dick take this dope from this jet outta town put it down for father of rap n' if your ass get crack bitch shut your trap come back get back thats the part of success n' if you believe the X then you'll relievin' your stress\nmusic in between\nda da da da daaaa\nit's the mothafuckin' D-R-E\nDr.\nDre mothafucker what what what what\nda da da da daaaa\ntwo: you know im mobbing with the D O double G Straight off the fuckin' street's of CPT King of the beats n' you ride to em' in your fleet wood or Coupe De\nVille rollin on dubs How you feel?\nWhoopty whoop nigga what?\nDre n' snoop chronic'ed out In the 'llac with doc in the back Sippin' 'gnac, clip in the strap Dippin' through hoods What hoods?\nCompton, longbeach, ingelwood South central out to the westside (westside) It's california love this california bud Got a nigga gang of pub I'm on one, I might bail up in the Century Club With my jeans on n' my team's strong Get my drink on n' my smoke on Then go home with somethin' to poke on (waz up bitch) Loc' it's on for the two tripple oh Comin' real it's the next episode *\nhold up.\nheeeeey For my niggas who be thinkin' we soft We don't.\nplaaaay We gonna rockin' til the weels fall of Hold up.\nheeeeey For my niggas who be acting to bold Take a.\nseeeeat Hope you ready for the next episode heeeeeey".split("\n")],
	           ["Critical Hit - Pokemon Main Theme", "I wanna be the very best,\nLike no one ever was.\nTo catch them all is my real test,\nTo train them is my cause.\nI will travel across the land,\nSearching far and wide.\nTeach Pokemon to understand\nThe power that's inside\nPokemon, gotta catch them all its you and me\nI know its my destiny\nPokemon, oh, you're my best friend\nIn a world we must defend\nPokemon, gotta catch them all a heart so true\nOur courage will pull us through\nYou teach me and I'll teach you\nPo-ke-mon Gotta catch 'em all\nEvery challenge along the way\nWith courage I will face\nI will battle every day\nTo claim my rightful place\nCome with me, the time is right\nThere's no better team\nArm in arm we'll win the fight\nIt's always been our dream\nPokemon!\nGotta catch 'em all\nIt's you and me\nI know it's my destiny\nPokemon!\nOh, you're my best friend,\nIn a world we must defend.\nPokemon!\nA heart so true.\nOur courage will pull us through.\nYou teach me and I'll teach you.\nPokemon!\nGotta catch 'em all\nGotta catch 'em all\nGotta catch 'em all\nGotta catch 'em all\nGotta catch 'em all\nYeah!\nPokemon!\nIt's you and me\nI know it's my destiny\nPokemon!\nOh, you're my best friend,\nIn a world we must defend.\nPokemon!\nA heart so true.\nOur courage will pull us through.\nYou teach me and I'll teach you.\nPOKEMON!\nGotta catch 'em all\nGotta catch 'em all\nPokemon!".split("\n")],
	           ["Sia - Cheap Thrills", "Come on, come on, turn the radio on\nIt's Friday night and I won't be long\nGotta do my hair, I put my make up on\nIt's Friday night and I won't be long\nTil I hit the dance floor\nHit the dance floor\nI got all I need\nNo I ain't got cash\nNo I ain't got cash\nBut I got you baby\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nBut I don't need no money\nAs long as I can feel the beat\nI don't need no money\nAs long as I keep dancing\nCome on, come on, turn the radio on\nIt's Saturday and I won't be long\nGotta paint my nails, put my high heels on\nIt's Saturday and I won't be long\nTil I hit the dance floor\nHit the dance floor\nI got all I need\nNo I ain't got cash\nNo I ain't got cash\nBut I got you baby\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nBut I don't need no money\nAs long as I can feel the beat\nI don't need no money\nAs long as I keep dancing\nI love cheap thrills\nI love cheap thrills\nI don't need no money\nAs long as I can feel the beat\nI don't need no money\nAs long as I keep dancing\nOh, oh\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nBaby I don't need dollar bills to have fun tonight\nI love cheap thrills\nI don't need no money\nAs long as I can feel the beat\nI don't need no money\nAs long as I keep dancing\nLa, la, la, la, la, la\nI love cheap thrills\nLa, la, la, la, la, la\nI love cheap thrills\nLa, la, la, la, la, la\nI love cheap thrills\nLa, la, la, la, la\nI love cheap thrills".split("\n")],
	           ["PSY - Gangnam Style", "Oppan Gangnam style\nGangnam style\nNajeneun ttasaroun inganjeokin yeoja\nKeopi hanjaneu yeoyureul aneun pumgyeok inneun yeoja\nBami omyeon simjangi tteugeowojineun yeoja\nGeureon banjeon inneun yeoja\nNaneun sanai\nNajeneun neomankeum ttasaroun geureon sanai\nKeopi sikgido jeone wonsyat ttaerineun sanai\nBami omyeon simjangi teojyeobeorineun sanai\nGeureon sanai\nAreumdawo sarangseureowo\nGeurae neo, hey, geurae baro neo, hey\nAreumdawo sarangseureowo\nGeurae neo, hey, geurae baro neo, hey\nJigeumbuteo gal ddekkaji gabolkka\nOppan Gangnam style\nGangnam style\nOp, op, op, op\nOppan Gangnam style\nGangnam style\nOp, op, op, op\nOppan Gangnam style\nEeeeeh, sexy lady\nOp, op, op, op\nOppan Gangnam style\nEeeeeh, sexy lady\nOp, op, op, op\nEh-eh, eh-eh-eh-eh\nJeongsukhae boijiman nol ttaen noneun yeoja\nIttaeda sipeumyeon mukkeotdeon meori puneun yeoja\nGaryeotjiman wenmanhan nochulboda yahan yeoja\nGeureon gamgakjeogin yeoja\nNaneun sanai\nJeomjanha boijiman nol ttaen noneun sanai\nTtaega doemyeon wanjeon michyeobeorineun sanai\nGeunyukboda sasangi ultungbultunghan sanai\nGeureon sanai\nAreumdawo sarangseureowo\nGeurae neo, hey, geurae baro neo, hey\nAreumdawo sarangseureowo\nGeurae neo, hey, geurae baro neo, hey\nJigeumbuteo gal ddekkaji gabolkka\nOppan Gangnam style\nGangnam style\nOp, op, op, op\nOppan Gangnam style\nGangnam style\nOp, op, op, op\nOppan Gangnam style\nEeeeeh, sexy lady\nOp, op, op, op\nOppan Gangnam style\nEeeeeh, sexy lady\nOp, op, op, op\nEh-eh, eh-eh-eh-eh\nTtwineun nom geu wiae naneun nom\nBaby, baby, naneun mwol jom aneun nom\nTtwineun nom geu wiae naneun nom\nBaby, baby, naneun mwol jom aneun nom\nYou know what I'm saying\nOppan Gangnam style\nEh-eh, eh-eh-eh-eh\nEeeeeh, sexy lady\nOp, op, op, op\nOppan Gangnam style\nEeeeeh, sexy lady\nOp, op, op, op\nEh-eh, eh-eh-eh-eh\nOppan Gangnam style".split("\n")]
	           ],
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let delayText = new android.widget.TextView(ctx);
		delayText.setText("Delay: " + (this.delay / 1000) + " Seconds");
		delayText.setTextColor(android.graphics.Color.BLACK);
		delayText.setTextSize(dip2px(9));
		delayText.setGravity(android.view.Gravity.CENTER);
		delayText.setTypeface(Utils.font);
		let delaySlider = Utils.ModSettings.getSlider();
		delaySlider.setMax(50);
		//5 seconds
		delaySlider.setProgress(this.delay / 100);
		delaySlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {
				switch(Utils.bypassMode) {
				case BypassMode.LBSG:
					if(progress < 40) {
						progress = 40;
						//DragOP.ctoast("Spammer delay below 4 seconds is not allowed in LBSG Bypass-Mode!");
						seekBar.setProgress(40);
					}
					break;
				default:
					if(progress < 1)
						seekBar.setProgress(1);
				}
				delayText.setText("Delay: " + (progress / 10) + " Seconds"+(Utils.bypassMode == BypassMode.LBSG?" (LBSG Bypass)":""));

			},
			onStopTrackingTouch: function (seekbar) {
				singsong.delay = seekbar.getProgress() * 100;
			}
		}));
		let songNames = [];
		singsong.songList.forEach(function(entry, index){
			songNames.push(singsong.songList[index][0]);
		});
		let spinner = new android.widget.Spinner(ctx);
		let arrAdapter = new android.widget.ArrayAdapter(ctx, android.R.layout.simple_spinner_item, songNames);
		arrAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		spinner.setAdapter(arrAdapter);
		spinner.setSelection(singsong.selectedSong[0]);
		spinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener({
			onItemSelected: function(parent, v, pos, id){
				if(singsong.selectedSong[0] == pos)
					return;
				if(singsong.selectedSong[1] > -1)
					DragOP.cmsg("Started playing");
				singsong.selectedSong[0] = pos;
				singsong.selectedSong[1] = -1;
				sing.setText((singsong.selectedSong[1] == -1?"Start":"Stop") + " playing");
				sing.setBackground(singsong.selectedSong[1] == -1?disabledGradient:enabledGradient);
			},
			onNothingSelected: function(parent) {
				spinner.setSelection(singsong.selectedSong[0]);
			}
		}));
		let sing = new android.widget.Button(ctx);
		sing.setTypeface(Utils.font);
		sing.setText((singsong.selectedSong[1] == -1?"Start":"Stop") + " playing");
		sing.setBackground(singsong.selectedSong[1] == -1?disabledGradient:enabledGradient);
		sing.setTextColor(android.graphics.Color.BLACK);
		sing.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function(v){
				if(singsong.selectedSong[1] > -1)
					singsong.selectedSong[1] = -1;
				else
					singsong.selectedSong[1] = 0;
				singsong.lastTime = java.lang.System.currentTimeMillis() - 10000;
				sing.setText((singsong.selectedSong[1] == -1?"Start":"Stop") + " playing");
				DragOP.cmsg((singsong.selectedSong[1] == -1?"Stopped":"Started") + " playing.");
				sing.setBackground(singsong.selectedSong[1] == -1?disabledGradient:enabledGradient);
			}
		}));
		
		settings.addView(delaySlider, params);
		settings.addView(delayText, params);
		settings.addView(spinner, params);
		settings.addView(sing, params);
		return settings;
	},
	isStateMode: function () {
		return false;//For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return false;//MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		/*if(!this.state)
			return*/
			if(java.lang.System.currentTimeMillis() - this.lastTime > this.delay && this.selectedSong[1] > -1) {
				let msg = this.songList[this.selectedSong[0]][1][this.selectedSong[1]];
				this.selectedSong[1]++;
				if(this.selectedSong[1] >= this.songList[this.selectedSong[0]][1].length){
					this.selectedSong[1] = -1;
					DragOP.cmsg("Stopped singing");
				}
					
				Server.sendChat(msg);
				this.lastTime = java.lang.System.currentTimeMillis();
			}
			
	},
	onClick: function (btn) {
		/*this.state = !this.state;
		if(singsong.selectedSong[1] > -1 && !this.state){
			singsong.selectedSong[1] = -1;
			DragOP.cmsg ("Stopped singing");
		}
		*/
		DragOP.showModDialog(this);
			menu.dismiss();
	},
	onRefresh: function (btn) {
		if(btn != null)btn.setText(this.name);
	}
};
DragOP.registerModule(singsong);
var defaultDestroyTimes = [];
for (var i = 0; i <= 256; i++) {
	defaultDestroyTimes[i] = Block.getDestroyTime(i);
}
var fastbreak = {
	name: "FastBreak",
	desc: "Lets you break blocks faster",
	type: ModuleType.mod,
	category: ModCategory.PLAYER,
	state: false,
	breakTime: 60,
	getSettingsLayout: function (params) {
		let settings = new android.widget.LinearLayout(ctx);
		settings.setOrientation(1);
		let breakTimeTxt = new android.widget.TextView(ctx);
		breakTimeTxt.setText("BreakTime: "+(this.breakTime <= 0?"Instant":this.breakTime+"%"));
		breakTimeTxt.setTypeface(Utils.font);
		breakTimeTxt.setGravity(android.view.Gravity.CENTER);
		breakTimeTxt.setTextColor(android.graphics.Color.BLACK);
		let breakTimeSlider = Utils.ModSettings.getSlider();
		breakTimeSlider.setMax(100);
		breakTimeSlider.setProgress(this.breakTime);
		breakTimeSlider.setOnSeekBarChangeListener(new android.widget.SeekBar.OnSeekBarChangeListener({
			onProgressChanged: function (seekBar, progress, fromUser) {
				fastbreak.breakTime = progress;
				breakTimeTxt.setText("BreakTime: "+(fastbreak.breakTime <= 0?"Instant":fastbreak.breakTime+"%"));
			},
			onStopTrackingTouch: function (seekbar) {
				fastbreak.breakTime = seekbar.getProgress();
				fastbreak.refreshBreakTime();
			}
		}));
		settings.addView(breakTimeTxt, params);
		settings.addView(breakTimeSlider, params);
		return settings;
	},
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	refreshBreakTime: function(){
		defaultDestroyTimes.forEach(function(entry, index){
			if(entry > 0)
				Block.setDestroyTime(index, entry * fastbreak.breakTime / 100);
		});
	},
	onClick: function (btn) {this.state = !this.state},
	onRefresh: function (btn) {
		if(btn != null)btn.setText(this.name);
	}
};
DragOP.registerModule(fastbreak);
var safewalk = {
	name: "SafeWalk",
	desc: "You wont fall down at the edge of a block",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onModTick: function () {
		Entity.setSneaking(getPlayerEnt(), true);
	},
	onClick: function (btn) {
		this.state = !this.state;
		
		if(!this.state)
			Entity.setSneaking(getPlayerEnt(), false);
	},
	onRefresh: function (btn) {
		if(btn != null)btn.setText(this.name);
	}
};
DragOP.registerModule(safewalk);
/*
var statehack = {
	name: "Hack",
	desc: "Some Desc",
	type: ModuleType.mod,
	category: ModCategory.MOVEMENT,
	state: false,
	isStateMode: function () {
		return true; //For Menu Button Color (green = enabled, black(alpha:210) = disabled)
		//Call hack.state = !hack.state; to toggle 
	},
	isToggleAble: function () {
		return true; //MUST be true if isStateMode = true
		//Call hack.onClick() to toggle
	},
	onTick: function () {
		if(!this.state)
			return
	},
	onClick: function (btn) {this.state = !this.state},
	onRefresh: function (btn) {
		if(btn != null)btn.setText(this.name);
	}
};
	*/
/*
 * Commands
 */
DragOP.getHighestPageNumber = function () {
	let cmds = CommandManager.cmdModules.length;
	let pages = 1;
	while(cmds > 8) {
		cmds -= 8;
		pages++;
	}
	return pages;
};

DragOP.showHelpPage = function (page) {
	DragOP.cmsg("Showing help page " + page + "/" + DragOP.getHighestPageNumber());
	CommandManager.cmdModules.forEach(function (element, index, array) {
		if(index >= 8 * (page - 1) && index <= 8 * page - 1) {
			DragOP.cmsg("." + element.alias[0] + " " + element.syntax);
		}
	});
};

var help = {
	syntax: "<page>",
	alias: ["help", "h", "?", "commands"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		try {

			if(cmd[0] == undefined || cmd[0] == null || cmd[0] == "1" || cmd[0] <= 0) {
				DragOP.showHelpPage(1);
			} else {
				let pageInt = parseInt(cmd[0]);
				if(pageInt <= DragOP.getHighestPageNumber()) {
					DragOP.showHelpPage(pageInt);
				} else if(pageInt > DragOP.getHighestPageNumber()) {
					DragOP.showHelpPage(DragOP.getHighestPageNumber());
				}
			}
		} catch(e) {
			DragOP.showHelpPage(1);
		}

	}
};

DragOP.registerModule(help);

var toggle = {
	syntax: "<module>",
	alias: ["toggle", "t"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		if(cmd[0] != undefined && cmd[0] != null && cmd[0] != "") {
			let shouldReturn = false;
			DragOP.mods.forEach(function (entry, index, array) {
				if(entry.name.toLowerCase() == (cmd[0] + "").toLowerCase() && !shouldReturn) {
					if(entry.isStateMode()) {
						DragOP.mods[index].state = !DragOP.mods[index].state;
						DragOP.mods[index].onRefresh(null);
						DragOP.cmsg("Sucessfully toggled module " + entry.name);
					} else if(entry.isToggleAble()) {
						DragOP.mods[index].onClick(null);
						DragOP.mods[index].onRefresh(null);
						DragOP.cmsg("Sucessfully toggled module " + entry.name);
					} else {
						DragOP.cmsg(entry.name + "can't be toggled!");
					}
					shouldReturn = true;
				}
			});
			if(shouldReturn) return;
			DragOP.cmsg("Module " + cmd[0] + " can't be found!");
		} else {
			DragOP.cmsg(".toggle <module>");
		}
	}
};

DragOP.registerModule(toggle);

var friend = {
	syntax: "<add|remove|list>",
	alias: ["friend", "f"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (args) {
		switch(args[0]) {
		case "add":
			if(args[1] != "" && args[1] != null) {
				FriendManager.addFriend(args[1]);
				DragOP.cmsg("Friend " + args[1] + " added!");
			} else
				DragOP.cmsg(".friend add <name>");
			break;
		case "del":
		case "remove":
			if(args[1] != "" && args[1] != null) {
				FriendManager.removeFriend(args[1]);
				DragOP.cmsg("Friend " + args[1] + " removed!");
			} else
				DragOP.cmsg(".friend remove <name>");
			break;
		case "list":
			DragOP.cmsg("Your friends(" + FriendManager.all.length() + "): " + FriendManager.all.join(", "));
			break;
		default:
			DragOP.cmsg("." + this.alias[0] + " " + this.syntax);
		}
	}
};

DragOP.registerModule(friend);

var vclip = {
	syntax: "<height>",
	alias: ["vclip"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		if(cmd[0] != undefined && cmd[0] != null && cmd[0] != "") {
			try {
				let height = parseInt(cmd[0]);
				Entity.setPositionRelative(getPlayerEnt(), 0, height, 0);
				DragOP.cmsg("Moved " + height + " blocks");
			} catch(e) {
				DragOP.cmsg(".vclip <height>")
			}
		} else {
			DragOP.cmsg(".vclip <height>");
		}
	}
};

DragOP.registerModule(vclip);

var spamcmd = {
	syntax: "<subcmd>",
	alias: ["spammer"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (args) {
		switch(args[0].toLowerCase()) {
		case "msg":
		case "message":
			args.shift();
			spammer.msg = args.join(" ");
			DragOP.cmsg("Spammer message has been set to \"" + spammer.msg + "\"");
			break;
		case "delay":
			let delay = parseInt(args[1]) * 1000;
			spammer.delay = delay;
			DragOP.cmsg("Spammer delay has been set to " + delay + " milliseconds");
			break;
		default:
			DragOP.cmsg("Usage: spammer <message|delay>");
		}
	}
};
DragOP.registerModule(spamcmd);

var timingsCmd = {
	syntax: "",
	alias: ["timings"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		DragOP.cmsg(Timings.getTimingData().toString());
	}
};
DragOP.registerModule(timingsCmd);

var debug = {
	syntax: "<subcmd>",
	alias: ["debug"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		switch(cmd[0].toLowerCase()){
			case "winfo":
				let wInfo = "";
				wInfo += "World Info:\n";
				wInfo += Utils.Entity.getAll().length + " Entitys\n";
				wInfo += Server.getAllPlayers().length + " Players";
				DragOP.cmsg(wInfo);
				break;
			default:
				DragOP.cmsg("Usage: debug <winfo>");
		}
	}
};
DragOP.registerModule(debug);

/*
var command = {
	syntax: "<args>",
	alias: ["aliases"],
	type: ModuleType.command,
	isStateMod: function () {
		return false;
	},
	onCall: function (cmd) {
		
	}
};

*/


//Menu open Button
var menuBtn;
var moving = false;
var dx = 0;
var dy = 0;
var mPosX = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 16 * 5;
//Main Menu
var mwidth = ctx.getWindowManager()
	.getDefaultDisplay()
	.getWidth() / 100 * 70;
var menu;

var styledBtn = function () {
	let defaultBtn = new android.widget.Button(ctx);
	defaultBtn.setBackgroundDrawable(DragOP.getStyledBackground());
	return defaultBtn;
}

var modBtn = function (mod) {
	let btn = new android.widget.Button(ctx);
	btn.setTransformationMethod(null);
	if(!DragOP.lightMode) {
		btn.setBackground(null);
		btn.setShadowLayer(dip2px(1), dip2px(1), dip2px(1), android.graphics.Color.BLACK);
		btn.setTextColor(android.graphics.Color.WHITE);
		btn.setTypeface(Utils.font);
	}

	btn.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			mod.onClick(btn);
			mod.onRefresh(btn);
			if(!DragOP.lightMode)
				if(mod.isStateMode())
					modButtonLayout.setBackground(DragOP.getStyledBtnBackground(mod.state, true));
				else
					modButtonLayout.setBackground(DragOP.getStyledBtnBackground(false, false));

		}
	}));

	let btn1 = new android.widget.Button(ctx);
	btn1.setTransformationMethod(null);
	let txt = eval("new String(\"" + "\\" + "uD83D" + "\\" + "uDD3D\")");
	btn1.setText(txt + "");
	if(!DragOP.lightMode)
		btn1.setBackgroundColor(android.graphics.Color.argb(100, 0, 0, 0));
	btn1.setOnClickListener(new android.view.View.OnClickListener({
		onClick: function (viewarg) {
			DragOP.showModDialog(mod);
			menu.dismiss();

			//Show a screen or a dialog with the mod's info and settings
		}
	}));

	let modButtonLayout = new LinearLayout(ctx);
	modButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
	if(!DragOP.lightMode)
		if(mod.isStateMode())
			modButtonLayout.setBackground(DragOP.getStyledBtnBackground(mod.state, true));
		else
			modButtonLayout.setBackground(DragOP.getStyledBtnBackground(false, false));

	let modButtonLayoutLeft = new LinearLayout(ctx);
	modButtonLayoutLeft.setOrientation(1);
	modButtonLayoutLeft.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutLeft);

	let modButtonLayoutRight = new LinearLayout(ctx);
	modButtonLayoutRight.setOrientation(1);
	modButtonLayoutRight.setLayoutParams(new android.view.ViewGroup.LayoutParams(mwidth / 2 - mwidth / 2.5, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
	modButtonLayout.addView(modButtonLayoutRight);

	modButtonLayoutLeft.addView(btn);
	modButtonLayoutRight.addView(btn1);

	mod.onRefresh(btn);
	return modButtonLayout;
};


DragOP.generateMenu = function (keyword) {
	let lay = new android.widget.TableLayout(ctx);
	let currow;
	DragOP.mods.forEach(function (entry, index, array) {
		if(entry.type != ModuleType.cmd) {
			if((entry.name.toString()
					.toLowerCase()
					.indexOf(keyword.toString()
						.toLowerCase())) > -1 || (keyword == null || keyword == "" || keyword == undefined)) {
				if(index % 2 == 1) {
					if(!currow) currow = new android.widget.TableRow(ctx);
					currow.addView(new modBtn(DragOP.mods[index]));
					lay.addView(currow);
					currow = null;

				} else {
					currow = new android.widget.TableRow(ctx);
					currow.addView(new modBtn(DragOP.mods[index]));

				}
			} else {

			}
		}
	});
	if(currow != null) lay.addView(currow);
	let sc = new DragOP.scrollView(ctx);
	sc.addView(lay);
	return sc;
}

function showMenu() {
	let menu = Settings.getString("menu", "navigator").toLowerCase();
	if(menu == "basic") {
		showAlternateMenu();
	} else if(menu == "cater") {
		showCaterMenu();
	} else {
		showNavigatorMenu();
	}

}
function getCaterList(category){
	let list = new android.widget.LinearLayout(ctx);
	list.setOrientation(1);
	DragOP.mods.forEach(function(entry){
		if(entry.type != ModuleType.cmd && entry.category == category || (category == ModCategory.SPECIAL && entry.type == ModuleType.special)){
			let btn = new android.widget.Button(ctx);
						btn.setText(entry.name);
						btn.setTextColor(android.graphics.Color.WHITE);
						if(entry.isStateMode() && entry.state)
							btn.setBackgroundColor(android.graphics.Color.argb(210, 0, 200, 0));
						else if(entry.isStateMode())
							btn.setBackgroundColor(android.graphics.Color.argb(80, 0, 0, 0));
						else
							btn.setBackgroundColor(android.graphics.Color.argb(210, 230, 150, 30));
						btn.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function (viewarg) {
								entry.onClick(btn);
								entry.onRefresh(btn);
								if(entry.isStateMode() && entry.state)
									btn.setBackgroundColor(android.graphics.Color.argb(210, 0, 200, 0));
								else if(entry.isStateMode())
									btn.setBackgroundColor(android.graphics.Color.argb(80, 0, 0, 0));
								else
									btn.setBackgroundColor(android.graphics.Color.argb(210, 230, 150, 30));
							}
						}));
						btn.setOnLongClickListener(new android.view.View.OnLongClickListener({
							onLongClick: function (v, t) {
								ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
									.vibrate(60);
								DragOP.showModDialog(entry);
								menu.dismiss();
								return true;
							}
						}));
						list.addView(btn);
		}
	});
	let scroll = new android.widget.ScrollView(ctx);
	scroll.addView(list);
	scroll.setId(438354);
	return scroll;
}
function showCaterMenu() {
	DragOP.ctoast("Still not done here!");
	showAlternateMenu();
	return;
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let categoryHolder = new android.widget.LinearLayout(ctx);
				let categoryParam = new android.widget.LinearLayout.LayoutParams() 
				let currentCategory = ModCategory.MOVEMENT;
				let caterList = getCaterList(currentCategory);
				
				let toplayout = new android.widget.RelativeLayout(ctx);
				toplayout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						menu.dismiss();
						showMenuBtn();
						searchQ = "";
					}
				}));
				
				let dashBtn = new android.widget.Button(ctx);
				dashBtn.setText(DragOP.getLString("special.more"));
				dashBtn.setCompoundDrawablesWithIntrinsicBounds(0, android.R.drawable.ic_menu_more, 0, 0);
				dashBtn.setTypeface(Utils.font);
				dashBtn.setTextColor(android.graphics.Color.WHITE);
				dashBtn.setTransformationMethod(null);
				dashBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						openABoard();
						menu.dismiss();
					}
				}));
				
				let lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				toplayout.addView(caterList, lparam);
				lparam = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				lparam.addRule(android.widget.RelativeLayout.LEFT_OF, caterList.getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				toplayout.addView(dashBtn, lparam);
				menu = new android.widget.PopupWindow(toplayout, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, true);
				if(!DragOP.lightMode)
					menu.setAnimationStyle(android.R.style.Animation_Dialog);
				menu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER, 0, 0);
			} catch(e) {
				DragOP.ctoast("Cater Menu Error(" + e.lineNumber + "): " + e);
			}
		}
	}));
}

function showAlternateMenu() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let mlist = new android.widget.LinearLayout(ctx);
				mlist.setOrientation(1);

				DragOP.mods.forEach(function (entry, index, array) {
					if(entry.type != ModuleType.cmd) {
						let btn = new android.widget.Button(ctx);
						btn.setText(entry.name);
						btn.setTextColor(android.graphics.Color.WHITE);
						if(entry.isStateMode() && entry.state)
							btn.setBackgroundColor(android.graphics.Color.argb(210, 0, 200, 0));
						else if(entry.isStateMode())
							btn.setBackgroundColor(android.graphics.Color.argb(80, 0, 0, 0));
						else
							btn.setBackgroundColor(android.graphics.Color.argb(210, 230, 150, 30));
						btn.setOnClickListener(new android.view.View.OnClickListener({
							onClick: function (viewarg) {
								entry.onClick(btn);
								entry.onRefresh(btn);
								if(entry.isStateMode() && entry.state)
									btn.setBackgroundColor(android.graphics.Color.argb(210, 0, 200, 0));
								else if(entry.isStateMode())
									btn.setBackgroundColor(android.graphics.Color.argb(80, 0, 0, 0));
								else
									btn.setBackgroundColor(android.graphics.Color.argb(210, 230, 150, 30));
							}
						}));
						btn.setOnLongClickListener(new android.view.View.OnLongClickListener({
							onLongClick: function (v, t) {
								ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
									.vibrate(60);
								DragOP.showModDialog(entry);
								menu.dismiss();
								return true;
							}
						}));
						mlist.addView(btn);
					}
				});
				let scroll = new android.widget.ScrollView(ctx);
				scroll.addView(mlist);
				scroll.setId(52991);

				let dashBtn = new android.widget.Button(ctx);
				dashBtn.setText(DragOP.getLString("special.more"));
				dashBtn.setCompoundDrawablesWithIntrinsicBounds(0, android.R.drawable.ic_menu_more, 0, 0);
				dashBtn.setTypeface(Utils.font);
				dashBtn.setTextColor(android.graphics.Color.WHITE);
				dashBtn.setTransformationMethod(null);
				dashBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						openABoard();
						menu.dismiss();
					}
				}));


				let toplayout = new android.widget.RelativeLayout(ctx);
				toplayout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						menu.dismiss();
						showMenuBtn();
						searchQ = "";
					}
				}));
				let lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				toplayout.addView(scroll, lparam);
				lparam = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				lparam.addRule(android.widget.RelativeLayout.LEFT_OF, scroll.getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				toplayout.addView(dashBtn, lparam);
				menu = new android.widget.PopupWindow(toplayout, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, true);
				if(!DragOP.lightMode)
					menu.setAnimationStyle(android.R.style.Animation_Dialog);
				menu.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER, 0, 0);
			} catch(e) {
				DragOP.ctoast("Alternate Menu Error(" + e.lineNumber + "): " + e);
			}
		}
	}));
}

function showNavigatorMenu() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {

				let sbar = new android.widget.LinearLayout(ctx);
				if(!DragOP.lightMode) {
					let bg = android.graphics.drawable.GradientDrawable();
					bg.setColor(android.graphics.Color.argb(100, 255, 255, 255));
					bg.setStroke(dip2px(2), android.graphics.Color.BLACK);
					bg.setCornerRadius(1);

					sbar.setBackgroundDrawable(bg);
				}

				search = new android.widget.EditText(ctx);
				//search.setImeOptions( android.view.inputmethod.EditorInfo.IME_ACTION_DONE |  android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI);
				search.setImeOptions(android.view.inputmethod.EditorInfo.IME_FLAG_NO_EXTRACT_UI);
				search.setBackgroundColor(android.graphics.Color.TRANSPARENT);
				search.setHint("Search a mod");
				search.setTypeface(Utils.font);
				search.setHintTextColor(android.graphics.Color.argb(240, 80, 80, 80));
				search.setTextColor(android.graphics.Color.BLACK);
				search.setGravity(android.view.Gravity.CENTER);
				search.addTextChangedListener(new android.text.TextWatcher({
					afterTextChanged: function (text) {
						updateMenu(text, toplayout);
						searchQ = text;
					}
				}));
				sbar.addView(search, new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT));
				sbar.setId(39472);
				mlist = new android.widget.LinearLayout(ctx);
				mlist.setId(20372);
				mlist.addView(DragOP.generateMenu(search.getText() + ""));
				let lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				lparam.addRule(android.widget.RelativeLayout.CENTER_HORIZONTAL);
				let toplayout = new android.widget.RelativeLayout(ctx);
				toplayout.addView(sbar, lparam);
				lparam = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);

				lparam.addRule(android.widget.RelativeLayout.BELOW, toplayout.getChildAt(0).getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_RIGHT, toplayout.getChildAt(0).getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_LEFT, toplayout.getChildAt(0).getId());
				lparam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				mlist.setLayoutParams(lparam);
				mlist.setId(563729);
				toplayout.addView(mlist);

				//Side stuff
				let sideLayout = new android.widget.RelativeLayout(ctx);
				let roundGradient = new android.graphics.drawable.GradientDrawable();
				roundGradient.setColor(android.graphics.Color.argb(200, 30, 30, 30));
				roundGradient.setCornerRadius(dip2px(20));
				roundGradient.setStroke(dip2px(1), android.graphics.Color.argb(150, 0, 0, 0));

				let dashBtn = new android.widget.Button(ctx);
				dashBtn.setText(DragOP.getLString("special.more"));
				dashBtn.setCompoundDrawablesWithIntrinsicBounds(0, android.R.drawable.ic_menu_more, 0, 0);
				dashBtn.setTypeface(Utils.font);
				dashBtn.setTextColor(android.graphics.Color.WHITE);
				dashBtn.setTransformationMethod(null);
				dashBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						openABoard();
						menu.dismiss();
					}
				}));

				let InParam = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				InParam = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				InParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				sideLayout.addView(dashBtn, InParam);

				let sideParams = new android.widget.RelativeLayout.LayoutParams(ctx.getWindowManager().getDefaultDisplay().getWidth() / 100 * 15, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT);
				sideParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				sideParams.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);

				toplayout.addView(sideLayout, sideParams);
				toplayout.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						menu.dismiss();
						showMenuBtn();
						searchQ = "";
					}
				}));
				menu = new android.widget.PopupWindow(toplayout, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, true);
				if(!DragOP.lightMode)
					menu.setAnimationStyle(android.R.style.Animation_Dialog);
				menu.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.CENTER, 0, 0);
			} catch(e) {
				DragOP.ctoast(e);
			}
		}
	}));
}
var updatemgrDialog;
var settingDialog;
var aboutDialog;
var SettingMode = {
	MODE_TOGGLE: 1,
	MODE_LIST: 2
};
//[[propertyName, fallbackValue], [value1, value2, value3, .....]] 
function SettingEntry(name, mode, valueList, onSelect) {
	let layout = new android.widget.RelativeLayout(ctx);
	let bg = new android.graphics.drawable.GradientDrawable();
	bg.setStroke(3, android.graphics.Color.BLACK);
	let nameT = new android.widget.TextView(ctx);
	nameT.setTypeface(Utils.font);
	nameT.setText(" " + name);
	nameT.setSingleLine(true);
	nameT.setTextSize(dip2px(13));
	nameT.setTextColor(android.graphics.Color.WHITE);
	nameT.setGravity(android.view.Gravity.CENTER);
	let chooser = new android.widget.Button(ctx);
	if(mode == SettingMode.MODE_TOGGLE) {
		let curValue = Settings.getBoolean(valueList[0][0], valueList[0][1] == null ? false : valueList[0][1]);
		let on = valueList[1] == null ? "On" : valueList[1][0];
		let off = valueList[1] == null ? "Off" : valueList[1][1];
		chooser.setText(curValue ? on : off);
		chooser.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				curValue = !curValue;
				if(onSelect != null)
					onSelect(curValue);
				Settings.setBoolean(valueList[0][0], curValue);
				chooser.setText(curValue ? on : off);
			}
		}));
	} else if(mode == SettingMode.MODE_LIST) {
		let curValue = Settings.getString(valueList[0][0], valueList[0][1] == null ? "" : valueList[0][1]);
		let nextValue = curValue;
		let done = false;
		valueList[1].forEach(function (entry, index) {
			if(entry.toLowerCase() == curValue.toLowerCase() && done == false) {
				if(index + 1 == valueList[1].length) {
					nextValue = valueList[1][0];
				} else {
					nextValue = valueList[1][index + 1];
				}
				done = true;
			}
		});
		chooser.setText(curValue);
		chooser.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function (v) {
				v.setText(nextValue);
				if(onSelect != null)
					onSelect(nextValue);
				curValue = nextValue;
				Settings.setString(valueList[0][0], curValue);
				let done = false;
				valueList[1].forEach(function (entry, index) {
					if(entry.toLowerCase() == curValue.toLowerCase() && done == false) {
						if(index + 1 == valueList[1].length) {
							nextValue = valueList[1][0];
						} else {
							nextValue = valueList[1][index + 1];
						}
						done = true;
					}
				});
			}
		}));
	}
	let param = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT);
	param.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
	param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
	layout.addView(nameT, param);
	param = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.MATCH_PARENT);
	param.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
	param.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
	layout.addView(chooser, param);
	param = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.MATCH_PARENT, dip2px(50));
	layout.setLayoutParams(param);
	layout.setBackground(bg);
	return layout;
}

function openSettingScreen() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				let content = new android.widget.LinearLayout(ctx);
				content.setId(9472729);
				content.setOrientation(1);
				let contentScroll = new DragOP.scrollView(ctx);
				contentScroll.setId(492628);
				//default content
				let title = new android.widget.TextView(ctx);
				title.setText(android.text.Html.fromHtml("<u>" + DragOP.getLString("screen.settings") + "</u>"));
				title.setTextSize(dip2px(20));
				title.setGravity(android.view.Gravity.CENTER);
				title.setTextColor(android.graphics.Color.BLACK);
				title.setTypeface(Utils.font);
				title.setId(94771);

				let btnBg = new android.graphics.drawable.GradientDrawable();
				btnBg.setColor(android.graphics.Color.argb(120, 255, 255, 255));
				btnBg.setStroke(2, android.graphics.Color.BLACK);
				btnBg.setCornerRadius(dip2px(5));

				let setMenu = SettingEntry("Menu", SettingMode.MODE_LIST, [
					["menu", "Navigator"],
					["Navigator", "Basic", "Cater"]
				], function (item) {
					switch(item) {
					case "Basic":
						DragOP.ctoast("Long hold a button to open its Settings menu!");
						break;
					case "Cater":
						DragOP.ctoast("This Menu is not done yet!");
					}
				});
				content.addView(setMenu);
				let setCommandEnable = SettingEntry("Enable Commands", SettingMode.MODE_TOGGLE, [
					["enable_commands", true],
					null
				], null)
				content.addView(setCommandEnable);
				let commandPrefix = SettingEntry("Command Prefix", SettingMode.MODE_LIST, [
					["command_prefix", "."],
					[".", "@", "&", "*", "~"]
				], null);
				content.addView(commandPrefix);

				//footer
				let closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				closeButton.setTextColor(android.graphics.Color.BLACK);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				let dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				let params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				dialogLayout.addView(title, params);
				contentScroll.addView(content);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, title.getId());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
				contentScroll.setFillViewport(true);
				dialogLayout.addView(contentScroll, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				settingDialog = new android.app.Dialog(ctx);
				settingDialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				settingDialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				settingDialog.setContentView(dialogLayout);
				settingDialog.setCanceledOnTouchOutside(true);
				settingDialog.setTitle(DragOP.getLString("special.aboard"));
				settingDialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {

					}
				}));
				settingDialog.show();
				let window = settingDialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						settingDialog.dismiss();
					}
				}));
			} catch(e) {
				DragOP.ctoast("Error: " + e);
			}
		}
	}));
}

function openAboutScreen() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				let dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				//default content
				let title = new android.widget.TextView(ctx);
				title.setText(android.text.Html.fromHtml("<u>" + DragOP.getLString("screen.about") + "</u>"));
				title.setTextSize(dip2px(20));
				title.setGravity(android.view.Gravity.CENTER);
				title.setTextColor(android.graphics.Color.BLACK);
				title.setTypeface(Utils.font);
				title.setId(94771);
				
				let about = new android.widget.TextView (ctx);
				about.setTextSize(dip2px(10));
				about.setText ("DragOP was made by GodSoft029 and Peacestorm");
				about.setGravity(android.view.Gravity.CENTER | android.view.Gravity.TOP);
				about.setTextColor(android.graphics.Color.BLACK);
				about.setTypeface(Utils.font);
				about.setId(96751);
				
				let yt = new android.widget.Button (ctx);
				yt.setText ("YouTube");
				yt.setTypeface (Utils.font);
				yt.setGravity (android.view.Gravity.CENTER);
				yt.setTextColor (android.graphics.Color.BLACK);
				yt.setId (63619);
				yt.setOnClickListener (new android.view.View.OnClickListener ({
					onClick: function (view){
						ctx.startActivity (new android.content.Intent (android.content.Intent.ACTION_VIEW, android.net.Uri.parse ("https://youtube.com/c/godsoft029")));
					}
				}));
				
				let twitter = new android.widget.Button (ctx);
				twitter.setText ("Twitter");
				twitter.setTypeface (Utils.font);
				twitter.setGravity (android.view.Gravity.CENTER);
				twitter.setTextColor (android.graphics.Color.BLACK);
				twitter.setId (13827);
				twitter.setOnClickListener (new android.view.View.OnClickListener ({
					onClick: function (view){
						ctx.startActivity (new android.content.Intent (android.content.Intent.ACTION_VIEW, android.net.Uri.parse ("https://twitter.com/godsoft029")));
					}
				}));
				
				let github = new android.widget.Button(ctx);
				github.setText ("Github");
				github.setTypeface (Utils.font);
				github.setGravity (android.view.Gravity.CENTER);
				github.setTextColor (android.graphics.Color.BLACK);
				github.setId (28472);
				github.setOnClickListener (new android.view.View.OnClickListener ({
					onClick: function (view){
						ctx.startActivity (new android.content.Intent (android.content.Intent.ACTION_VIEW, android.net.Uri.parse ("https://github.com/godsoft029")));
					}
				}));

				//footer
				let closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				closeButton.setTextColor(android.graphics.Color.BLACK);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				
				let params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule (android.widget.RelativeLayout.BELOW, title.getId ());
				params.addRule (android.widget.RelativeLayout.ABOVE, yt.getId ());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				dialogLayout.addView (about, params);
				params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule (android.widget.RelativeLayout.ABOVE, closeButton.getId ());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.LEFT_OF, github.getId ());
				dialogLayout.addView (yt, params);
				params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule (android.widget.RelativeLayout.ABOVE, closeButton.getId ());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				params.addRule (android.widget.RelativeLayout.RIGHT_OF, github.getId ());
				dialogLayout.addView (twitter, params);
				params = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule (android.widget.RelativeLayout.ABOVE, closeButton.getId ());
				params.addRule (android.widget.RelativeLayout.CENTER_IN_PARENT);
				dialogLayout.addView(github, params);
				
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				dialogLayout.addView(title, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				aboutDialog = new android.app.Dialog(ctx);
				aboutDialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				aboutDialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				aboutDialog.setContentView(dialogLayout);
				aboutDialog.setCanceledOnTouchOutside(true);
				aboutDialog.setTitle(DragOP.getLString("special.about"));
				aboutDialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {

					}
				}));
				aboutDialog.show();
				let window = aboutDialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						aboutDialog.dismiss();
					}
				}));
			} catch(e) {
				DragOP.ctoast("Error: " + e);
			}
		}
	}));
}

function openUpdateMgrScreen() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				let content = new android.widget.LinearLayout(ctx);
				content.setId(9472729);
				content.setOrientation(1);
				let contentScroll = new DragOP.scrollView(ctx);
				contentScroll.setId(492628);
				//default content
				let title = new android.widget.TextView(ctx);
				title.setText(android.text.Html.fromHtml("<u>" + DragOP.getLString("screen.updatemgr") + "</u>"));
				title.setTextSize(dip2px(20));
				title.setGravity(android.view.Gravity.CENTER);
				title.setTextColor(android.graphics.Color.BLACK);
				title.setTypeface(Utils.font);
				title.setId(94771);

				let verBg = new android.graphics.drawable.GradientDrawable();
				verBg.setColor(android.graphics.Color.argb(120, 255, 255, 255));
				verBg.setStroke(2, android.graphics.Color.BLACK);
				verBg.setCornerRadius(dip2px(12));

				let heig = dip2px(100);

				let verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				//CurrentVersion
				let currentVer = new android.widget.RelativeLayout(ctx);
				currentVer.setBackground(verBg);
				let currTitle = new android.widget.TextView(ctx);
				currTitle.setTypeface(Utils.font);
				currTitle.setTextSize(dip2px(13));
				currTitle.setId(972404);
				currTitle.setTextColor(android.graphics.Color.BLACK);
				currTitle.setText("Current Version (v" + UpdateManager.version + ")");
				let currDlBtn = new android.widget.Button(ctx);
				currDlBtn.setText("Installed");
				currDlBtn.setId(535714);
				currDlBtn.setTextColor(android.graphics.Color.BLACK);
				currDlBtn.setEnabled(false);
				currDlBtn.setTypeface(Utils.font);
				currDlBtn.setTextSize(dip2px(9));
				let desc = new android.widget.TextView(ctx);
				desc.setTypeface(Utils.font);
				desc.setTextColor(android.graphics.Color.BLACK);
				desc.setPadding(dip2px(4), dip2px(2), dip2px(5), 0);
				desc.setText("Thats your version. (" + (DragOP.dev ? "Developer" : "Stable") + "-Channel)");

				verParam.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				currentVer.addView(currTitle, verParam);
				verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				verParam.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				currentVer.addView(currDlBtn, verParam);
				verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				verParam.addRule(android.widget.RelativeLayout.BELOW, currTitle.getId());
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				verParam.addRule(android.widget.RelativeLayout.LEFT_OF, currDlBtn.getId());
				currentVer.addView(desc, verParam);

				//Stable Version
				let stableVer = new android.widget.RelativeLayout(ctx);
				stableVer.setBackground(verBg);
				let stableTitle = new android.widget.TextView(ctx);
				stableTitle.setTypeface(Utils.font);
				stableTitle.setTextSize(dip2px(13));
				stableTitle.setId(972144);
				stableTitle.setTextColor(android.graphics.Color.BLACK);
				if(UpdateManager.stableInfo == null)
					stableTitle.setText("No Network Connection");
				else
					stableTitle.setText("Stable version (" + UpdateManager.stableInfo.getString("tag_name") + ")");
				let stableDlBtn = new android.widget.Button(ctx);
				stableDlBtn.setText("WIP");
				stableDlBtn.setId(537814);
				stableDlBtn.setTextColor(android.graphics.Color.BLACK);
				stableDlBtn.setEnabled(false);
				stableDlBtn.setTypeface(Utils.font);
				stableDlBtn.setTextSize(dip2px(9));
				let stableDesc = new android.widget.TextView(ctx);
				stableDesc.setTypeface(Utils.font);
				stableDesc.setTextColor(android.graphics.Color.BLACK);
				stableDesc.setPadding(dip2px(4), dip2px(2), dip2px(5), 0);
				stableDesc.setVerticalScrollBarEnabled(true);
				stableDesc.setMovementMethod(new android.text.method.ScrollingMovementMethod());
				stableDesc.setText("The latest Stable version. \nRelease Notes: \n" + UpdateManager.stableInfo.getString("body"));

				verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				verParam.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				stableVer.addView(stableTitle, verParam);
				verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				verParam.addRule(android.widget.RelativeLayout.CENTER_IN_PARENT);
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				stableVer.addView(stableDlBtn, verParam);
				verParam = new android.widget.RelativeLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.WRAP_CONTENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
				verParam.addRule(android.widget.RelativeLayout.BELOW, stableTitle.getId());
				verParam.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				verParam.addRule(android.widget.RelativeLayout.LEFT_OF, stableDlBtn.getId());
				stableVer.addView(stableDesc, verParam);

				let params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, heig);
				content.addView(currentVer, params);
				params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, heig);
				content.addView(stableVer, params);


				//footer
				let closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				closeButton.setTextColor(android.graphics.Color.BLACK);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				let dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				dialogLayout.addView(title, params);
				contentScroll.addView(content);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, title.getId());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
				contentScroll.setFillViewport(true);
				dialogLayout.addView(contentScroll, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				updatemgrDialog = new android.app.Dialog(ctx);
				updatemgrDialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				updatemgrDialog.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				updatemgrDialog.setContentView(dialogLayout);
				updatemgrDialog.setCanceledOnTouchOutside(true);
				updatemgrDialog.setTitle(DragOP.getLString("special.aboard"));
				updatemgrDialog.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {

					}
				}));
				updatemgrDialog.show();
				let window = updatemgrDialog.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						updatemgrDialog.dismiss();
					}
				}));
			} catch(e) {
				DragOP.ctoast("No Internet Connection detected. Restart your Launcher if you think this is an Error");
			}
		}
	}));
}

function openABoard() {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let display = new android.util.DisplayMetrics();
				com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
					.getWindowManager()
					.getDefaultDisplay()
					.getMetrics(display);
				let content = new android.widget.LinearLayout(ctx);
				content.setId(9472729);
				content.setOrientation(1);
				let contentScroll = new DragOP.scrollView(ctx);
				contentScroll.setId(492628);
				//default content
				let title = new android.widget.TextView(ctx);
				title.setText(android.text.Html.fromHtml("<u>" + DragOP.getLString("special.more") + "</u>"));
				title.setTextSize(dip2px(20));
				title.setGravity(android.view.Gravity.CENTER);
				title.setTextColor(android.graphics.Color.BLACK);
				title.setTypeface(Utils.font);
				title.setId(94771);

				let btnBg = new android.graphics.drawable.GradientDrawable();
				btnBg.setColor(android.graphics.Color.argb(120, 255, 255, 255));
				btnBg.setStroke(2, android.graphics.Color.BLACK);
				btnBg.setCornerRadius(dip2px(5));

				let btnSelected = new android.graphics.drawable.GradientDrawable();
				btnSelected.setColor(android.graphics.Color.argb(120, 170, 170, 170));
				btnSelected.setStroke(2, android.graphics.Color.BLACK);
				btnSelected.setCornerRadius(dip2px(5));

				let btnListener = new android.view.View.OnTouchListener({
					onTouch: function (v, motionEvent) {
						try {
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								v.setBackground(btnSelected);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								v.setBackground(btnBg);
								break;
							}

						} catch(e) {
							DragOP.ctoast("Error: " + e);
						}
						return false;
					}
				});

				let settingBtn = new android.widget.Button(ctx);
				settingBtn.setText("Settings");
				settingBtn.setTypeface(Utils.font);
				settingBtn.setBackground(btnBg);
				settingBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0, android.R.drawable.ic_menu_manage, 0);
				settingBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						aboard.dismiss();
						openSettingScreen();
					}
				}));
				settingBtn.setOnTouchListener(btnListener);
				content.addView(settingBtn);

				let updateBtn = new android.widget.Button(ctx);
				updateBtn.setText(DragOP.getLString("screen.updatemgr"));
				updateBtn.setTypeface(Utils.font);
				updateBtn.setBackground(btnBg);
				updateBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0, android.R.drawable.stat_sys_download, 0);
				updateBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						aboard.dismiss();
						openUpdateMgrScreen();
					}
				}));
				updateBtn.setOnTouchListener(btnListener);
				content.addView(updateBtn);

				let aboutBtn = new android.widget.Button(ctx);
				aboutBtn.setText(DragOP.getLString("screen.about"));
				aboutBtn.setTypeface(Utils.font);
				aboutBtn.setBackground(btnBg);
				aboutBtn.setCompoundDrawablesWithIntrinsicBounds(0, 0, android.R.drawable.ic_menu_info_details, 0);
				aboutBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (v) {
						aboard.dismiss();
						openAboutScreen();
					}
				}));
				aboutBtn.setOnTouchListener(btnListener);
				content.addView(aboutBtn);
				//footer
				let closeButton = new styledBtn();
				closeButton.setText("Close");
				closeButton.setPadding(0.5, closeButton.getPaddingTop(), 0.5, closeButton.getPaddingBottom());
				closeButton.setId(10472);
				closeButton.setTypeface(Utils.font);
				closeButton.setTextColor(android.graphics.Color.BLACK);
				closeButton.setTypeface(Utils.font);
				//layout alignement....
				let dialogLayout = new android.widget.RelativeLayout(ctx);
				dialogLayout.setBackgroundDrawable(DragOP.getStyledBackground());
				let params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				dialogLayout.addView(title, params);
				contentScroll.addView(content);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.BELOW, title.getId());
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_LEFT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_RIGHT);
				params.addRule(android.widget.RelativeLayout.ABOVE, closeButton.getId());
				contentScroll.setFillViewport(true);
				dialogLayout.addView(contentScroll, params);
				params = new android.widget.RelativeLayout.LayoutParams(mwidth, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				params.addRule(android.widget.RelativeLayout.ALIGN_PARENT_BOTTOM);
				dialogLayout.addView(closeButton, params);
				//Dialog Stuff
				aboard = new android.app.Dialog(ctx);
				aboard.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
				aboard.getWindow()
					.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				aboard.setContentView(dialogLayout);
				aboard.setCanceledOnTouchOutside(true);
				aboard.setTitle(DragOP.getLString("special.aboard"));
				aboard.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
					onDismiss: function () {

					}
				}));
				aboard.show();
				let window = aboard.getWindow();
				window.setLayout(mwidth, display.heightPixels);
				closeButton.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (view) {
						aboard.dismiss();
					}
				}));
			} catch(e) {
				DragOP.ctoast("Error: " + e);
			}
		}
	}));
}

/*function refreshMenu() {
	if(mlist != null && mlist != Undefined) {
		mlist.removeAllViews();
		let genmenu = DragOP.generateMenu(search.getText() + "");
		if(mlist != null) mlist.addView(genmenu);
	}
}*/
DragOP.mt = ModuleType;

function updateMenu(keyword, toplayout) {
	Utils.currentSearchCount += 1;
	if(Utils.currentSearchCount > 999) Utils.currentSearchCount = 0;
	let myNum = Utils.currentSearchCount;
	let r = new java.lang.Runnable({
		run: function () {
			let newList = DragOP.generateMenu(keyword);
			ctx.runOnUiThread(new java.lang.Runnable({
				run: function () {
					try {
						if(myNum == Utils.currentSearchCount) {
							let mlist = toplayout.getChildAt(1);
							let lparam = mlist.getLayoutParams();
							while(mlist.getChildCount() > 0) mlist.removeView(mlist.getChildAt(0));
							mlist.addView(newList);
						}
					} catch(e) {
						DragOP.ctoast(e);
					}
				}
			}));
		}
	});
	let t = new java.lang.Thread(r);
	t.start();
}

function menuBtnAnimation(currentAlpha) {
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			new android.os.Handler().postDelayed(new java.lang.Runnable({
				run: function () {
					menuBtn.getBackground().setAlpha(currentAlpha);
					menuBtn.setTextColor(menuBtn.getTextColors().withAlpha(currentAlpha));
					if(currentAlpha != 0) {
						currentAlpha = Math.max(0, currentAlpha - 4);
						menuBtnAnimation(currentAlpha);
					}

				}
			}), 10);
		}
	}))
}

function showMenuBtn() {

	menuBtn = new android.widget.Button(ctx);
	ctx.runOnUiThread(new java.lang.Runnable({
		run: function () {
			try {
				let bg = new android.graphics.drawable.GradientDrawable();
				bg.setStroke(2, android.graphics.Color.argb(255, 0, 0, 0));
				bg.setColor(android.graphics.Color.argb(130, 200, 202, 200));
				bg.setShape( android.graphics.drawable.GradientDrawable.RECTANGLE);
				menuBtn.setText("D");
				menuBtn.setTextColor(android.graphics.Color.BLACK);
				menuBtn.setTypeface(Utils.font);
				menuBtn.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function (viewarg) {
						showMenu();
						GUI.dismiss();
						GUI = null;
					}
				}));
				menuBtn.setOnTouchListener(new android.view.View.OnTouchListener({
					onTouch: function (view, motionEvent) {
						try {
							if(!moving) return false;
							switch(motionEvent.getAction()) {
							case android.view.MotionEvent.ACTION_DOWN:
								dx = mPosX - motionEvent.getRawX();
								break;
							case android.view.MotionEvent.ACTION_MOVE:
								mPosX = (motionEvent.getRawX() + dx);
								GUI.update(mPosX, 0, -1, -1);
								break;
							case android.view.MotionEvent.ACTION_UP:
							case android.view.MotionEvent.ACTION_CANCEL:
								moving = false;
								break;
							}
						} catch(e) {
							DragOP.ctoast("Error: " + e);
						}

						return true;
					}
				}));
				menuBtn.setOnLongClickListener(new android.view.View.OnLongClickListener({
					onLongClick: function (v, t) {
						ctx.getSystemService(android.content.Context.VIBRATOR_SERVICE)
							.vibrate(60);
						moving = true;
						return true;
					}
				}));
				menuBtn.setBackground(bg);
				if(GUI != null && GUI.isShowing()) GUI.dismiss();
				GUI = new android.widget.PopupWindow(menuBtn, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
				GUI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
				GUI.showAtLocation(ctx.getWindow()
					.getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ctx.getWindowManager()
					.getDefaultDisplay()
					.getWidth() / 16 * 5, 0);
				if(DragOP.ghostMode)
					menuBtnAnimation(250);
			} catch(err) {
				DragOP.ctoast(err);
			}
		}
	}));
}
showMenuBtn();

function rptask() {
	let t = new java.lang.Thread(new java.lang.Runnable({
		run: function () {

			while(true) {
				//Timings.resetData();
				let randString = "";

				if(DragOP.modi) {
					for(let i = 0; i < 30; i++) randString += String.fromCharCode(Math.floor(Math.random() * 255));
					if(tick1 % 5 == 0) {
						setVelX(getPlayerEnt(), Math.random() * 2 - 1);
						setVelY(getPlayerEnt(), Math.random() - 0.5);
						setVelZ(getPlayerEnt(), Math.random() * 2 - 1);

					}
					setRot(getPlayerEnt(), getYaw() + 6, 45 * Math.sin(getYaw() / 45));
					if(tick1 % 25 == 0 && getPlayerEnt() != 0 && getPlayerEnt() != -1)
						Level.explode(getPlayerX(), getPlayerY(), getPlayerZ(), 5);
					ModPE.langEdit("gui.back", randString);
					ModPE.langEdit("gui.toMenu", randString);
					ModPE.langEdit("menu.returnToGame", randString);
					ModPE.langEdit("menu.returnToMenu", randString);
					ModPE.langEdit("pauseScreen.back", randString);
					ModPE.langEdit("pauseScreen.header", randString);
					ModPE.langEdit("pauseScreen.options", randString);
					ModPE.langEdit("pauseScreen.quit", randString);
					ModPE.langEdit("pauseScreen.invite", randString);
					ModPE.langEdit("playscreen.new", randString);
				}
				Timings.startTiming("onTick");
				DragOP.mods.forEach(function (entry, index, array) {
					try {
						if(entry.hasOwnProperty("onTick") && (entry.state || entry.isStateMode() == false)) entry.onTick();
					} catch(e) {}
				});
				Timings.stopTiming("onTick");
				if(Utils.Render.initted)
					Utils.Render.glSurface.requestRender();
				Timings.startTiming("misc");
				if(DragOP.inGame == true && Player.getEntity() != -1 && getPlayerEnt() != 0) {
					if(Utils.Player.onGround()) Utils.flyTick = 0;
					else Utils.flyTick++;
					Utils.Vel.lastX = Entity.getVelX(Player.getEntity());
					Utils.Vel.lastY = Entity.getVelY(Player.getEntity());
					Utils.Vel.lastZ = Entity.getVelZ(Player.getEntity());
				}
				Utils.Pos.lastX = getPlayerX();
				Utils.Pos.lastY = getPlayerY();
				Utils.Pos.lastZ = getPlayerZ();

				if(DragOP.getMetersScrolled() >= 1000 && !DragOP.finishedScroll) {
					DragOP.finishedScroll = true;
					editor.putBoolean("DragOP.egg.finishedScroll", true);
					editor.commit();
					DragOP.ctoast("Achievement get: Scroll 1 km", true, android.R.drawable.star_big_off);
				}
				Timings.stopTiming("misc");
				tick1++;
				if(tick1 > 50) tick1 = 0;


				if(tick1 % 25 == 0){Timings.startTiming("workaround");
					ctx.runOnUiThread(new java.lang.Runnable({
						run: function () {

							if((GUI != null && GUI.isShowing()) && (menu != null && menu.isShowing())) GUI.dismiss();
							if((GUI == null || !GUI.isShowing()) &&
								(menu == null || !menu.isShowing()) &&
								(dialog == null || !dialog.isShowing()) &&
								(aboard == null || !aboard.isShowing()) &&
								(settingDialog == null || !settingDialog.isShowing()) &&
								(updatemgrDialog == null || !updatemgrDialog.isShowing()) &&
								(aboutDialog == null || !aboutDialog.isShowing()) &&
								(webbrowser.browser == null || !webbrowser.browser.isShowing())) {
								showMenuBtn();
							}
							if(DragOP.modi == undefined &&
								((GUI != null && GUI.isShowing() == true && menuBtn != null && menuBtn.getText() != "D") || (typeof DragOP == undefined))) {

								DragOP.modi = true;
								if(!DragOP.finishedBreak) {
									DragOP.finishedBreak = true;
									editor.putBoolean("DragOP.egg.finishedBreak", true);
									editor.commit();
									DragOP.ctoast("Achievement get: Break DragOP", true, android.R.drawable.star_big_off);
								}
							}
							if(DragOP.modi && menu != null && menu.isShowing())
								menu.dismiss();
							if(DragOP.modi && tick1 % 2 == 0 && getPlayerEnt() != 0 && getPlayerEnt() != -1 && menuBtn != null && GUI != null && GUI.isShowing()) {
								menuBtn.setBackgroundColor(android.graphics.Color.rgb(Math.random() * 200, Math.random() * 200, Math.random() * 200));
								menuBtn.setText(randString);
							}

						}
					}));
					Timings.stopTiming("workaround");
					}
				java.lang.Thread.sleep(20);
			}
		}
	}));
	t.start();
}

rptask();
DragOP.loadModsAnim(0);

function chatHook(text) {

	if(text.charAt(0) == Settings.getString("command_prefix", ".") && Settings.getBoolean("enable_commands", true) == true && !CommandManager.isBlacklisted(text.substring(1, text.length))) {
		preventDefault();

		try {
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
				.updateTextboxText("");
			com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
				.nativeSetTextboxText("");

		} catch(e) {
			//Not-BlockLauncher-Error
		}
		CommandManager.onCommand(text.substring(1, text.length));
	}
}
this.Item.getEnchantType = function (id) {
	if(id == 340) return 0;
	if(Item.getUseAnimation(id) == UseAnimation.bow) return 1;
	if(id == 258 || id == 271 || id == 275 || id == 279 || id == 286) return 2;
	if(id == 290 || id == 291 || id == 292 || id == 293 || id == 294) return 2;
	if(id == 257 || id == 270 || id == 274 || id == 278 || id == 285) return 2;
	if(id == 256 || id == 269 || id == 273 || id == 277 || id == 284) return 2;
	if(id == 359 || id == 259) return 2;
	if(id == 267 || id == 268 || id == 272 || id == 276 || id == 283) return 3;
	if(id >= 298 && id <= 317) return 4;
	if(id == 346) return 5;
};

function attackHook(att, vic) {

	DragOP.mods.forEach(function (entry, index, array) {
		try {
			entry.onAttack(att, vic);
		} catch(e) {}

	});
}

function useItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage) {
	DragOP.mods.forEach(function (entry, index, array) {
		try {
			entry.onUseItem(x, y, z, itemid, blockid, side, itemDamage, blockDamage);
		} catch(e) {}

	});

}

function newLevel() {
	DragOP.inGame = true;
}

function leaveGame() {
	Utils.Entity.allEntitys = new Array();
	DragOP.inGame = false;
}

function entityAddedHook(ent) {
	if(Entity.getMobSkin(ent) != "mob/char.png") Utils.Entity.allEntitys.push(ent);
	else Utils.Entity.charEnts.push(ent);
}

function entityRemovedHook(ent) {
	Utils.Entity.charEnts.forEach(function (entry, index, array) {
		if(entry == ent) Utils.Entity.charEnts.splice(index, 1);

	});
	Utils.Entity.allEntitys.forEach(function (entry, index, array) {
		if(entry == ent) Utils.Entity.allEntitys.splice(index, 1);

	});
}

function entityHurtHook(att, vic, hearts) {
	DragOP.mods.forEach(function (entry, index, array) {
		try {
			entry.onHurt(att, vic, hearts);
		} catch(e) {}

	});
}

function modTick() {
	DragOP.mods.forEach(function (entry, index, array) {
		try {
			if(entry.hasOwnProperty("onModTick") && (entry.state || entry.isStateMode() == false))entry.onModTick();
		} catch(e) {}

	});
}

function screenChangeHook(screen) {
	if(screen.toString().startsWith("progress_screen") && !Utils.Render.initted)
		Utils.Render.init();
	Utils.currentScreen = screen;
}